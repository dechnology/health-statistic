{
    "schemes": [
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "This is the API documentation for 「健康資料公鏈」\n\n## Flow Diagram\n\n![flow_diagram](https://cdn.discordapp.com/attachments/874556062815100940/1132920083174408222/App-.drawio.png)\n\n---\n\n## Auth0 Setup\n\nThis API uses Auth0 as its authorization provider, and all endpoints are protected using Auth0 token.\nTherefore, all your requests must have **Authorization** header with a bearer token.\n\nUse the following parameters to login to our Auth0 services:\n\n- `domain`: `itri-dechnology.jp.auth0.com`\n\n- `clientId`: `holxN6SuSQtRV5oOSwOIXWYwJnvioObh`\n\n- `audience`: `https://health-statistic.dechnology.com.tw/api/v1/`\n\n**_Reference_**: [**Auth0 | Quickstart**](https://auth0.com/docs/quickstarts)\n\n## Schema Overview\n\n### Quesionnaires\n\nFor the sake of scalibility, we make the questionnaire system a general one. That is, we can later create more questionnaires in our application. Upon initialization of our database, the registration questionnaire is created and assigned a fixed UUID.\n\n---\n\n## Client Endpoints\n\nFull descriptions of all endpoints are described below; however, more common endpoints for a client application are described here. For detailed types of params, body, or response, please refer to the full descriptiions below.\n\n### Registraion\n\nEndpoints required to register an user.\n\n- `/questionnaires/registration` [**GET**]\n\n  Before the user register, we need to have them fill in the registration questionnaire. This questionniare can be fetch using this endpoint. Note that this questionnaire correspond to question 16 to 30 since the answers to question 1 to 15 are part of the user data.\n\n- `/register` [**POST**]\n\n  The only endpoint to create an user, note that we will use the ID from Auth0 as the primary key in our database, for example: `auth0|888888888888888888888888`.\n\n### Utilities\n\nSome useful endpoints.\n\n- `/health_check` [**GET**]\n\n  This endpoint checks if the server is alive and the database is connected. It returns a code of 200 if ture.\n\n### Client's User Data\n\nA normal user has access to all resources owned by him/her-self. This is available via the `/user` endpoint.\nThis is not meant to be confused with the plural counterpart, `/users`, whose endpoints are only accessible for users with `read:users` or `write:users` scope. The server will look into your Auth0 token and get the corresponding user data.\n\n- `/user` [**GET**]\n\n- `/user/notifications` [**GET**]\n\n  **Not yet implemented**\n\n### Public Resources\n\nThe following endpoints are for reading public resources. Currently, they are **\"quesionnaires\"** and **\"prices\"**.\n\n- `/quesionnaires` [**GET**]\n\n- `/quesionnaires/{id}` [**GET**]\n\n- `/prices` [**GET**]\n\n- `/prices/{id}` [**GET**]\n",
        "title": "Web3 - 健康資料公鏈API開發文件",
        "contact": {},
        "version": "1.0"
    },
    "host": "health-statistic.dechnology.com.tw",
    "basePath": "/api/v1",
    "paths": {
        "/health_check": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "A health checking endpoint to make sure the server is not dead.",
                "tags": [
                    "Health"
                ],
                "summary": "Health Check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.HealthStatus"
                        }
                    }
                }
            }
        },
        "/mycards": {
            "get": {
                "description": "Get all MyCards from the database.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MyCard"
                ],
                "summary": "Get MyCards",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ent.MyCard"
                            }
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MyCard"
                ],
                "summary": "Create MyCard",
                "parameters": [
                    {
                        "description": "The mycard to be created",
                        "name": "mycard",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.BaseMyCard"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.MyCard"
                        }
                    }
                }
            }
        },
        "/mycards/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MyCard"
                ],
                "summary": "Get MyCard",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The mycard's ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.MyCard"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MyCard"
                ],
                "summary": "Delete MyCard",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The mycard's ID.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/prices": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Price"
                ],
                "summary": "Get Prices",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ent.Price"
                            }
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Price"
                ],
                "summary": "Create Price",
                "parameters": [
                    {
                        "description": "The price to be created",
                        "name": "price",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.BasePrice"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Price"
                        }
                    }
                }
            }
        },
        "/prices/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Price"
                ],
                "summary": "Get Price",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The price's ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Price"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Price"
                ],
                "summary": "Delete Price",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The price's ID.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/questionnaires": {
            "get": {
                "description": "Get all questionnaires from the database. This will include responses from yourself.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Questionnaire"
                ],
                "summary": "Get Questionnaires",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.QuestionnaireDetails"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new questionnaire and optionally its questions.\n\n## Request Body\n\n- `name` *`string`* **Required**\n    The name of the questionnaire to be created.\n\n- `questions` *`array`* Optional\n    The initial questions in this questionnaire. This field may be empty and you can add questions later using post request to `quesionnaires/:id/new/question`.\n    \n    - `body` *`string`* **Required**\n        The body of one of the question in the questionnaire.\n    \n    - `type` *`string`* **Required**\n        The type of the question. For now, we accept all strings but in the future this field might be an enum.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Questionnaire"
                ],
                "summary": "Create Questionnaire",
                "parameters": [
                    {
                        "description": "The questionnaire to be created.",
                        "name": "questionnaire",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.BaseQuestionnaire"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Questionnaire"
                        }
                    }
                }
            }
        },
        "/questionnaires/registration": {
            "get": {
                "description": "The questionnaire all users must submit before registering to our database. This endpoint retrieves that registration questionnaire. It has at total 16 questions.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Questionnaire"
                ],
                "summary": "Get Registration Questionnaire",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.QuestionnaireDetails"
                        }
                    }
                }
            }
        },
        "/questionnaires/{id}": {
            "get": {
                "description": "Get the questionnaire specified by the `id` path param. This will include responses from yourself.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Questionnaire"
                ],
                "summary": "Get Questionnaire",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The questionnaire's ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.QuestionnaireDetails"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete the questionnaire specified by the `id` path param.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Questionnaire"
                ],
                "summary": "Delete Questionnaire",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The questionnaire's ID.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/questionnaires/{id}/responses": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Questionnaire"
                ],
                "summary": "Get Questionnaire Responses",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The questionnaire's ID.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ent.QuestionnaireResponse"
                            }
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Questionnaire"
                ],
                "summary": "Create Questionnaire Response",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The questionnaire's ID.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The response to be created.",
                        "name": "response",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.BaseResponse"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.QuestionnaireResponse"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "This is the ONLY way to create a new user. The registration questionnaire must be filled and the answers must be sent via this endpoint accordingly.\n\nWhile the initial questionnaire may have 30 questions, some answers are part of the user data like \"birth_year\", \"gender\", and so on. Therefore, we will use some of the data as inputs to create the user while other questions are combined and treated like a questionnaire called \"registration questionnaire\".\n\nHence, the user registration needs two things: user data and the response to the registration questionnaire. A user can only be register using this endpoint. Note that the ID field needs to be provided and it needs to match the Auth0 ID. This endpoint does 4 things in order: create a new user, respond to the registration questionnaire, assign one MyCard to this user, and send a notification via FCM.\n\n## Request Body\n\n- `response` _`object`_ **Required**\n  The response to the registration questionnaire.\n\n  - `questionnaire_id` _`string`_ **Required**\n    The ID of the registration questionnaire. This special questionnaire can be obtained via `questionnaires/registration [GET]` endpoint.\n\n  - `answers` _`array`_ **Required**\n    The answers of questions in the registration questionnaire. All questions must be answered.\n\n    - `question_id` _`string`_ **Required**\n      The ID of the question in the registration questionnaire.\n\n    - `body` _`string`_ **Required**\n      The answer to the question in the registration questionnaire.\n\n- `user` _`object`_ **Required**\n  The user to be created. A user must be created with the following 15 pieces of data provided. Note that the ID field also needs to be provided since we want to match the ID in our database with the one in Auth0.\n\n  - `id` _`string`_ **Required**\n    The user's Auth0 ID.\n\n  - `birth_year` _`string`_ **Required**\n    Part of the registration questionnaire.\n\n  - `height` _`float`_ **Required**\n    Part of the registration questionnaire.\n\n  - `weight` _`float`_ **Required**\n    Part of the registration questionnaire.\n\n  - `gender` _`string`_ **Required**\n    Part of the registration questionnaire.\n\n  - `education_level` _`string`_ **Required**\n    Part of the registration questionnaire.\n\n  - `occupation` _`string`_ **Required**\n    Part of the registration questionnaire.\n\n  - `marriage` _`string`_ **Required**\n    Part of the registration questionnaire.\n\n  - `medical_history` _`string`_ **Required**\n    Part of the registration questionnaire.\n\n  - `medication_status` _`string`_ **Required**\n    Part of the registration questionnaire.\n\n  - `demented_among_direct_relatives` _`bool`_ **Required**\n    Part of the registration questionnaire.\n\n  - `head_injury_experience` _`bool`_ **Required**\n    Part of the registration questionnaire.\n\n  - `ear_condition` _`string`_ **Required**\n    Part of the registration questionnaire.\n\n  - `eyesight_condition` _`string`_ **Required**\n    Part of the registration questionnaire.\n\n  - `smoking_habit` _`string`_ **Required**\n    Part of the registration questionnaire.\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Registration"
                ],
                "summary": "Register an User",
                "parameters": [
                    {
                        "description": "The registration data.",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.RegisterData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.RegisterResponse"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Self"
                ],
                "summary": "Get Own User",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ent.User"
                            }
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Get all users from the database.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get Users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ent.User"
                            }
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Get the user specified by the `id` path param.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The user's Auth0 ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.User"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The user's Auth0 ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "user to be updated",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.BaseUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.User"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The user's Auth0 ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/users/{id}/notifications": {
            "get": {
                "description": "Get all history notifications of an user.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get All Notifications From an User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The user's Auth0 ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/ent.Notification"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "ent.MyCard": {
            "type": "object",
            "properties": {
                "card_password": {
                    "description": "CardPassword holds the value of the \"card_password\" field.",
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "taken_at": {
                    "description": "TakenAt holds the value of the \"taken_at\" field.",
                    "type": "string"
                }
            }
        },
        "ent.Notification": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "message": {
                    "description": "Message holds the value of the \"message\" field.",
                    "type": "string"
                },
                "read_at": {
                    "description": "ReadAt holds the value of the \"read_at\" field.",
                    "type": "string"
                },
                "sent_at": {
                    "description": "SentAt holds the value of the \"sent_at\" field.",
                    "type": "string"
                },
                "type": {
                    "description": "Type holds the value of the \"type\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/notification.Type"
                        }
                    ]
                }
            }
        },
        "ent.Price": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "description": {
                    "description": "Description holds the value of the \"description\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                },
                "taken_at": {
                    "description": "TakenAt holds the value of the \"taken_at\" field.",
                    "type": "string"
                }
            }
        },
        "ent.Question": {
            "type": "object",
            "properties": {
                "body": {
                    "description": "Body holds the value of the \"body\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "order": {
                    "description": "Order holds the value of the \"order\" field.",
                    "type": "integer"
                },
                "type": {
                    "description": "Type holds the value of the \"type\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/question.Type"
                        }
                    ]
                }
            }
        },
        "ent.Questionnaire": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                }
            }
        },
        "ent.QuestionnaireResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                }
            }
        },
        "ent.User": {
            "type": "object",
            "properties": {
                "birth_year": {
                    "description": "BirthYear holds the value of the \"birth_year\" field.",
                    "type": "integer"
                },
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "demented_among_direct_relatives": {
                    "description": "DementedAmongDirectRelatives holds the value of the \"demented_among_direct_relatives\" field.",
                    "type": "boolean"
                },
                "ear_condition": {
                    "description": "EarCondition holds the value of the \"ear_condition\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/user.EarCondition"
                        }
                    ]
                },
                "education_level": {
                    "description": "EducationLevel holds the value of the \"education_level\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/user.EducationLevel"
                        }
                    ]
                },
                "eyesight_condition": {
                    "description": "EyesightCondition holds the value of the \"eyesight_condition\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/user.EyesightCondition"
                        }
                    ]
                },
                "gender": {
                    "description": "Gender holds the value of the \"gender\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/user.Gender"
                        }
                    ]
                },
                "head_injury_experience": {
                    "description": "HeadInjuryExperience holds the value of the \"head_injury_experience\" field.",
                    "type": "boolean"
                },
                "height": {
                    "description": "Height holds the value of the \"height\" field.",
                    "type": "number"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "marriage": {
                    "description": "Marriage holds the value of the \"marriage\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/user.Marriage"
                        }
                    ]
                },
                "medical_history": {
                    "description": "MedicalHistory holds the value of the \"medical_history\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/user.MedicalHistory"
                        }
                    ]
                },
                "medication_status": {
                    "description": "MedicationStatus holds the value of the \"medication_status\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/user.MedicationStatus"
                        }
                    ]
                },
                "occupation": {
                    "description": "Occupation holds the value of the \"occupation\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/user.Occupation"
                        }
                    ]
                },
                "smoking_habit": {
                    "description": "SmokingHabit holds the value of the \"smoking_habit\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/user.SmokingHabit"
                        }
                    ]
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "weight": {
                    "description": "Weight holds the value of the \"weight\" field.",
                    "type": "number"
                }
            }
        },
        "handlers.HealthStatus": {
            "description": "Datatype of health status",
            "type": "object",
            "properties": {
                "message": {
                    "description": "Health message",
                    "type": "string",
                    "example": "Hello, this is an example message!"
                }
            }
        },
        "notification.Type": {
            "type": "string",
            "enum": [
                "normal",
                "mycard",
                "price"
            ],
            "x-enum-varnames": [
                "TypeNormal",
                "TypeMycard",
                "TypePrice"
            ]
        },
        "question.Type": {
            "type": "string",
            "enum": [
                "short_answer",
                "single_choice",
                "multiple_choice"
            ],
            "x-enum-varnames": [
                "TypeShortAnswer",
                "TypeSingleChoice",
                "TypeMultipleChoice"
            ]
        },
        "types.BaseAnswer": {
            "type": "object",
            "properties": {
                "body": {
                    "description": "The answer body.",
                    "type": "string",
                    "example": "我這週心情還不錯！"
                },
                "choice_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "88888888-8888-4888-8888-888888888888",
                        "88888888-8888-4444-8888-888888888888"
                    ]
                },
                "question_id": {
                    "description": "The question this answer relates to, the question also needs to be in\nthe same questionnaire as the response.",
                    "type": "string",
                    "example": "88888888-8888-4888-8888-888888888888"
                }
            }
        },
        "types.BaseMyCard": {
            "type": "object",
            "properties": {
                "card_number": {
                    "type": "string"
                },
                "card_password": {
                    "type": "string"
                }
            }
        },
        "types.BasePrice": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "types.BaseQuestion": {
            "type": "object",
            "properties": {
                "body": {
                    "description": "The question body",
                    "type": "string",
                    "example": "你這週的心情如何？"
                },
                "choices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "是",
                        "否"
                    ]
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "short_answer",
                        "single_choice",
                        "multiple_choice"
                    ],
                    "example": "single_choice"
                }
            }
        },
        "types.BaseQuestionnaire": {
            "description": "BaseQuestionnaire",
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the questionnaire",
                    "type": "string",
                    "example": "問卷標題"
                },
                "questions": {
                    "description": "The initial questions in this questionnaire. This field may be empty\nand you can add questions later using post request to\n`quesionnaires/:id/new/question`.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.BaseQuestion"
                    }
                }
            }
        },
        "types.BaseResponse": {
            "type": "object",
            "properties": {
                "answers": {
                    "description": "The answers to all questions in a questionnaire.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.BaseAnswer"
                    }
                }
            }
        },
        "types.BaseUser": {
            "type": "object",
            "properties": {
                "birth_year": {
                    "type": "integer",
                    "example": 2000
                },
                "demented_among_direct_relatives": {
                    "type": "boolean",
                    "example": false
                },
                "ear_condition": {
                    "type": "string",
                    "enum": [
                        "normal",
                        "slightly_affecting_conversation",
                        "need_hearing_aid"
                    ],
                    "example": "normal"
                },
                "education_level": {
                    "type": "string",
                    "enum": [
                        "elementry_school_or_below",
                        "middle_school",
                        "high_school",
                        "bachelor",
                        "master",
                        "doctorate"
                    ],
                    "example": "doctorate"
                },
                "eyesight_condition": {
                    "type": "string",
                    "enum": [
                        "normal",
                        "slightly_affecting_reading",
                        "need_glasses"
                    ],
                    "example": "normal"
                },
                "gender": {
                    "type": "string",
                    "example": "male"
                },
                "head_injury_experience": {
                    "type": "boolean",
                    "example": false
                },
                "height": {
                    "type": "number",
                    "example": 185.2
                },
                "id": {
                    "type": "string"
                },
                "marriage": {
                    "type": "string",
                    "enum": [
                        "single",
                        "married",
                        "divorced",
                        "widowed"
                    ],
                    "example": "single"
                },
                "medical_history": {
                    "type": "string",
                    "example": "none"
                },
                "medication_status": {
                    "type": "string",
                    "example": "none"
                },
                "occupation": {
                    "type": "string",
                    "enum": [
                        "student",
                        "government_employee",
                        "service_industry",
                        "industry_and_commerce",
                        "freelancer",
                        "domestic"
                    ],
                    "example": "student"
                },
                "smoking_habit": {
                    "type": "string",
                    "enum": [
                        "none",
                        "sometimes",
                        "everyday"
                    ],
                    "example": "none"
                },
                "weight": {
                    "type": "number",
                    "example": 80.3
                }
            }
        },
        "types.QuestionnaireDetails": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                },
                "questionnaire_responses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Response"
                    }
                },
                "questions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Question"
                    }
                }
            }
        },
        "types.RegisterData": {
            "type": "object",
            "properties": {
                "response": {
                    "$ref": "#/definitions/types.ResponseWithQuestionnaireId"
                },
                "user": {
                    "$ref": "#/definitions/types.BaseUser"
                }
            }
        },
        "types.RegisterResponse": {
            "type": "object",
            "properties": {
                "response": {
                    "$ref": "#/definitions/ent.QuestionnaireResponse"
                },
                "user": {
                    "$ref": "#/definitions/ent.User"
                }
            }
        },
        "types.Response": {
            "type": "object",
            "properties": {
                "answers": {
                    "description": "The answers to all questions in a questionnaire.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.BaseAnswer"
                    }
                },
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "user_id": {
                    "description": "The user ID of the user who submit the response.",
                    "type": "string"
                }
            }
        },
        "types.ResponseWithQuestionnaireId": {
            "type": "object",
            "properties": {
                "answers": {
                    "description": "The answers to all questions in a questionnaire.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.BaseAnswer"
                    }
                },
                "questionnaire_id": {
                    "type": "string"
                }
            }
        },
        "user.EarCondition": {
            "type": "string",
            "enum": [
                "normal",
                "slightly_affecting_conversation",
                "need_hearing_aid"
            ],
            "x-enum-varnames": [
                "EarConditionNormal",
                "EarConditionSlightlyAffectingConversation",
                "EarConditionNeedHearingAid"
            ]
        },
        "user.EducationLevel": {
            "type": "string",
            "enum": [
                "elementry_school_or_below",
                "middle_school",
                "high_school",
                "bachelor",
                "master",
                "doctorate"
            ],
            "x-enum-varnames": [
                "EducationLevelElementrySchoolOrBelow",
                "EducationLevelMiddleSchool",
                "EducationLevelHighSchool",
                "EducationLevelBachelor",
                "EducationLevelMaster",
                "EducationLevelDoctorate"
            ]
        },
        "user.EyesightCondition": {
            "type": "string",
            "enum": [
                "normal",
                "slightly_affecting_reading",
                "need_glasses"
            ],
            "x-enum-varnames": [
                "EyesightConditionNormal",
                "EyesightConditionSlightlyAffectingReading",
                "EyesightConditionNeedGlasses"
            ]
        },
        "user.Gender": {
            "type": "string",
            "enum": [
                "male",
                "female",
                "nonbinary"
            ],
            "x-enum-varnames": [
                "GenderMale",
                "GenderFemale",
                "GenderNonbinary"
            ]
        },
        "user.Marriage": {
            "type": "string",
            "enum": [
                "single",
                "married",
                "divorced",
                "widowed"
            ],
            "x-enum-varnames": [
                "MarriageSingle",
                "MarriageMarried",
                "MarriageDivorced",
                "MarriageWidowed"
            ]
        },
        "user.MedicalHistory": {
            "type": "string",
            "enum": [
                "high_blood_pressure",
                "hyperlipidemia",
                "diabetes",
                "heart_disease",
                "stroke",
                "mental_illness",
                "dementia",
                "none_of_the_above"
            ],
            "x-enum-varnames": [
                "MedicalHistoryHighBloodPressure",
                "MedicalHistoryHyperlipidemia",
                "MedicalHistoryDiabetes",
                "MedicalHistoryHeartDisease",
                "MedicalHistoryStroke",
                "MedicalHistoryMentalIllness",
                "MedicalHistoryDementia",
                "MedicalHistoryNoneOfTheAbove"
            ]
        },
        "user.MedicationStatus": {
            "type": "string",
            "enum": [
                "cardiovascular_drugs",
                "psychiatric_drugs",
                "other_drugs",
                "no_drugs"
            ],
            "x-enum-varnames": [
                "MedicationStatusCardiovascularDrugs",
                "MedicationStatusPsychiatricDrugs",
                "MedicationStatusOtherDrugs",
                "MedicationStatusNoDrugs"
            ]
        },
        "user.Occupation": {
            "type": "string",
            "enum": [
                "student",
                "government_employee",
                "service_industry",
                "industry_and_commerce",
                "freelancer",
                "domestic",
                "retired",
                "others"
            ],
            "x-enum-varnames": [
                "OccupationStudent",
                "OccupationGovernmentEmployee",
                "OccupationServiceIndustry",
                "OccupationIndustryAndCommerce",
                "OccupationFreelancer",
                "OccupationDomestic",
                "OccupationRetired",
                "OccupationOthers"
            ]
        },
        "user.SmokingHabit": {
            "type": "string",
            "enum": [
                "none",
                "sometimes",
                "everyday"
            ],
            "x-enum-varnames": [
                "SmokingHabitNone",
                "SmokingHabitSometimes",
                "SmokingHabitEveryday"
            ]
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}