basePath: /api/v1
definitions:
  ent.Deegoo:
    properties:
      created_at:
        description: CreatedAt holds the value of the "created_at" field.
        type: string
      execution:
        description: Execution holds the value of the "execution" field.
        type: integer
      focus:
        description: Focus holds the value of the "focus" field.
        type: integer
      id:
        description: ID of the ent.
        type: string
      language:
        description: Language holds the value of the "language" field.
        type: integer
      memory:
        description: Memory holds the value of the "memory" field.
        type: integer
      perception:
        description: Perception holds the value of the "perception" field.
        type: integer
    type: object
  ent.HealthKit:
    properties:
      end_time:
        description: EndTime holds the value of the "end_time" field.
        type: string
      id:
        description: ID of the ent.
        type: string
      start_time:
        description: StartTime holds the value of the "start_time" field.
        type: string
    type: object
  ent.Question:
    properties:
      body:
        description: Body holds the value of the "body" field.
        type: string
      id:
        description: ID of the ent.
        type: string
      order:
        description: Order holds the value of the "order" field.
        type: integer
      type:
        allOf:
        - $ref: '#/definitions/question.Type'
        description: Type holds the value of the "type" field.
    type: object
  ent.QuestionnaireResponse:
    properties:
      created_at:
        description: CreatedAt holds the value of the "created_at" field.
        type: string
      id:
        description: ID of the ent.
        type: string
    type: object
  ent.User:
    properties:
      birth_year:
        description: BirthYear holds the value of the "birth_year" field.
        type: integer
      created_at:
        description: CreatedAt holds the value of the "created_at" field.
        type: string
      data_consent:
        description: DataConsent holds the value of the "data_consent" field.
        type: boolean
      demented_among_direct_relatives:
        description: DementedAmongDirectRelatives holds the value of the "demented_among_direct_relatives"
          field.
        type: boolean
      ear_condition:
        allOf:
        - $ref: '#/definitions/user.EarCondition'
        description: EarCondition holds the value of the "ear_condition" field.
      education_level:
        allOf:
        - $ref: '#/definitions/user.EducationLevel'
        description: EducationLevel holds the value of the "education_level" field.
      eyesight_condition:
        allOf:
        - $ref: '#/definitions/user.EyesightCondition'
        description: EyesightCondition holds the value of the "eyesight_condition"
          field.
      fcm_token:
        description: FcmToken holds the value of the "fcm_token" field.
        type: string
      gender:
        allOf:
        - $ref: '#/definitions/user.Gender'
        description: Gender holds the value of the "gender" field.
      head_injury_experience:
        description: HeadInjuryExperience holds the value of the "head_injury_experience"
          field.
        type: boolean
      height:
        description: Height holds the value of the "height" field.
        type: number
      id:
        description: ID of the ent.
        type: string
      marriage:
        allOf:
        - $ref: '#/definitions/user.Marriage'
        description: Marriage holds the value of the "marriage" field.
      medical_history:
        allOf:
        - $ref: '#/definitions/user.MedicalHistory'
        description: MedicalHistory holds the value of the "medical_history" field.
      medication_status:
        allOf:
        - $ref: '#/definitions/user.MedicationStatus'
        description: MedicationStatus holds the value of the "medication_status" field.
      occupation:
        allOf:
        - $ref: '#/definitions/user.Occupation'
        description: Occupation holds the value of the "occupation" field.
      smoking_habit:
        allOf:
        - $ref: '#/definitions/user.SmokingHabit'
        description: SmokingHabit holds the value of the "smoking_habit" field.
      updated_at:
        description: UpdatedAt holds the value of the "updated_at" field.
        type: string
      weight:
        description: Weight holds the value of the "weight" field.
        type: number
    type: object
  handlers.HealthStatus:
    description: Datatype of health status
    properties:
      message:
        description: Health message
        example: Hello, this is an example message!
        type: string
    type: object
  question.Type:
    enum:
    - short_answer
    - single_choice
    - multiple_choice
    type: string
    x-enum-varnames:
    - TypeShortAnswer
    - TypeSingleChoice
    - TypeMultipleChoice
  types.BaseAnswer:
    properties:
      body:
        description: The answer body.
        example: 我這週心情還不錯！
        type: string
      choice_ids:
        example:
        - 88888888-8888-4888-8888-888888888888
        - 88888888-8888-4444-8888-888888888888
        items:
          type: string
        type: array
      question_id:
        description: |-
          The question this answer relates to, the question also needs to be in
          the same questionnaire as the response.
        example: 88888888-8888-4888-8888-888888888888
        type: string
    type: object
  types.BaseDeegoo:
    properties:
      execution:
        type: integer
      focus:
        type: integer
      id:
        type: string
      language:
        type: integer
      memory:
        type: integer
      perception:
        type: integer
      user_id:
        type: string
    type: object
  types.BaseHealthKit:
    properties:
      data:
        items:
          items:
            type: string
          type: array
        type: array
      end_time:
        type: string
      start_time:
        type: string
    type: object
  types.BaseResponse:
    properties:
      answers:
        description: The answers to all questions in a questionnaire.
        items:
          $ref: '#/definitions/types.BaseAnswer'
        type: array
    type: object
  types.BaseUser:
    properties:
      birth_year:
        example: 2000
        type: integer
      data_consent:
        example: true
        type: boolean
      demented_among_direct_relatives:
        example: false
        type: boolean
      ear_condition:
        enum:
        - normal
        - slightly_affecting_conversation
        - need_hearing_aid
        example: normal
        type: string
      education_level:
        enum:
        - elementry_school_or_below
        - middle_school
        - high_school
        - bachelor
        - master
        - doctorate
        example: doctorate
        type: string
      eyesight_condition:
        enum:
        - normal
        - slightly_affecting_reading
        - need_glasses
        example: normal
        type: string
      gender:
        example: male
        type: string
      head_injury_experience:
        example: false
        type: boolean
      height:
        example: 185.2
        type: number
      id:
        type: string
      marriage:
        enum:
        - single
        - married
        - divorced
        - widowed
        example: single
        type: string
      medical_history:
        example: none
        type: string
      medication_status:
        example: none
        type: string
      occupation:
        enum:
        - student
        - government_employee
        - service_industry
        - industry_and_commerce
        - freelancer
        - domestic
        example: student
        type: string
      smoking_habit:
        enum:
        - none
        - sometimes
        - everyday
        example: none
        type: string
      weight:
        example: 80.3
        type: number
    type: object
  types.FcmTokenRequest:
    properties:
      fcm_token:
        type: string
    type: object
  types.QuestionnaireDetails:
    properties:
      created_at:
        description: CreatedAt holds the value of the "created_at" field.
        type: string
      id:
        description: ID of the ent.
        type: string
      name:
        description: Name holds the value of the "name" field.
        type: string
      questionnaire_responses:
        items:
          $ref: '#/definitions/types.Response'
        type: array
      questions:
        items:
          $ref: '#/definitions/ent.Question'
        type: array
    type: object
  types.RegisterData:
    properties:
      response:
        $ref: '#/definitions/types.ResponseWithQuestionnaireId'
      user:
        $ref: '#/definitions/types.BaseUser'
    type: object
  types.RegisterResponse:
    properties:
      response:
        $ref: '#/definitions/ent.QuestionnaireResponse'
      user:
        $ref: '#/definitions/ent.User'
    type: object
  types.Response:
    properties:
      answers:
        description: The answers to all questions in a questionnaire.
        items:
          $ref: '#/definitions/types.BaseAnswer'
        type: array
      created_at:
        description: CreatedAt holds the value of the "created_at" field.
        type: string
      id:
        description: ID of the ent.
        type: string
      user_id:
        description: The user ID of the user who submit the response.
        type: string
    type: object
  types.ResponseWithQuestionnaireId:
    properties:
      answers:
        description: The answers to all questions in a questionnaire.
        items:
          $ref: '#/definitions/types.BaseAnswer'
        type: array
      questionnaire_id:
        type: string
    type: object
  user.EarCondition:
    enum:
    - normal
    - slightly_affecting_conversation
    - need_hearing_aid
    type: string
    x-enum-varnames:
    - EarConditionNormal
    - EarConditionSlightlyAffectingConversation
    - EarConditionNeedHearingAid
  user.EducationLevel:
    enum:
    - elementry_school_or_below
    - middle_school
    - high_school
    - bachelor
    - master
    - doctorate
    type: string
    x-enum-varnames:
    - EducationLevelElementrySchoolOrBelow
    - EducationLevelMiddleSchool
    - EducationLevelHighSchool
    - EducationLevelBachelor
    - EducationLevelMaster
    - EducationLevelDoctorate
  user.EyesightCondition:
    enum:
    - normal
    - slightly_affecting_reading
    - need_glasses
    type: string
    x-enum-varnames:
    - EyesightConditionNormal
    - EyesightConditionSlightlyAffectingReading
    - EyesightConditionNeedGlasses
  user.Gender:
    enum:
    - male
    - female
    - nonbinary
    type: string
    x-enum-varnames:
    - GenderMale
    - GenderFemale
    - GenderNonbinary
  user.Marriage:
    enum:
    - single
    - married
    - divorced
    - widowed
    type: string
    x-enum-varnames:
    - MarriageSingle
    - MarriageMarried
    - MarriageDivorced
    - MarriageWidowed
  user.MedicalHistory:
    enum:
    - high_blood_pressure
    - hyperlipidemia
    - diabetes
    - heart_disease
    - stroke
    - mental_illness
    - dementia
    - none_of_the_above
    type: string
    x-enum-varnames:
    - MedicalHistoryHighBloodPressure
    - MedicalHistoryHyperlipidemia
    - MedicalHistoryDiabetes
    - MedicalHistoryHeartDisease
    - MedicalHistoryStroke
    - MedicalHistoryMentalIllness
    - MedicalHistoryDementia
    - MedicalHistoryNoneOfTheAbove
  user.MedicationStatus:
    enum:
    - cardiovascular_drugs
    - psychiatric_drugs
    - other_drugs
    - no_drugs
    type: string
    x-enum-varnames:
    - MedicationStatusCardiovascularDrugs
    - MedicationStatusPsychiatricDrugs
    - MedicationStatusOtherDrugs
    - MedicationStatusNoDrugs
  user.Occupation:
    enum:
    - student
    - government_employee
    - service_industry
    - industry_and_commerce
    - freelancer
    - domestic
    - retired
    - others
    type: string
    x-enum-varnames:
    - OccupationStudent
    - OccupationGovernmentEmployee
    - OccupationServiceIndustry
    - OccupationIndustryAndCommerce
    - OccupationFreelancer
    - OccupationDomestic
    - OccupationRetired
    - OccupationOthers
  user.SmokingHabit:
    enum:
    - none
    - sometimes
    - everyday
    type: string
    x-enum-varnames:
    - SmokingHabitNone
    - SmokingHabitSometimes
    - SmokingHabitEveryday
host: health-statistic.dechnology.com.tw
info:
  contact: {}
  description: |
    This is the API documentation for 「健康資料公鏈」

    ## Flow Diagram

    ![flow_diagram](https://cdn.discordapp.com/attachments/874556062815100940/1132920083174408222/App-.drawio.png)

    ---

    ## Auth0 Setup

    This API uses Auth0 as its authorization provider, and all endpoints are protected using Auth0 token.
    Therefore, all your requests must have **Authorization** header with a bearer token.

    Use the following parameters to login to our Auth0 services:

    - `domain`: `itri-dechnology.jp.auth0.com`

    - `clientId`: `holxN6SuSQtRV5oOSwOIXWYwJnvioObh`

    - `audience`: `https://health-statistic.dechnology.com.tw/api/v1/`

    **_Reference_**: [**Auth0 | Quickstart**](https://auth0.com/docs/quickstarts)

    ## Schema Overview

    ### Quesionnaires

    For the sake of scalibility, we make the questionnaire system a general one. That is, we can later create more questionnaires in our application. Upon initialization of our database, the registration questionnaire is created and assigned a fixed UUID.

    ---

    ## Client Endpoints

    Full descriptions of all endpoints are described below; however, more common endpoints for a client application are described here. For detailed types of params, body, or response, please refer to the full descriptiions below.

    ### Registraion

    Endpoints required to register an user.

    - `/questionnaires/registration` [**GET**]

      Before the user register, we need to have them fill in the registration questionnaire. This questionniare can be fetch using this endpoint. Note that this questionnaire correspond to question 16 to 30 since the answers to question 1 to 15 are part of the user data.

    - `/register` [**POST**]

      The only endpoint to create an user, note that we will use the ID from Auth0 as the primary key in our database, for example: `auth0|888888888888888888888888`.

    ### Utilities

    Some useful endpoints.

    - `/health_check` [**GET**]

      This endpoint checks if the server is alive and the database is connected. It returns a code of 200 if ture.

    ### Client's User Data

    A normal user has access to all resources owned by him/her-self. This is available via the `/user` endpoint.
    This is not meant to be confused with the plural counterpart, `/users`, whose endpoints are only accessible for users with `read:users` or `write:users` scope. The server will look into your Auth0 token and get the corresponding user data.

    - `/user` [**GET**]

    - `/user/healthkit` [**POST**]

    - `/user/notifications` [**GET**]

      **Not yet implemented**

    ### Public Resources

    The following endpoints are for reading public resources. Currently, they are **"quesionnaires"** and **"prices"**.

    - `/quesionnaires` [**GET**]

    - `/quesionnaires/{id}` [**GET**]

    - `/prices` [**GET**]

    - `/prices/{id}` [**GET**]

    ### Deegoo

    The following APIs are for Deegoo server to hit.

    - `/deegoo` [**POST**]

      This endpoint is for Deegoo server to post deegoo scores data to our server. The server will then process the data and store it in our database.
  title: Web3 - 健康資料公鏈API開發文件
  version: "1.0"
paths:
  /deegoo:
    post:
      consumes:
      - application/json
      parameters:
      - description: The deegoo scores to submit
        in: body
        name: deegoo
        required: true
        schema:
          $ref: '#/definitions/types.BaseDeegoo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Deegoo'
      summary: Create Deegoo
      tags:
      - Deegoo
  /health_check:
    get:
      description: A health checking endpoint to make sure the server is not dead.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.HealthStatus'
      security:
      - BearerAuth: []
      summary: Health Check
      tags:
      - Health
  /questionnaires:
    get:
      description: |
        Get all questionnaires from the database. This will include responses from yourself.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.QuestionnaireDetails'
            type: array
      summary: Get Questionnaires
      tags:
      - Questionnaire
  /questionnaires/{id}:
    get:
      description: |
        Get the questionnaire specified by the `id` path param. This will include responses from yourself.
      parameters:
      - description: The questionnaire's ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.QuestionnaireDetails'
      summary: Get Questionnaire
      tags:
      - Questionnaire
  /questionnaires/{id}/responses:
    post:
      consumes:
      - application/json
      parameters:
      - description: The questionnaire's ID.
        in: path
        name: id
        required: true
        type: string
      - description: The response to be created.
        in: body
        name: response
        required: true
        schema:
          $ref: '#/definitions/types.BaseResponse'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.QuestionnaireResponse'
      summary: Create Questionnaire Response
      tags:
      - Questionnaire
  /questionnaires/registration:
    get:
      description: The questionnaire all users must submit before registering to our
        database. This endpoint retrieves that registration questionnaire. It has
        at total 16 questions.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.QuestionnaireDetails'
      summary: Get Registration Questionnaire
      tags:
      - Questionnaire
  /register:
    post:
      consumes:
      - application/json
      description: |
        This is the ONLY way to create a new user. The registration questionnaire must be filled and the answers must be sent via this endpoint accordingly.

        While the initial questionnaire may have 30 questions, some answers are part of the user data like "birth_year", "gender", and so on. Therefore, we will use some of the data as inputs to create the user while other questions are combined and treated like a questionnaire called "registration questionnaire".

        Hence, the user registration needs two things: user data and the response to the registration questionnaire. A user can only be register using this endpoint. Note that the ID field needs to be provided and it needs to match the Auth0 ID. This endpoint does 4 things in order: create a new user, respond to the registration questionnaire, assign one MyCard to this user, and send a notification via FCM.

        ## Request Body

        - `response` _`object`_ **Required**
          The response to the registration questionnaire.

          - `questionnaire_id` _`string`_ **Required**
            The ID of the registration questionnaire. This special questionnaire can be obtained via `questionnaires/registration [GET]` endpoint.

          - `answers` _`array`_ **Required**
            The answers of questions in the registration questionnaire. All questions must be answered.

            - `question_id` _`string`_ **Required**
              The ID of the question in the registration questionnaire.

            - `choise_ids` _`string[]`_ **Required**
              The ID of the choise chosen for this question in the registration questionnaire. Note that though all questions in the registration questionnaire are single choise question, you are required to send in array format.

        - `user` _`object`_ **Required**
          The user to be created. A user must be created with the following 15 pieces of data provided. Note that the ID field also needs to be provided since we want to match the ID in our database with the one in Auth0.

          - `id` _`string`_ **Required**
            The user's Auth0 ID.

          - `birth_year` _`string`_ **Required**
            Part of the registration questionnaire (must be 25 years old or above).

          - `height` _`float`_ **Required**
            Part of the registration questionnaire.

          - `weight` _`float`_ **Required**
            Part of the registration questionnaire.

          - `gender` _`string`_ **Required**
            Part of the registration questionnaire.

          - `education_level` _`string`_ **Required**
            Part of the registration questionnaire.

          - `occupation` _`string`_ **Required**
            Part of the registration questionnaire.

          - `marriage` _`string`_ **Required**
            Part of the registration questionnaire.

          - `medical_history` _`string`_ **Required**
            Part of the registration questionnaire.

          - `medication_status` _`string`_ **Required**
            Part of the registration questionnaire.

          - `demented_among_direct_relatives` _`bool`_ **Required**
            Part of the registration questionnaire.

          - `head_injury_experience` _`bool`_ **Required**
            Part of the registration questionnaire.

          - `ear_condition` _`string`_ **Required**
            Part of the registration questionnaire.

          - `eyesight_condition` _`string`_ **Required**
            Part of the registration questionnaire.

          - `smoking_habit` _`string`_ **Required**
            Part of the registration questionnaire.

          - `data_concent` _`bool`_ **Optional**
            It is a consent to allow us to use the user's data for research purposes. Default to **`true`**. This is usually a checkbox at the end of the registration questionnaire but NOT part of the questionnaire. Therefore, it is a separate field and the frontend needs to make sure the user has checked the box before sending the request.
      parameters:
      - description: The registration data.
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.RegisterData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.RegisterResponse'
      summary: Register an User
      tags:
      - Registration
  /user:
    delete:
      description: |
        # Delete self

        ## Description

        Delete the user based on the access token. We will first extract the Auth0 ID from the token and then delete the user from our database. The corresponding user in Auth0 will also be deleted.
      responses:
        "204":
          description: No Content
      summary: Delete User
      tags:
      - User
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.User'
            type: array
      summary: Get Own User
      tags:
      - User
  /user/fcm:
    put:
      consumes:
      - application/json
      parameters:
      - description: The FCM token to update
        in: body
        name: healthkit
        required: true
        schema:
          $ref: '#/definitions/types.FcmTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.User'
      summary: Update User's FCM Token
      tags:
      - User
  /user/healthkit:
    post:
      consumes:
      - application/json
      description: "# Description\n\nUpload HealthKit data for a user.\n\n## Request
        Body\n\n- `data` _`array`_ **Required**\n  The data is an array of arrays.
        Each array represents a unit of healthkit data. Each unit of healthkit data
        is an array of 6 elements. The 6 elements are:\n  \n  - `type` _`string`_
        **Required**\n    The type of the healthkit data. For example, `HKQuantityTypeIdentifierHeartRate`,
        `HKQuantityTypeIdentifierStepCount`, and etc.\n  \n  - `count` _`string`_
        **Required**\n    The count of the healthkit data. For example, if the type
        is `HKQuantityTypeIdentifierHeartRate`, then the count is the heart rate.\n
        \ \n  - `uuid` _`string`_ **Required**\n    The UUID of the healthkit data.\n
        \ \n  - `start_time` _`string`_ **Required**\n    The start time of the healthkit
        data.\n  \n  - `end_time` _`string`_ **Required**\n    The end time of the
        healthkit data.\n  \n  - `timezone_id` _`string`_ **Required**\n    The timezone
        ID of the healthkit data.\n\n- `start_time` _`datetime`_ **Required**\n  The
        start time of this batch of healthkit data.\n\n- `end_time` _`datetime`_ **Required**\n
        \ The end time of this batch of healthkit data.\n"
      parameters:
      - description: The healthkit to be created
        in: body
        name: healthkit
        required: true
        schema:
          $ref: '#/definitions/types.BaseHealthKit'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.HealthKit'
      summary: Create HealthKit Data
      tags:
      - User
schemes:
- https
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
