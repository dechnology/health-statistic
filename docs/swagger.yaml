basePath: /api/v1
definitions:
  ent.MyCard:
    properties:
      card_password:
        description: CardPassword holds the value of the "card_password" field.
        type: string
      created_at:
        description: CreatedAt holds the value of the "created_at" field.
        type: string
      id:
        description: ID of the ent.
        type: string
      taken_at:
        description: TakenAt holds the value of the "taken_at" field.
        type: string
    type: object
  ent.Notification:
    properties:
      id:
        description: ID of the ent.
        type: string
      message:
        description: Message holds the value of the "message" field.
        type: string
      read_at:
        description: ReadAt holds the value of the "read_at" field.
        type: string
      sent_at:
        description: SentAt holds the value of the "sent_at" field.
        type: string
      type:
        allOf:
        - $ref: '#/definitions/notification.Type'
        description: Type holds the value of the "type" field.
    type: object
  ent.Price:
    properties:
      created_at:
        description: CreatedAt holds the value of the "created_at" field.
        type: string
      description:
        description: Description holds the value of the "description" field.
        type: string
      id:
        description: ID of the ent.
        type: string
      name:
        description: Name holds the value of the "name" field.
        type: string
      taken_at:
        description: TakenAt holds the value of the "taken_at" field.
        type: string
    type: object
  ent.Question:
    properties:
      body:
        description: Body holds the value of the "body" field.
        type: string
      id:
        description: ID of the ent.
        type: string
      order:
        description: Order holds the value of the "order" field.
        type: integer
      type:
        allOf:
        - $ref: '#/definitions/question.Type'
        description: Type holds the value of the "type" field.
    type: object
  ent.Questionnaire:
    properties:
      created_at:
        description: CreatedAt holds the value of the "created_at" field.
        type: string
      id:
        description: ID of the ent.
        type: string
      name:
        description: Name holds the value of the "name" field.
        type: string
    type: object
  ent.QuestionnaireResponse:
    properties:
      created_at:
        description: CreatedAt holds the value of the "created_at" field.
        type: string
      id:
        description: ID of the ent.
        type: string
    type: object
  ent.User:
    properties:
      birth_year:
        description: BirthYear holds the value of the "birth_year" field.
        type: integer
      created_at:
        description: CreatedAt holds the value of the "created_at" field.
        type: string
      demented_among_direct_relatives:
        description: DementedAmongDirectRelatives holds the value of the "demented_among_direct_relatives"
          field.
        type: boolean
      ear_condition:
        allOf:
        - $ref: '#/definitions/user.EarCondition'
        description: EarCondition holds the value of the "ear_condition" field.
      education_level:
        allOf:
        - $ref: '#/definitions/user.EducationLevel'
        description: EducationLevel holds the value of the "education_level" field.
      eyesight_condition:
        allOf:
        - $ref: '#/definitions/user.EyesightCondition'
        description: EyesightCondition holds the value of the "eyesight_condition"
          field.
      gender:
        allOf:
        - $ref: '#/definitions/user.Gender'
        description: Gender holds the value of the "gender" field.
      head_injury_experience:
        description: HeadInjuryExperience holds the value of the "head_injury_experience"
          field.
        type: boolean
      height:
        description: Height holds the value of the "height" field.
        type: number
      id:
        description: ID of the ent.
        type: string
      marriage:
        allOf:
        - $ref: '#/definitions/user.Marriage'
        description: Marriage holds the value of the "marriage" field.
      medical_history:
        allOf:
        - $ref: '#/definitions/user.MedicalHistory'
        description: MedicalHistory holds the value of the "medical_history" field.
      medication_status:
        allOf:
        - $ref: '#/definitions/user.MedicationStatus'
        description: MedicationStatus holds the value of the "medication_status" field.
      occupation:
        allOf:
        - $ref: '#/definitions/user.Occupation'
        description: Occupation holds the value of the "occupation" field.
      smoking_habit:
        allOf:
        - $ref: '#/definitions/user.SmokingHabit'
        description: SmokingHabit holds the value of the "smoking_habit" field.
      updated_at:
        description: UpdatedAt holds the value of the "updated_at" field.
        type: string
      weight:
        description: Weight holds the value of the "weight" field.
        type: number
    type: object
  handlers.HealthStatus:
    description: Datatype of health status
    properties:
      message:
        description: Health message
        example: Hello, this is an example message!
        type: string
    type: object
  notification.Type:
    enum:
    - normal
    - mycard
    - price
    type: string
    x-enum-varnames:
    - TypeNormal
    - TypeMycard
    - TypePrice
  question.Type:
    enum:
    - short_answer
    - single_choice
    - multiple_choice
    type: string
    x-enum-varnames:
    - TypeShortAnswer
    - TypeSingleChoice
    - TypeMultipleChoice
  types.BaseAnswer:
    properties:
      body:
        description: The answer body.
        example: 我這週心情還不錯！
        type: string
      choice_ids:
        example:
        - 88888888-8888-4888-8888-888888888888
        - 88888888-8888-4444-8888-888888888888
        items:
          type: string
        type: array
      question_id:
        description: |-
          The question this answer relates to, the question also needs to be in
          the same questionnaire as the response.
        example: 88888888-8888-4888-8888-888888888888
        type: string
    type: object
  types.BaseMyCard:
    properties:
      card_number:
        type: string
      card_password:
        type: string
    type: object
  types.BasePrice:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  types.BaseQuestion:
    properties:
      body:
        description: The question body
        example: 你這週的心情如何？
        type: string
      choices:
        example:
        - 是
        - 否
        items:
          type: string
        type: array
      type:
        enum:
        - short_answer
        - single_choice
        - multiple_choice
        example: single_choice
        type: string
    type: object
  types.BaseQuestionnaire:
    description: BaseQuestionnaire
    properties:
      name:
        description: The name of the questionnaire
        example: 問卷標題
        type: string
      questions:
        description: |-
          The initial questions in this questionnaire. This field may be empty
          and you can add questions later using post request to
          `quesionnaires/:id/new/question`.
        items:
          $ref: '#/definitions/types.BaseQuestion'
        type: array
    type: object
  types.BaseResponse:
    properties:
      answers:
        description: The answers to all questions in a questionnaire.
        items:
          $ref: '#/definitions/types.BaseAnswer'
        type: array
    type: object
  types.BaseUser:
    properties:
      birth_year:
        example: 2000
        type: integer
      demented_among_direct_relatives:
        example: false
        type: boolean
      ear_condition:
        enum:
        - normal
        - slightly_affecting_conversation
        - need_hearing_aid
        example: normal
        type: string
      education_level:
        enum:
        - elementry_school_or_below
        - middle_school
        - high_school
        - bachelor
        - master
        - doctorate
        example: doctorate
        type: string
      eyesight_condition:
        enum:
        - normal
        - slightly_affecting_reading
        - need_glasses
        example: normal
        type: string
      gender:
        example: male
        type: string
      head_injury_experience:
        example: false
        type: boolean
      height:
        example: 185.2
        type: number
      id:
        type: string
      marriage:
        enum:
        - single
        - married
        - divorced
        - widowed
        example: single
        type: string
      medical_history:
        example: none
        type: string
      medication_status:
        example: none
        type: string
      occupation:
        enum:
        - student
        - government_employee
        - service_industry
        - industry_and_commerce
        - freelancer
        - domestic
        example: student
        type: string
      smoking_habit:
        enum:
        - none
        - sometimes
        - everyday
        example: none
        type: string
      weight:
        example: 80.3
        type: number
    type: object
  types.NotificationWithRecipient:
    properties:
      id:
        description: ID of the ent.
        type: string
      message:
        description: Message holds the value of the "message" field.
        type: string
      read_at:
        description: ReadAt holds the value of the "read_at" field.
        type: string
      recipient:
        $ref: '#/definitions/ent.User'
      sent_at:
        description: SentAt holds the value of the "sent_at" field.
        type: string
      type:
        allOf:
        - $ref: '#/definitions/notification.Type'
        description: Type holds the value of the "type" field.
    type: object
  types.QuestionWithQuestionnaire:
    properties:
      body:
        description: Body holds the value of the "body" field.
        type: string
      id:
        description: ID of the ent.
        type: string
      order:
        description: Order holds the value of the "order" field.
        type: integer
      questionnaire:
        $ref: '#/definitions/ent.Questionnaire'
      type:
        allOf:
        - $ref: '#/definitions/question.Type'
        description: Type holds the value of the "type" field.
    type: object
  types.QuestionnaireDetails:
    properties:
      created_at:
        description: CreatedAt holds the value of the "created_at" field.
        type: string
      id:
        description: ID of the ent.
        type: string
      name:
        description: Name holds the value of the "name" field.
        type: string
      questions:
        items:
          $ref: '#/definitions/ent.Question'
        type: array
      responses:
        items:
          $ref: '#/definitions/types.Response'
        type: array
    type: object
  types.QuestionnaireWithQuestions:
    properties:
      created_at:
        description: CreatedAt holds the value of the "created_at" field.
        type: string
      id:
        description: ID of the ent.
        type: string
      name:
        description: Name holds the value of the "name" field.
        type: string
      questions:
        items:
          $ref: '#/definitions/ent.Question'
        type: array
    type: object
  types.RegisterData:
    properties:
      response:
        $ref: '#/definitions/types.ResponseWithQuestionnaireId'
      user:
        $ref: '#/definitions/types.BaseUser'
    type: object
  types.RegisterResponse:
    properties:
      response:
        $ref: '#/definitions/ent.QuestionnaireResponse'
      user:
        $ref: '#/definitions/ent.User'
    type: object
  types.Response:
    properties:
      answers:
        description: The answers to all questions in a questionnaire.
        items:
          $ref: '#/definitions/types.BaseAnswer'
        type: array
      created_at:
        description: CreatedAt holds the value of the "created_at" field.
        type: string
      id:
        description: ID of the ent.
        type: string
      user_id:
        description: The user ID of the user who submit the response.
        type: string
    type: object
  types.ResponseWithQuestionnaire:
    properties:
      answers:
        description: The answers to all questions in a questionnaire.
        items:
          $ref: '#/definitions/types.BaseAnswer'
        type: array
      created_at:
        description: CreatedAt holds the value of the "created_at" field.
        type: string
      id:
        description: ID of the ent.
        type: string
      questionnaire:
        $ref: '#/definitions/ent.Questionnaire'
      user_id:
        description: The user ID of the user who submit the response.
        type: string
    type: object
  types.ResponseWithQuestionnaireId:
    properties:
      answers:
        description: The answers to all questions in a questionnaire.
        items:
          $ref: '#/definitions/types.BaseAnswer'
        type: array
      questionnaire_id:
        type: string
    type: object
  user.EarCondition:
    enum:
    - normal
    - slightly_affecting_conversation
    - need_hearing_aid
    type: string
    x-enum-varnames:
    - EarConditionNormal
    - EarConditionSlightlyAffectingConversation
    - EarConditionNeedHearingAid
  user.EducationLevel:
    enum:
    - elementry_school_or_below
    - middle_school
    - high_school
    - bachelor
    - master
    - doctorate
    type: string
    x-enum-varnames:
    - EducationLevelElementrySchoolOrBelow
    - EducationLevelMiddleSchool
    - EducationLevelHighSchool
    - EducationLevelBachelor
    - EducationLevelMaster
    - EducationLevelDoctorate
  user.EyesightCondition:
    enum:
    - normal
    - slightly_affecting_reading
    - need_glasses
    type: string
    x-enum-varnames:
    - EyesightConditionNormal
    - EyesightConditionSlightlyAffectingReading
    - EyesightConditionNeedGlasses
  user.Gender:
    enum:
    - male
    - female
    - nonbinary
    type: string
    x-enum-varnames:
    - GenderMale
    - GenderFemale
    - GenderNonbinary
  user.Marriage:
    enum:
    - single
    - married
    - divorced
    - widowed
    type: string
    x-enum-varnames:
    - MarriageSingle
    - MarriageMarried
    - MarriageDivorced
    - MarriageWidowed
  user.MedicalHistory:
    enum:
    - high_blood_pressure
    - hyperlipidemia
    - diabetes
    - heart_disease
    - stroke
    - mental_illness
    - dementia
    - none_of_the_above
    type: string
    x-enum-varnames:
    - MedicalHistoryHighBloodPressure
    - MedicalHistoryHyperlipidemia
    - MedicalHistoryDiabetes
    - MedicalHistoryHeartDisease
    - MedicalHistoryStroke
    - MedicalHistoryMentalIllness
    - MedicalHistoryDementia
    - MedicalHistoryNoneOfTheAbove
  user.MedicationStatus:
    enum:
    - cardiovascular_drugs
    - psychiatric_drugs
    - other_drugs
    - no_drugs
    type: string
    x-enum-varnames:
    - MedicationStatusCardiovascularDrugs
    - MedicationStatusPsychiatricDrugs
    - MedicationStatusOtherDrugs
    - MedicationStatusNoDrugs
  user.Occupation:
    enum:
    - student
    - government_employee
    - service_industry
    - industry_and_commerce
    - freelancer
    - domestic
    - retired
    - others
    type: string
    x-enum-varnames:
    - OccupationStudent
    - OccupationGovernmentEmployee
    - OccupationServiceIndustry
    - OccupationIndustryAndCommerce
    - OccupationFreelancer
    - OccupationDomestic
    - OccupationRetired
    - OccupationOthers
  user.SmokingHabit:
    enum:
    - none
    - sometimes
    - everyday
    type: string
    x-enum-varnames:
    - SmokingHabitNone
    - SmokingHabitSometimes
    - SmokingHabitEveryday
host: health-statistic.dechnology.com.tw
info:
  contact: {}
  description: |
    This is the API documentation for 「健康資料公鏈」

    # Usage

    ## Flow Diagram

    ![flow_diagram](https://cdn.discordapp.com/attachments/874556062815100940/1132920083174408222/App-.drawio.png)

    ## API Endpoints for Frontend Application

    Full descriptions of all endpoints are described below; however, more common endpoints for a client application are described here. For detailed types of params, body, or response, please refer to the full descriptiions below.

    ### Server Health Check - `/health_check` [**GET**]

    This endpoint checks if the server is alive and the database is connected. It returns a code of 200 if ture.

    ---

    ### Get Registration Questionnaire - `/questionnaires/registration` [**GET**]

    For the sake of scalibility, we make the questionnaire system a general one. That is, we can later create more questionnaires in our application. Upon initialization of our database, the registration questionnaire is created and assigned a fixed UUID. Before the user register, we need to have them fill in the registration questionnaire. This questionniare can be fetch using this endpoint. Note that this questionnaire correspond to question 16 to 30 since the answers to question 1 to 15 are part of the user data.

    ---

    ### User Registration - `/register` [**POST**]

    While the initial questionnaire may have 30 questions, some answers are part of the user data like "birth_year", "gender", and so on. Therefore, we will use some of the data as inputs to create the user while other questions are combined and treated like a questionnaire called "registration questionnaire".

    Hence, the user registration needs two things: user data and the response to the registration questionnaire. A user can only be register using this endpoint. Note that the ID field needs to be provided and it needs to match the Auth0 ID. This endpoint does 4 things in order: create a new user, respond to the registration questionnaire, assign one MyCard to this user, and send a notification via FCM.

    ---

    ### After User Registration

    #### Get user data - `/users/{id}` [**GET**]

    #### Get user's history notifications - `/users/{id}/notifications` [**GET**]

    #### Get user's prices - `/users/{id}/prices` [**GET**]

    Get all prices the user has won. Practically, a user may only have 1 or no prices. But for the sake of scalibility, we allow multiple prices to be owned by an user.

    #### Get user's MyCards - `/users/{id}/mycards` [**GET**]

    Note that the ID of this data is the card number. Currently, all users will have only one MyCard assigned to them. However, for the sake of scalibility, multiple MyCards can be assigned to an user.

    #### Get all prices - `/prices` [**GET**]

    Get all prices from the database, this is merely for demonstration purposes. The prices will be assigned randomly after the event is finished.
  title: Web3 - 健康資料公鏈API開發文件
  version: "1.0"
paths:
  /health_check:
    get:
      description: A health checking endpoint to make sure the server is not dead.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.HealthStatus'
      summary: Health Check
      tags:
      - Health
  /mycards:
    get:
      description: |
        Get all MyCards from the database.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.MyCard'
            type: array
      summary: Get MyCards
      tags:
      - MyCard
    post:
      consumes:
      - application/json
      parameters:
      - description: The mycard to be created
        in: body
        name: mycard
        required: true
        schema:
          $ref: '#/definitions/types.BaseMyCard'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.MyCard'
      summary: Create MyCard
      tags:
      - MyCard
  /mycards/{id}:
    delete:
      parameters:
      - description: The mycard's ID.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete MyCard
      tags:
      - MyCard
    get:
      parameters:
      - description: The mycard's ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.MyCard'
      summary: Get MyCard
      tags:
      - MyCard
  /notifications:
    get:
      description: |
        Get all notifications from the database. For each notification, the user who received this notification is also included.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.NotificationWithRecipient'
            type: array
      summary: Get Notifications
      tags:
      - Notification
  /notifications/{id}:
    delete:
      parameters:
      - description: The notification's ID.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete Notification
      tags:
      - Notification
    get:
      parameters:
      - description: The notification's ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.NotificationWithRecipient'
      summary: Get Notification
      tags:
      - Notification
  /prices:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Price'
            type: array
      summary: Get Prices
      tags:
      - Price
    post:
      consumes:
      - application/json
      parameters:
      - description: The price to be created
        in: body
        name: price
        required: true
        schema:
          $ref: '#/definitions/types.BasePrice'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Price'
      summary: Create Price
      tags:
      - Price
  /prices/{id}:
    delete:
      parameters:
      - description: The price's ID.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete Price
      tags:
      - Price
    get:
      parameters:
      - description: The price's ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Price'
      summary: Get Price
      tags:
      - Price
  /questionnaires:
    get:
      description: |
        Get all questionnaires from the database. For each questionnaire, all questions and responses of this questionnaire are also included.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.QuestionnaireDetails'
            type: array
      summary: Get Questionnaires
      tags:
      - Questionnaire
    post:
      consumes:
      - application/json
      description: "Create a new questionnaire and optionally its questions.\n\n##
        Request Body\n\n- `name` *`string`* **Required**\n    The name of the questionnaire
        to be created.\n\n- `questions` *`array`* Optional\n    The initial questions
        in this questionnaire. This field may be empty and you can add questions later
        using post request to `quesionnaires/:id/new/question`.\n    \n    - `body`
        *`string`* **Required**\n        The body of one of the question in the questionnaire.\n
        \   \n    - `type` *`string`* **Required**\n        The type of the question.
        For now, we accept all strings but in the future this field might be an enum."
      parameters:
      - description: The questionnaire to be created.
        in: body
        name: questionnaire
        required: true
        schema:
          $ref: '#/definitions/types.BaseQuestionnaire'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Questionnaire'
      summary: Create Questionnaire
      tags:
      - Questionnaire
  /questionnaires/{id}:
    delete:
      description: Delete the questionnaire specified by the `id` path param.
      parameters:
      - description: The questionnaire's ID.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete Questionnaire
      tags:
      - Questionnaire
    get:
      description: |
        Get the questionnaire specified by the `id` path param. All questions and responses of the questionnaire are also included.
      parameters:
      - description: The questionnaire's ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.QuestionnaireDetails'
      summary: Get Questionnaire
      tags:
      - Questionnaire
  /questionnaires/{id}/responses:
    get:
      consumes:
      - application/json
      parameters:
      - description: The questionnaire's ID.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.QuestionnaireResponse'
            type: array
      summary: Get Questionnaire Responses
      tags:
      - Questionnaire
    post:
      consumes:
      - application/json
      parameters:
      - description: The questionnaire's ID.
        in: path
        name: id
        required: true
        type: string
      - description: The response to be created.
        in: body
        name: response
        required: true
        schema:
          $ref: '#/definitions/types.BaseResponse'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.QuestionnaireResponse'
      summary: Create Questionnaire Response
      tags:
      - Questionnaire
  /questionnaires/registration:
    get:
      description: The questionnaire all users must submit before registering to our
        database. This endpoint retrieves that registration questionnaire. It has
        at total 16 questions.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.QuestionnaireWithQuestions'
      summary: Get Registration Questionnaire
      tags:
      - Questionnaire
  /questions:
    get:
      description: |
        Get all questions from the database. **This will NOT include questionnaires and responses.**
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.QuestionWithQuestionnaire'
            type: array
      summary: Get Questions
      tags:
      - Question
  /questions/{id}:
    delete:
      description: Delete the question specified by the `id` path param.
      parameters:
      - description: The question's ID.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete Question
      tags:
      - Question
    get:
      description: |
        Get the question specified by the `id` path param.
      parameters:
      - description: The question's ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.QuestionWithQuestionnaire'
      summary: Get Question
      tags:
      - Question
  /register:
    post:
      consumes:
      - application/json
      description: |+
        This is the ONLY way to create a new user. The registration questionnaire must be filled and the answers must be sent via this endpoint accordingly.

        ## Request Body

        - `response` *`object`* **Required**
            The response to the registration questionnaire.

            - `questionnaire_id` *`string`* **Required**
                The ID of the registration questionnaire. This special questionnaire can be obtained via `questionnaires/registration [GET]` endpoint.

            - `answers` *`array`* **Required**
                The answers of questions in the registration questionnaire. All questions must be answered.

                - `question_id` *`string`* **Required**
                The ID of the question in the registration questionnaire.

                - `body` *`string`* **Required**
                The answer to the question in the registration questionnaire.

        - `user` *`object`* **Required**
            The user to be created. A user must be created with the following 15 pieces of data provided. Note that the ID field also needs to be provided since we want to match the ID in our database with the one in Auth0.

            - `id` *`string`* **Required**
                The user's Auth0 ID.

            - `birth_year` *`string`* **Required**
                Part of the registration questionnaire.

            - `height` *`float`* **Required**
                Part of the registration questionnaire.

            - `weight` *`float`* **Required**
                Part of the registration questionnaire.

            - `gender` *`string`* **Required**
                Part of the registration questionnaire.

            - `education_level` *`string`* **Required**
                Part of the registration questionnaire.

            - `occupation` *`string`* **Required**
                Part of the registration questionnaire.

            - `marriage` *`string`* **Required**
                Part of the registration questionnaire.

            - `medical_history` *`string`* **Required**
                Part of the registration questionnaire.

            - `medication_status` *`string`* **Required**
                Part of the registration questionnaire.

            - `demented_among_direct_relatives` *`bool`* **Required**
                Part of the registration questionnaire.

            - `head_injury_experience` *`bool`* **Required**
                Part of the registration questionnaire.

            - `ear_condition` *`string`* **Required**
                Part of the registration questionnaire.

            - `eyesight_condition` *`string`* **Required**
                Part of the registration questionnaire.

            - `smoking_habit` *`string`* **Required**
                Part of the registration questionnaire.

      parameters:
      - description: The registration data.
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.RegisterData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.RegisterResponse'
      summary: Register an User
      tags:
      - Registration
  /responses:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.ResponseWithQuestionnaire'
            type: array
      summary: Get Responses
      tags:
      - Response
  /responses/{id}:
    delete:
      description: Delete the response specified by the `id` path param.
      parameters:
      - description: The response's ID.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete Response
      tags:
      - Response
    get:
      description: |
        Get the response specified by the `id` path param. **This will also includes the corresponding questionnaire.**
      parameters:
      - description: The response's ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.ResponseWithQuestionnaire'
      summary: Get Response
      tags:
      - Response
  /users:
    get:
      description: |
        Get all users from the database.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.User'
            type: array
      summary: Get Users
      tags:
      - User
  /users/{id}:
    delete:
      parameters:
      - description: The user's Auth0 ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete User
      tags:
      - User
    get:
      description: |
        Get the user specified by the `id` path param.
      parameters:
      - description: The user's Auth0 ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.User'
      summary: Get User
      tags:
      - User
    put:
      consumes:
      - application/json
      parameters:
      - description: The user's Auth0 ID
        in: path
        name: id
        required: true
        type: string
      - description: user to be updated
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.BaseUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.User'
      summary: Update User
      tags:
      - User
  /users/{id}/notifications:
    get:
      description: |
        Get all history notifications of an user.
      parameters:
      - description: The user's Auth0 ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/ent.Notification'
              type: array
            type: array
      summary: Get All Notifications From an User
      tags:
      - User
schemes:
- https
swagger: "2.0"
