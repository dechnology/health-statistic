basePath: /api/v1
definitions:
  ent.Answer:
    properties:
      body:
        description: Body holds the value of the "body" field.
        type: string
      created_at:
        description: CreatedAt holds the value of the "created_at" field.
        type: string
      id:
        description: ID of the ent.
        type: string
    type: object
  ent.Question:
    properties:
      body:
        description: Body holds the value of the "body" field.
        type: string
      id:
        description: ID of the ent.
        type: string
      type:
        description: Type holds the value of the "type" field.
        type: string
    type: object
  ent.Questionnaire:
    properties:
      created_at:
        description: CreatedAt holds the value of the "created_at" field.
        type: string
      id:
        description: ID of the ent.
        type: string
      name:
        description: Name holds the value of the "name" field.
        type: string
    type: object
  ent.User:
    properties:
      birth_year:
        description: BirthYear holds the value of the "birth_year" field.
        type: integer
      created_at:
        description: CreatedAt holds the value of the "created_at" field.
        type: string
      demented_among_direct_relatives:
        description: DementedAmongDirectRelatives holds the value of the "demented_among_direct_relatives"
          field.
        type: boolean
      ear_condition:
        allOf:
        - $ref: '#/definitions/user.EarCondition'
        description: EarCondition holds the value of the "ear_condition" field.
      education_level:
        allOf:
        - $ref: '#/definitions/user.EducationLevel'
        description: EducationLevel holds the value of the "education_level" field.
      eyesight_condition:
        allOf:
        - $ref: '#/definitions/user.EyesightCondition'
        description: EyesightCondition holds the value of the "eyesight_condition"
          field.
      first_name:
        description: FirstName holds the value of the "first_name" field.
        type: string
      gender:
        allOf:
        - $ref: '#/definitions/user.Gender'
        description: Gender holds the value of the "gender" field.
      head_injury_experience:
        description: HeadInjuryExperience holds the value of the "head_injury_experience"
          field.
        type: boolean
      height:
        description: Height holds the value of the "height" field.
        type: number
      id:
        description: ID of the ent.
        type: string
      last_name:
        description: LastName holds the value of the "last_name" field.
        type: string
      marriage:
        allOf:
        - $ref: '#/definitions/user.Marriage'
        description: Marriage holds the value of the "marriage" field.
      medical_history:
        description: MedicalHistory holds the value of the "medical_history" field.
        type: string
      medication_status:
        description: MedicationStatus holds the value of the "medication_status" field.
        type: string
      occupation:
        allOf:
        - $ref: '#/definitions/user.Occupation'
        description: Occupation holds the value of the "occupation" field.
      smoking_habit:
        allOf:
        - $ref: '#/definitions/user.SmokingHabit'
        description: SmokingHabit holds the value of the "smoking_habit" field.
      updated_at:
        description: UpdatedAt holds the value of the "updated_at" field.
        type: string
      weight:
        description: Weight holds the value of the "weight" field.
        type: number
    type: object
  handlers.AnswerBody:
    description: The json body for creating a new answer in a new response.
    properties:
      body:
        description: The answer body.
        type: string
      question_id:
        description: |-
          The question this answer relates to, the question also needs to be in
          the same questionnaire as the response.
        type: string
    type: object
  handlers.HealthStatus:
    description: Datatype of health status
    properties:
      message:
        description: Health message
        type: string
    type: object
  handlers.Question:
    properties:
      body:
        description: Body holds the value of the "body" field.
        type: string
      id:
        description: ID of the ent.
        type: string
      quesionnaires:
        items:
          $ref: '#/definitions/ent.Questionnaire'
        type: array
      type:
        description: Type holds the value of the "type" field.
        type: string
    type: object
  handlers.QuestionBody:
    description: The json body for creating a new question.
    properties:
      body:
        description: The question body
        type: string
      type:
        description: |-
          The question type, currently we accept string but in the future this
          field will be enums.
        type: string
    type: object
  handlers.Questionnaire:
    properties:
      created_at:
        description: CreatedAt holds the value of the "created_at" field.
        type: string
      id:
        description: ID of the ent.
        type: string
      name:
        description: Name holds the value of the "name" field.
        type: string
      questions:
        items:
          $ref: '#/definitions/ent.Question'
        type: array
      responses:
        items:
          $ref: '#/definitions/handlers.QuestionnaireResponse'
        type: array
    type: object
  handlers.QuestionnaireBody:
    description: The json body for creating a new questionnaire.
    properties:
      name:
        description: The name of the questionnaire
        type: string
      questions:
        description: |-
          The initial questions in this questionnaire. This field may be empty
          and you can add questions later using post request to
          `quesionnaires/:id/new/question`.
        items:
          $ref: '#/definitions/handlers.QuestionBody'
        type: array
    type: object
  handlers.QuestionnaireResponse:
    properties:
      answers:
        items:
          $ref: '#/definitions/ent.Answer'
        type: array
      created_at:
        description: CreatedAt holds the value of the "created_at" field.
        type: string
      id:
        description: ID of the ent.
        type: string
    type: object
  handlers.QuestionnaireResponseBody:
    description: The json body for creating a new response.
    properties:
      answers:
        description: The answers to all questions in a questionnaire.
        items:
          $ref: '#/definitions/handlers.AnswerBody'
        type: array
      user_id:
        description: The user ID of the user who submit the response.
        type: string
    type: object
  user.EarCondition:
    enum:
    - normal
    - slightly_affecting_conversation
    - need_hearing_aid
    type: string
    x-enum-varnames:
    - EarConditionNormal
    - EarConditionSlightlyAffectingConversation
    - EarConditionNeedHearingAid
  user.EducationLevel:
    enum:
    - elementry_school_or_below
    - middle_school
    - high_school
    - bachelor
    - master
    - doctorate
    type: string
    x-enum-varnames:
    - EducationLevelElementrySchoolOrBelow
    - EducationLevelMiddleSchool
    - EducationLevelHighSchool
    - EducationLevelBachelor
    - EducationLevelMaster
    - EducationLevelDoctorate
  user.EyesightCondition:
    enum:
    - normal
    - slightly_affecting_reading
    - need_glasses
    type: string
    x-enum-varnames:
    - EyesightConditionNormal
    - EyesightConditionSlightlyAffectingReading
    - EyesightConditionNeedGlasses
  user.Gender:
    enum:
    - male
    - female
    - nonbinary
    type: string
    x-enum-varnames:
    - GenderMale
    - GenderFemale
    - GenderNonbinary
  user.Marriage:
    enum:
    - single
    - married
    - divorced
    - widowed
    type: string
    x-enum-varnames:
    - MarriageSingle
    - MarriageMarried
    - MarriageDivorced
    - MarriageWidowed
  user.Occupation:
    enum:
    - student
    - government_employee
    - service_industry
    - industry_and_commerce
    - freelancer
    - domestic
    type: string
    x-enum-varnames:
    - OccupationStudent
    - OccupationGovernmentEmployee
    - OccupationServiceIndustry
    - OccupationIndustryAndCommerce
    - OccupationFreelancer
    - OccupationDomestic
  user.SmokingHabit:
    enum:
    - none
    - sometimes
    - everyday
    type: string
    x-enum-varnames:
    - SmokingHabitNone
    - SmokingHabitSometimes
    - SmokingHabitEveryday
host: health-statistic.dechnology.com.tw
info:
  contact: {}
  description: This is the API documentation for 「健康資料公鏈」.
  title: Web3 - 健康資料公鏈API開發文件
  version: "1.0"
paths:
  /health_check:
    get:
      description: A health checking endpoint to make sure the server is not dead.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.HealthStatus'
      summary: Health Check
      tags:
      - Health
  /questionnaires:
    get:
      description: |
        Get all questionnaires from the database. For each questionnaire, all questions and responses of this questionnaire are also included.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.Questionnaire'
            type: array
      summary: Get Questionnaires
      tags:
      - Questionnaire
    post:
      consumes:
      - application/json
      description: "Create a new questionnaire and optionally its questions.\n\n##
        Request Body\n\n- `name` *`string`* **Required**\n    The name of the questionnaire
        to be created.\n\n- `questions` *`array`* Optional\n    The initial questions
        in this questionnaire. This field may be empty and you can add questions later
        using post request to `quesionnaires/:id/new/question`.\n    \n    - `body`
        *`string`* **Required**\n        The body of one of the question in the questionnaire.\n
        \   \n    - `type` *`string`* **Required**\n        The type of the question.
        For now, we accept all strings but in the future this field might be an enum."
      parameters:
      - description: The questionnaire to be created.
        in: body
        name: questionnaire
        required: true
        schema:
          $ref: '#/definitions/handlers.QuestionnaireBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Questionnaire'
      summary: Create Questionnaire
      tags:
      - Questionnaire
  /questionnaires/{id}:
    delete:
      description: Delete the questionnaire specified by the `id` path param.
      parameters:
      - description: The questionnaire's ID.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete Questionnaire
      tags:
      - Questionnaire
    get:
      description: |
        Get the questionnaire specified by the `id` path param. All questions and responses of the questionnaire are also included.
      parameters:
      - description: The questionnaire's ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Questionnaire'
      summary: Get Questionnaire
      tags:
      - Questionnaire
  /questionnaires/{id}/new/question:
    post:
      consumes:
      - application/json
      description: |-
        Create a new question for the questionnaire  by the `id` path param.

        ## Request Body

        - `body` *`string`* **Required**
            The body of one of the question in the questionnaire.

        - `type` *`string`* **Required**
            The type of the question. For now, we accept all strings but in the future this field might be an enum.
      parameters:
      - description: The questionnaire's ID.
        in: path
        name: id
        required: true
        type: string
      - description: The question to be created.
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/handlers.QuestionBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Question'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ent.Question'
      summary: Create Question
      tags:
      - Questionnaire
  /questionnaires/{id}/new/response:
    post:
      consumes:
      - application/json
      description: "Create a new response for the questionnaire specified by `id`
        path param.\n\n## Request Body\n\n- `user_id` *`string`* **Required**\n    The
        user auth0 ID. This is the user who submits this response.\n\n- `answers`
        *`array`* **Required**\n    The answers to the questions in the questionnaire
        submitted by the user above.Note that the length of the answers array must
        equal to the number of questions in the given questionnaire. Also, all the
        `question_id`s must match the questions in the questionnaire.\n \n    - `question_id`
        *`string`* **Required**\n    The question id of a question in the questionnaire
        which this answer correspond to.\n\n    - `body` *`string`* **Required**\n
        \   The body of the answer.\n"
      parameters:
      - description: The questionnaire's ID.
        in: path
        name: id
        required: true
        type: string
      - description: The response to be created.
        in: body
        name: response
        required: true
        schema:
          $ref: '#/definitions/handlers.QuestionnaireResponseBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.QuestionnaireResponse'
      summary: Create Response
      tags:
      - Questionnaire
  /questions:
    get:
      description: Get all questions from the database.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.Question'
            type: array
      summary: Get Questions
      tags:
      - Question
  /questions/{id}:
    delete:
      description: Delete a question by ID
      parameters:
      - description: The question's ID.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete Question
      tags:
      - Question
    get:
      description: Get a question by ID.
      parameters:
      - description: The question's ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.Question'
      summary: Get Question
      tags:
      - Question
  /responses:
    get:
      description: Get all responses from the database.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.QuestionnaireResponse'
            type: array
      summary: Get Responses
      tags:
      - Response
  /responses/{id}:
    delete:
      description: Delete a response by ID
      parameters:
      - description: The response's ID.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete Response
      tags:
      - Response
    get:
      description: Get a response by ID.
      parameters:
      - description: The response's ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.QuestionnaireResponse'
      summary: Get Response
      tags:
      - Response
  /users:
    get:
      description: Get all users from the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.User'
            type: array
      summary: Get Users
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: The user to be created
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/ent.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.User'
      summary: Create User
      tags:
      - User
  /users/{id}:
    delete:
      description: Delete a user by Auth0 ID
      parameters:
      - description: The user's Auth0 ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Delete User
      tags:
      - User
    get:
      description: Get a user by an Auth0 ID.
      parameters:
      - description: The user's Auth0 ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.User'
      summary: Get User
      tags:
      - User
    put:
      consumes:
      - application/json
      description: update a user with specified Auth0 ID
      parameters:
      - description: The user's Auth0 ID
        in: path
        name: id
        required: true
        type: string
      - description: user to be updated
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/ent.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.User'
      summary: Update User
      tags:
      - User
schemes:
- https
swagger: "2.0"
