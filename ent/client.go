// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/eesoymilk/health-statistic-api/ent/migrate"
	"github.com/google/uuid"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/eesoymilk/health-statistic-api/ent/answer"
	"github.com/eesoymilk/health-statistic-api/ent/choice"
	"github.com/eesoymilk/health-statistic-api/ent/mycard"
	"github.com/eesoymilk/health-statistic-api/ent/notification"
	"github.com/eesoymilk/health-statistic-api/ent/price"
	"github.com/eesoymilk/health-statistic-api/ent/question"
	"github.com/eesoymilk/health-statistic-api/ent/questionnaire"
	"github.com/eesoymilk/health-statistic-api/ent/questionnaireresponse"
	"github.com/eesoymilk/health-statistic-api/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Answer is the client for interacting with the Answer builders.
	Answer *AnswerClient
	// Choice is the client for interacting with the Choice builders.
	Choice *ChoiceClient
	// MyCard is the client for interacting with the MyCard builders.
	MyCard *MyCardClient
	// Notification is the client for interacting with the Notification builders.
	Notification *NotificationClient
	// Price is the client for interacting with the Price builders.
	Price *PriceClient
	// Question is the client for interacting with the Question builders.
	Question *QuestionClient
	// Questionnaire is the client for interacting with the Questionnaire builders.
	Questionnaire *QuestionnaireClient
	// QuestionnaireResponse is the client for interacting with the QuestionnaireResponse builders.
	QuestionnaireResponse *QuestionnaireResponseClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Answer = NewAnswerClient(c.config)
	c.Choice = NewChoiceClient(c.config)
	c.MyCard = NewMyCardClient(c.config)
	c.Notification = NewNotificationClient(c.config)
	c.Price = NewPriceClient(c.config)
	c.Question = NewQuestionClient(c.config)
	c.Questionnaire = NewQuestionnaireClient(c.config)
	c.QuestionnaireResponse = NewQuestionnaireResponseClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		Answer:                NewAnswerClient(cfg),
		Choice:                NewChoiceClient(cfg),
		MyCard:                NewMyCardClient(cfg),
		Notification:          NewNotificationClient(cfg),
		Price:                 NewPriceClient(cfg),
		Question:              NewQuestionClient(cfg),
		Questionnaire:         NewQuestionnaireClient(cfg),
		QuestionnaireResponse: NewQuestionnaireResponseClient(cfg),
		User:                  NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		Answer:                NewAnswerClient(cfg),
		Choice:                NewChoiceClient(cfg),
		MyCard:                NewMyCardClient(cfg),
		Notification:          NewNotificationClient(cfg),
		Price:                 NewPriceClient(cfg),
		Question:              NewQuestionClient(cfg),
		Questionnaire:         NewQuestionnaireClient(cfg),
		QuestionnaireResponse: NewQuestionnaireResponseClient(cfg),
		User:                  NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Answer.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Answer, c.Choice, c.MyCard, c.Notification, c.Price, c.Question,
		c.Questionnaire, c.QuestionnaireResponse, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Answer, c.Choice, c.MyCard, c.Notification, c.Price, c.Question,
		c.Questionnaire, c.QuestionnaireResponse, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AnswerMutation:
		return c.Answer.mutate(ctx, m)
	case *ChoiceMutation:
		return c.Choice.mutate(ctx, m)
	case *MyCardMutation:
		return c.MyCard.mutate(ctx, m)
	case *NotificationMutation:
		return c.Notification.mutate(ctx, m)
	case *PriceMutation:
		return c.Price.mutate(ctx, m)
	case *QuestionMutation:
		return c.Question.mutate(ctx, m)
	case *QuestionnaireMutation:
		return c.Questionnaire.mutate(ctx, m)
	case *QuestionnaireResponseMutation:
		return c.QuestionnaireResponse.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AnswerClient is a client for the Answer schema.
type AnswerClient struct {
	config
}

// NewAnswerClient returns a client for the Answer from the given config.
func NewAnswerClient(c config) *AnswerClient {
	return &AnswerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `answer.Hooks(f(g(h())))`.
func (c *AnswerClient) Use(hooks ...Hook) {
	c.hooks.Answer = append(c.hooks.Answer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `answer.Intercept(f(g(h())))`.
func (c *AnswerClient) Intercept(interceptors ...Interceptor) {
	c.inters.Answer = append(c.inters.Answer, interceptors...)
}

// Create returns a builder for creating a Answer entity.
func (c *AnswerClient) Create() *AnswerCreate {
	mutation := newAnswerMutation(c.config, OpCreate)
	return &AnswerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Answer entities.
func (c *AnswerClient) CreateBulk(builders ...*AnswerCreate) *AnswerCreateBulk {
	return &AnswerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Answer.
func (c *AnswerClient) Update() *AnswerUpdate {
	mutation := newAnswerMutation(c.config, OpUpdate)
	return &AnswerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AnswerClient) UpdateOne(a *Answer) *AnswerUpdateOne {
	mutation := newAnswerMutation(c.config, OpUpdateOne, withAnswer(a))
	return &AnswerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AnswerClient) UpdateOneID(id uuid.UUID) *AnswerUpdateOne {
	mutation := newAnswerMutation(c.config, OpUpdateOne, withAnswerID(id))
	return &AnswerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Answer.
func (c *AnswerClient) Delete() *AnswerDelete {
	mutation := newAnswerMutation(c.config, OpDelete)
	return &AnswerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AnswerClient) DeleteOne(a *Answer) *AnswerDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AnswerClient) DeleteOneID(id uuid.UUID) *AnswerDeleteOne {
	builder := c.Delete().Where(answer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AnswerDeleteOne{builder}
}

// Query returns a query builder for Answer.
func (c *AnswerClient) Query() *AnswerQuery {
	return &AnswerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAnswer},
		inters: c.Interceptors(),
	}
}

// Get returns a Answer entity by its id.
func (c *AnswerClient) Get(ctx context.Context, id uuid.UUID) (*Answer, error) {
	return c.Query().Where(answer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AnswerClient) GetX(ctx context.Context, id uuid.UUID) *Answer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChosen queries the chosen edge of a Answer.
func (c *AnswerClient) QueryChosen(a *Answer) *ChoiceQuery {
	query := (&ChoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(answer.Table, answer.FieldID, id),
			sqlgraph.To(choice.Table, choice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, answer.ChosenTable, answer.ChosenColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryQuestion queries the question edge of a Answer.
func (c *AnswerClient) QueryQuestion(a *Answer) *QuestionQuery {
	query := (&QuestionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(answer.Table, answer.FieldID, id),
			sqlgraph.To(question.Table, question.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, answer.QuestionTable, answer.QuestionColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryQuestionnaireResponse queries the questionnaire_response edge of a Answer.
func (c *AnswerClient) QueryQuestionnaireResponse(a *Answer) *QuestionnaireResponseQuery {
	query := (&QuestionnaireResponseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(answer.Table, answer.FieldID, id),
			sqlgraph.To(questionnaireresponse.Table, questionnaireresponse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, answer.QuestionnaireResponseTable, answer.QuestionnaireResponseColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AnswerClient) Hooks() []Hook {
	return c.hooks.Answer
}

// Interceptors returns the client interceptors.
func (c *AnswerClient) Interceptors() []Interceptor {
	return c.inters.Answer
}

func (c *AnswerClient) mutate(ctx context.Context, m *AnswerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AnswerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AnswerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AnswerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AnswerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Answer mutation op: %q", m.Op())
	}
}

// ChoiceClient is a client for the Choice schema.
type ChoiceClient struct {
	config
}

// NewChoiceClient returns a client for the Choice from the given config.
func NewChoiceClient(c config) *ChoiceClient {
	return &ChoiceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `choice.Hooks(f(g(h())))`.
func (c *ChoiceClient) Use(hooks ...Hook) {
	c.hooks.Choice = append(c.hooks.Choice, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `choice.Intercept(f(g(h())))`.
func (c *ChoiceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Choice = append(c.inters.Choice, interceptors...)
}

// Create returns a builder for creating a Choice entity.
func (c *ChoiceClient) Create() *ChoiceCreate {
	mutation := newChoiceMutation(c.config, OpCreate)
	return &ChoiceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Choice entities.
func (c *ChoiceClient) CreateBulk(builders ...*ChoiceCreate) *ChoiceCreateBulk {
	return &ChoiceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Choice.
func (c *ChoiceClient) Update() *ChoiceUpdate {
	mutation := newChoiceMutation(c.config, OpUpdate)
	return &ChoiceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ChoiceClient) UpdateOne(ch *Choice) *ChoiceUpdateOne {
	mutation := newChoiceMutation(c.config, OpUpdateOne, withChoice(ch))
	return &ChoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ChoiceClient) UpdateOneID(id uuid.UUID) *ChoiceUpdateOne {
	mutation := newChoiceMutation(c.config, OpUpdateOne, withChoiceID(id))
	return &ChoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Choice.
func (c *ChoiceClient) Delete() *ChoiceDelete {
	mutation := newChoiceMutation(c.config, OpDelete)
	return &ChoiceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ChoiceClient) DeleteOne(ch *Choice) *ChoiceDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ChoiceClient) DeleteOneID(id uuid.UUID) *ChoiceDeleteOne {
	builder := c.Delete().Where(choice.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ChoiceDeleteOne{builder}
}

// Query returns a query builder for Choice.
func (c *ChoiceClient) Query() *ChoiceQuery {
	return &ChoiceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeChoice},
		inters: c.Interceptors(),
	}
}

// Get returns a Choice entity by its id.
func (c *ChoiceClient) Get(ctx context.Context, id uuid.UUID) (*Choice, error) {
	return c.Query().Where(choice.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ChoiceClient) GetX(ctx context.Context, id uuid.UUID) *Choice {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryQuesion queries the quesion edge of a Choice.
func (c *ChoiceClient) QueryQuesion(ch *Choice) *QuestionQuery {
	query := (&QuestionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(choice.Table, choice.FieldID, id),
			sqlgraph.To(question.Table, question.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, choice.QuesionTable, choice.QuesionColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAnswer queries the answer edge of a Choice.
func (c *ChoiceClient) QueryAnswer(ch *Choice) *AnswerQuery {
	query := (&AnswerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(choice.Table, choice.FieldID, id),
			sqlgraph.To(answer.Table, answer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, choice.AnswerTable, choice.AnswerColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ChoiceClient) Hooks() []Hook {
	return c.hooks.Choice
}

// Interceptors returns the client interceptors.
func (c *ChoiceClient) Interceptors() []Interceptor {
	return c.inters.Choice
}

func (c *ChoiceClient) mutate(ctx context.Context, m *ChoiceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ChoiceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ChoiceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ChoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ChoiceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Choice mutation op: %q", m.Op())
	}
}

// MyCardClient is a client for the MyCard schema.
type MyCardClient struct {
	config
}

// NewMyCardClient returns a client for the MyCard from the given config.
func NewMyCardClient(c config) *MyCardClient {
	return &MyCardClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `mycard.Hooks(f(g(h())))`.
func (c *MyCardClient) Use(hooks ...Hook) {
	c.hooks.MyCard = append(c.hooks.MyCard, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `mycard.Intercept(f(g(h())))`.
func (c *MyCardClient) Intercept(interceptors ...Interceptor) {
	c.inters.MyCard = append(c.inters.MyCard, interceptors...)
}

// Create returns a builder for creating a MyCard entity.
func (c *MyCardClient) Create() *MyCardCreate {
	mutation := newMyCardMutation(c.config, OpCreate)
	return &MyCardCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MyCard entities.
func (c *MyCardClient) CreateBulk(builders ...*MyCardCreate) *MyCardCreateBulk {
	return &MyCardCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MyCard.
func (c *MyCardClient) Update() *MyCardUpdate {
	mutation := newMyCardMutation(c.config, OpUpdate)
	return &MyCardUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MyCardClient) UpdateOne(mc *MyCard) *MyCardUpdateOne {
	mutation := newMyCardMutation(c.config, OpUpdateOne, withMyCard(mc))
	return &MyCardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MyCardClient) UpdateOneID(id string) *MyCardUpdateOne {
	mutation := newMyCardMutation(c.config, OpUpdateOne, withMyCardID(id))
	return &MyCardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MyCard.
func (c *MyCardClient) Delete() *MyCardDelete {
	mutation := newMyCardMutation(c.config, OpDelete)
	return &MyCardDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MyCardClient) DeleteOne(mc *MyCard) *MyCardDeleteOne {
	return c.DeleteOneID(mc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MyCardClient) DeleteOneID(id string) *MyCardDeleteOne {
	builder := c.Delete().Where(mycard.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MyCardDeleteOne{builder}
}

// Query returns a query builder for MyCard.
func (c *MyCardClient) Query() *MyCardQuery {
	return &MyCardQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMyCard},
		inters: c.Interceptors(),
	}
}

// Get returns a MyCard entity by its id.
func (c *MyCardClient) Get(ctx context.Context, id string) (*MyCard, error) {
	return c.Query().Where(mycard.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MyCardClient) GetX(ctx context.Context, id string) *MyCard {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRecipient queries the recipient edge of a MyCard.
func (c *MyCardClient) QueryRecipient(mc *MyCard) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mycard.Table, mycard.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, mycard.RecipientTable, mycard.RecipientColumn),
		)
		fromV = sqlgraph.Neighbors(mc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifications queries the notifications edge of a MyCard.
func (c *MyCardClient) QueryNotifications(mc *MyCard) *NotificationQuery {
	query := (&NotificationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mycard.Table, mycard.FieldID, id),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, mycard.NotificationsTable, mycard.NotificationsColumn),
		)
		fromV = sqlgraph.Neighbors(mc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MyCardClient) Hooks() []Hook {
	return c.hooks.MyCard
}

// Interceptors returns the client interceptors.
func (c *MyCardClient) Interceptors() []Interceptor {
	return c.inters.MyCard
}

func (c *MyCardClient) mutate(ctx context.Context, m *MyCardMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MyCardCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MyCardUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MyCardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MyCardDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MyCard mutation op: %q", m.Op())
	}
}

// NotificationClient is a client for the Notification schema.
type NotificationClient struct {
	config
}

// NewNotificationClient returns a client for the Notification from the given config.
func NewNotificationClient(c config) *NotificationClient {
	return &NotificationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notification.Hooks(f(g(h())))`.
func (c *NotificationClient) Use(hooks ...Hook) {
	c.hooks.Notification = append(c.hooks.Notification, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notification.Intercept(f(g(h())))`.
func (c *NotificationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Notification = append(c.inters.Notification, interceptors...)
}

// Create returns a builder for creating a Notification entity.
func (c *NotificationClient) Create() *NotificationCreate {
	mutation := newNotificationMutation(c.config, OpCreate)
	return &NotificationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Notification entities.
func (c *NotificationClient) CreateBulk(builders ...*NotificationCreate) *NotificationCreateBulk {
	return &NotificationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Notification.
func (c *NotificationClient) Update() *NotificationUpdate {
	mutation := newNotificationMutation(c.config, OpUpdate)
	return &NotificationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotificationClient) UpdateOne(n *Notification) *NotificationUpdateOne {
	mutation := newNotificationMutation(c.config, OpUpdateOne, withNotification(n))
	return &NotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotificationClient) UpdateOneID(id uuid.UUID) *NotificationUpdateOne {
	mutation := newNotificationMutation(c.config, OpUpdateOne, withNotificationID(id))
	return &NotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Notification.
func (c *NotificationClient) Delete() *NotificationDelete {
	mutation := newNotificationMutation(c.config, OpDelete)
	return &NotificationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotificationClient) DeleteOne(n *Notification) *NotificationDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotificationClient) DeleteOneID(id uuid.UUID) *NotificationDeleteOne {
	builder := c.Delete().Where(notification.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotificationDeleteOne{builder}
}

// Query returns a query builder for Notification.
func (c *NotificationClient) Query() *NotificationQuery {
	return &NotificationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotification},
		inters: c.Interceptors(),
	}
}

// Get returns a Notification entity by its id.
func (c *NotificationClient) Get(ctx context.Context, id uuid.UUID) (*Notification, error) {
	return c.Query().Where(notification.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotificationClient) GetX(ctx context.Context, id uuid.UUID) *Notification {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRecipient queries the recipient edge of a Notification.
func (c *NotificationClient) QueryRecipient(n *Notification) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notification.Table, notification.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, notification.RecipientTable, notification.RecipientColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMycard queries the mycard edge of a Notification.
func (c *NotificationClient) QueryMycard(n *Notification) *MyCardQuery {
	query := (&MyCardClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notification.Table, notification.FieldID, id),
			sqlgraph.To(mycard.Table, mycard.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, notification.MycardTable, notification.MycardColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPrice queries the price edge of a Notification.
func (c *NotificationClient) QueryPrice(n *Notification) *PriceQuery {
	query := (&PriceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(notification.Table, notification.FieldID, id),
			sqlgraph.To(price.Table, price.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, notification.PriceTable, notification.PriceColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NotificationClient) Hooks() []Hook {
	return c.hooks.Notification
}

// Interceptors returns the client interceptors.
func (c *NotificationClient) Interceptors() []Interceptor {
	return c.inters.Notification
}

func (c *NotificationClient) mutate(ctx context.Context, m *NotificationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotificationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotificationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotificationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Notification mutation op: %q", m.Op())
	}
}

// PriceClient is a client for the Price schema.
type PriceClient struct {
	config
}

// NewPriceClient returns a client for the Price from the given config.
func NewPriceClient(c config) *PriceClient {
	return &PriceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `price.Hooks(f(g(h())))`.
func (c *PriceClient) Use(hooks ...Hook) {
	c.hooks.Price = append(c.hooks.Price, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `price.Intercept(f(g(h())))`.
func (c *PriceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Price = append(c.inters.Price, interceptors...)
}

// Create returns a builder for creating a Price entity.
func (c *PriceClient) Create() *PriceCreate {
	mutation := newPriceMutation(c.config, OpCreate)
	return &PriceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Price entities.
func (c *PriceClient) CreateBulk(builders ...*PriceCreate) *PriceCreateBulk {
	return &PriceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Price.
func (c *PriceClient) Update() *PriceUpdate {
	mutation := newPriceMutation(c.config, OpUpdate)
	return &PriceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PriceClient) UpdateOne(pr *Price) *PriceUpdateOne {
	mutation := newPriceMutation(c.config, OpUpdateOne, withPrice(pr))
	return &PriceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PriceClient) UpdateOneID(id uuid.UUID) *PriceUpdateOne {
	mutation := newPriceMutation(c.config, OpUpdateOne, withPriceID(id))
	return &PriceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Price.
func (c *PriceClient) Delete() *PriceDelete {
	mutation := newPriceMutation(c.config, OpDelete)
	return &PriceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PriceClient) DeleteOne(pr *Price) *PriceDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PriceClient) DeleteOneID(id uuid.UUID) *PriceDeleteOne {
	builder := c.Delete().Where(price.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PriceDeleteOne{builder}
}

// Query returns a query builder for Price.
func (c *PriceClient) Query() *PriceQuery {
	return &PriceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePrice},
		inters: c.Interceptors(),
	}
}

// Get returns a Price entity by its id.
func (c *PriceClient) Get(ctx context.Context, id uuid.UUID) (*Price, error) {
	return c.Query().Where(price.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PriceClient) GetX(ctx context.Context, id uuid.UUID) *Price {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRecipient queries the recipient edge of a Price.
func (c *PriceClient) QueryRecipient(pr *Price) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(price.Table, price.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, price.RecipientTable, price.RecipientColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifications queries the notifications edge of a Price.
func (c *PriceClient) QueryNotifications(pr *Price) *NotificationQuery {
	query := (&NotificationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(price.Table, price.FieldID, id),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, price.NotificationsTable, price.NotificationsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PriceClient) Hooks() []Hook {
	return c.hooks.Price
}

// Interceptors returns the client interceptors.
func (c *PriceClient) Interceptors() []Interceptor {
	return c.inters.Price
}

func (c *PriceClient) mutate(ctx context.Context, m *PriceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PriceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PriceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PriceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PriceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Price mutation op: %q", m.Op())
	}
}

// QuestionClient is a client for the Question schema.
type QuestionClient struct {
	config
}

// NewQuestionClient returns a client for the Question from the given config.
func NewQuestionClient(c config) *QuestionClient {
	return &QuestionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `question.Hooks(f(g(h())))`.
func (c *QuestionClient) Use(hooks ...Hook) {
	c.hooks.Question = append(c.hooks.Question, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `question.Intercept(f(g(h())))`.
func (c *QuestionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Question = append(c.inters.Question, interceptors...)
}

// Create returns a builder for creating a Question entity.
func (c *QuestionClient) Create() *QuestionCreate {
	mutation := newQuestionMutation(c.config, OpCreate)
	return &QuestionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Question entities.
func (c *QuestionClient) CreateBulk(builders ...*QuestionCreate) *QuestionCreateBulk {
	return &QuestionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Question.
func (c *QuestionClient) Update() *QuestionUpdate {
	mutation := newQuestionMutation(c.config, OpUpdate)
	return &QuestionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *QuestionClient) UpdateOne(q *Question) *QuestionUpdateOne {
	mutation := newQuestionMutation(c.config, OpUpdateOne, withQuestion(q))
	return &QuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *QuestionClient) UpdateOneID(id uuid.UUID) *QuestionUpdateOne {
	mutation := newQuestionMutation(c.config, OpUpdateOne, withQuestionID(id))
	return &QuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Question.
func (c *QuestionClient) Delete() *QuestionDelete {
	mutation := newQuestionMutation(c.config, OpDelete)
	return &QuestionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *QuestionClient) DeleteOne(q *Question) *QuestionDeleteOne {
	return c.DeleteOneID(q.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *QuestionClient) DeleteOneID(id uuid.UUID) *QuestionDeleteOne {
	builder := c.Delete().Where(question.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &QuestionDeleteOne{builder}
}

// Query returns a query builder for Question.
func (c *QuestionClient) Query() *QuestionQuery {
	return &QuestionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeQuestion},
		inters: c.Interceptors(),
	}
}

// Get returns a Question entity by its id.
func (c *QuestionClient) Get(ctx context.Context, id uuid.UUID) (*Question, error) {
	return c.Query().Where(question.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *QuestionClient) GetX(ctx context.Context, id uuid.UUID) *Question {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryQuestionnaire queries the questionnaire edge of a Question.
func (c *QuestionClient) QueryQuestionnaire(q *Question) *QuestionnaireQuery {
	query := (&QuestionnaireClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := q.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(question.Table, question.FieldID, id),
			sqlgraph.To(questionnaire.Table, questionnaire.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, question.QuestionnaireTable, question.QuestionnaireColumn),
		)
		fromV = sqlgraph.Neighbors(q.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChoices queries the choices edge of a Question.
func (c *QuestionClient) QueryChoices(q *Question) *ChoiceQuery {
	query := (&ChoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := q.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(question.Table, question.FieldID, id),
			sqlgraph.To(choice.Table, choice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, question.ChoicesTable, question.ChoicesColumn),
		)
		fromV = sqlgraph.Neighbors(q.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAnswers queries the answers edge of a Question.
func (c *QuestionClient) QueryAnswers(q *Question) *AnswerQuery {
	query := (&AnswerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := q.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(question.Table, question.FieldID, id),
			sqlgraph.To(answer.Table, answer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, question.AnswersTable, question.AnswersColumn),
		)
		fromV = sqlgraph.Neighbors(q.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *QuestionClient) Hooks() []Hook {
	return c.hooks.Question
}

// Interceptors returns the client interceptors.
func (c *QuestionClient) Interceptors() []Interceptor {
	return c.inters.Question
}

func (c *QuestionClient) mutate(ctx context.Context, m *QuestionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&QuestionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&QuestionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&QuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&QuestionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Question mutation op: %q", m.Op())
	}
}

// QuestionnaireClient is a client for the Questionnaire schema.
type QuestionnaireClient struct {
	config
}

// NewQuestionnaireClient returns a client for the Questionnaire from the given config.
func NewQuestionnaireClient(c config) *QuestionnaireClient {
	return &QuestionnaireClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `questionnaire.Hooks(f(g(h())))`.
func (c *QuestionnaireClient) Use(hooks ...Hook) {
	c.hooks.Questionnaire = append(c.hooks.Questionnaire, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `questionnaire.Intercept(f(g(h())))`.
func (c *QuestionnaireClient) Intercept(interceptors ...Interceptor) {
	c.inters.Questionnaire = append(c.inters.Questionnaire, interceptors...)
}

// Create returns a builder for creating a Questionnaire entity.
func (c *QuestionnaireClient) Create() *QuestionnaireCreate {
	mutation := newQuestionnaireMutation(c.config, OpCreate)
	return &QuestionnaireCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Questionnaire entities.
func (c *QuestionnaireClient) CreateBulk(builders ...*QuestionnaireCreate) *QuestionnaireCreateBulk {
	return &QuestionnaireCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Questionnaire.
func (c *QuestionnaireClient) Update() *QuestionnaireUpdate {
	mutation := newQuestionnaireMutation(c.config, OpUpdate)
	return &QuestionnaireUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *QuestionnaireClient) UpdateOne(q *Questionnaire) *QuestionnaireUpdateOne {
	mutation := newQuestionnaireMutation(c.config, OpUpdateOne, withQuestionnaire(q))
	return &QuestionnaireUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *QuestionnaireClient) UpdateOneID(id uuid.UUID) *QuestionnaireUpdateOne {
	mutation := newQuestionnaireMutation(c.config, OpUpdateOne, withQuestionnaireID(id))
	return &QuestionnaireUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Questionnaire.
func (c *QuestionnaireClient) Delete() *QuestionnaireDelete {
	mutation := newQuestionnaireMutation(c.config, OpDelete)
	return &QuestionnaireDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *QuestionnaireClient) DeleteOne(q *Questionnaire) *QuestionnaireDeleteOne {
	return c.DeleteOneID(q.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *QuestionnaireClient) DeleteOneID(id uuid.UUID) *QuestionnaireDeleteOne {
	builder := c.Delete().Where(questionnaire.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &QuestionnaireDeleteOne{builder}
}

// Query returns a query builder for Questionnaire.
func (c *QuestionnaireClient) Query() *QuestionnaireQuery {
	return &QuestionnaireQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeQuestionnaire},
		inters: c.Interceptors(),
	}
}

// Get returns a Questionnaire entity by its id.
func (c *QuestionnaireClient) Get(ctx context.Context, id uuid.UUID) (*Questionnaire, error) {
	return c.Query().Where(questionnaire.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *QuestionnaireClient) GetX(ctx context.Context, id uuid.UUID) *Questionnaire {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryQuestions queries the questions edge of a Questionnaire.
func (c *QuestionnaireClient) QueryQuestions(q *Questionnaire) *QuestionQuery {
	query := (&QuestionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := q.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(questionnaire.Table, questionnaire.FieldID, id),
			sqlgraph.To(question.Table, question.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, questionnaire.QuestionsTable, questionnaire.QuestionsColumn),
		)
		fromV = sqlgraph.Neighbors(q.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryQuestionnaireResponses queries the questionnaire_responses edge of a Questionnaire.
func (c *QuestionnaireClient) QueryQuestionnaireResponses(q *Questionnaire) *QuestionnaireResponseQuery {
	query := (&QuestionnaireResponseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := q.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(questionnaire.Table, questionnaire.FieldID, id),
			sqlgraph.To(questionnaireresponse.Table, questionnaireresponse.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, questionnaire.QuestionnaireResponsesTable, questionnaire.QuestionnaireResponsesColumn),
		)
		fromV = sqlgraph.Neighbors(q.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *QuestionnaireClient) Hooks() []Hook {
	return c.hooks.Questionnaire
}

// Interceptors returns the client interceptors.
func (c *QuestionnaireClient) Interceptors() []Interceptor {
	return c.inters.Questionnaire
}

func (c *QuestionnaireClient) mutate(ctx context.Context, m *QuestionnaireMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&QuestionnaireCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&QuestionnaireUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&QuestionnaireUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&QuestionnaireDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Questionnaire mutation op: %q", m.Op())
	}
}

// QuestionnaireResponseClient is a client for the QuestionnaireResponse schema.
type QuestionnaireResponseClient struct {
	config
}

// NewQuestionnaireResponseClient returns a client for the QuestionnaireResponse from the given config.
func NewQuestionnaireResponseClient(c config) *QuestionnaireResponseClient {
	return &QuestionnaireResponseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `questionnaireresponse.Hooks(f(g(h())))`.
func (c *QuestionnaireResponseClient) Use(hooks ...Hook) {
	c.hooks.QuestionnaireResponse = append(c.hooks.QuestionnaireResponse, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `questionnaireresponse.Intercept(f(g(h())))`.
func (c *QuestionnaireResponseClient) Intercept(interceptors ...Interceptor) {
	c.inters.QuestionnaireResponse = append(c.inters.QuestionnaireResponse, interceptors...)
}

// Create returns a builder for creating a QuestionnaireResponse entity.
func (c *QuestionnaireResponseClient) Create() *QuestionnaireResponseCreate {
	mutation := newQuestionnaireResponseMutation(c.config, OpCreate)
	return &QuestionnaireResponseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of QuestionnaireResponse entities.
func (c *QuestionnaireResponseClient) CreateBulk(builders ...*QuestionnaireResponseCreate) *QuestionnaireResponseCreateBulk {
	return &QuestionnaireResponseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for QuestionnaireResponse.
func (c *QuestionnaireResponseClient) Update() *QuestionnaireResponseUpdate {
	mutation := newQuestionnaireResponseMutation(c.config, OpUpdate)
	return &QuestionnaireResponseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *QuestionnaireResponseClient) UpdateOne(qr *QuestionnaireResponse) *QuestionnaireResponseUpdateOne {
	mutation := newQuestionnaireResponseMutation(c.config, OpUpdateOne, withQuestionnaireResponse(qr))
	return &QuestionnaireResponseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *QuestionnaireResponseClient) UpdateOneID(id uuid.UUID) *QuestionnaireResponseUpdateOne {
	mutation := newQuestionnaireResponseMutation(c.config, OpUpdateOne, withQuestionnaireResponseID(id))
	return &QuestionnaireResponseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for QuestionnaireResponse.
func (c *QuestionnaireResponseClient) Delete() *QuestionnaireResponseDelete {
	mutation := newQuestionnaireResponseMutation(c.config, OpDelete)
	return &QuestionnaireResponseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *QuestionnaireResponseClient) DeleteOne(qr *QuestionnaireResponse) *QuestionnaireResponseDeleteOne {
	return c.DeleteOneID(qr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *QuestionnaireResponseClient) DeleteOneID(id uuid.UUID) *QuestionnaireResponseDeleteOne {
	builder := c.Delete().Where(questionnaireresponse.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &QuestionnaireResponseDeleteOne{builder}
}

// Query returns a query builder for QuestionnaireResponse.
func (c *QuestionnaireResponseClient) Query() *QuestionnaireResponseQuery {
	return &QuestionnaireResponseQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeQuestionnaireResponse},
		inters: c.Interceptors(),
	}
}

// Get returns a QuestionnaireResponse entity by its id.
func (c *QuestionnaireResponseClient) Get(ctx context.Context, id uuid.UUID) (*QuestionnaireResponse, error) {
	return c.Query().Where(questionnaireresponse.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *QuestionnaireResponseClient) GetX(ctx context.Context, id uuid.UUID) *QuestionnaireResponse {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a QuestionnaireResponse.
func (c *QuestionnaireResponseClient) QueryUser(qr *QuestionnaireResponse) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := qr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(questionnaireresponse.Table, questionnaireresponse.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, questionnaireresponse.UserTable, questionnaireresponse.UserColumn),
		)
		fromV = sqlgraph.Neighbors(qr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryQuestionnaire queries the questionnaire edge of a QuestionnaireResponse.
func (c *QuestionnaireResponseClient) QueryQuestionnaire(qr *QuestionnaireResponse) *QuestionnaireQuery {
	query := (&QuestionnaireClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := qr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(questionnaireresponse.Table, questionnaireresponse.FieldID, id),
			sqlgraph.To(questionnaire.Table, questionnaire.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, questionnaireresponse.QuestionnaireTable, questionnaireresponse.QuestionnaireColumn),
		)
		fromV = sqlgraph.Neighbors(qr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAnswers queries the answers edge of a QuestionnaireResponse.
func (c *QuestionnaireResponseClient) QueryAnswers(qr *QuestionnaireResponse) *AnswerQuery {
	query := (&AnswerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := qr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(questionnaireresponse.Table, questionnaireresponse.FieldID, id),
			sqlgraph.To(answer.Table, answer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, questionnaireresponse.AnswersTable, questionnaireresponse.AnswersColumn),
		)
		fromV = sqlgraph.Neighbors(qr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *QuestionnaireResponseClient) Hooks() []Hook {
	return c.hooks.QuestionnaireResponse
}

// Interceptors returns the client interceptors.
func (c *QuestionnaireResponseClient) Interceptors() []Interceptor {
	return c.inters.QuestionnaireResponse
}

func (c *QuestionnaireResponseClient) mutate(ctx context.Context, m *QuestionnaireResponseMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&QuestionnaireResponseCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&QuestionnaireResponseUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&QuestionnaireResponseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&QuestionnaireResponseDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown QuestionnaireResponse mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id string) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id string) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id string) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id string) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryQuestionnaireResponses queries the questionnaire_responses edge of a User.
func (c *UserClient) QueryQuestionnaireResponses(u *User) *QuestionnaireResponseQuery {
	query := (&QuestionnaireResponseClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(questionnaireresponse.Table, questionnaireresponse.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.QuestionnaireResponsesTable, user.QuestionnaireResponsesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNotifications queries the notifications edge of a User.
func (c *UserClient) QueryNotifications(u *User) *NotificationQuery {
	query := (&NotificationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.NotificationsTable, user.NotificationsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPrices queries the prices edge of a User.
func (c *UserClient) QueryPrices(u *User) *PriceQuery {
	query := (&PriceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(price.Table, price.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PricesTable, user.PricesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMycards queries the mycards edge of a User.
func (c *UserClient) QueryMycards(u *User) *MyCardQuery {
	query := (&MyCardClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(mycard.Table, mycard.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.MycardsTable, user.MycardsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Answer, Choice, MyCard, Notification, Price, Question, Questionnaire,
		QuestionnaireResponse, User []ent.Hook
	}
	inters struct {
		Answer, Choice, MyCard, Notification, Price, Question, Questionnaire,
		QuestionnaireResponse, User []ent.Interceptor
	}
)
