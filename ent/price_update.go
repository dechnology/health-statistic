// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eesoymilk/health-statistic-api/ent/notification"
	"github.com/eesoymilk/health-statistic-api/ent/predicate"
	"github.com/eesoymilk/health-statistic-api/ent/price"
	"github.com/eesoymilk/health-statistic-api/ent/user"
	"github.com/google/uuid"
)

// PriceUpdate is the builder for updating Price entities.
type PriceUpdate struct {
	config
	hooks    []Hook
	mutation *PriceMutation
}

// Where appends a list predicates to the PriceUpdate builder.
func (pu *PriceUpdate) Where(ps ...predicate.Price) *PriceUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PriceUpdate) SetName(s string) *PriceUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetDescription sets the "description" field.
func (pu *PriceUpdate) SetDescription(s string) *PriceUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *PriceUpdate) SetCreatedAt(t time.Time) *PriceUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *PriceUpdate) SetNillableCreatedAt(t *time.Time) *PriceUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetTakenAt sets the "taken_at" field.
func (pu *PriceUpdate) SetTakenAt(t time.Time) *PriceUpdate {
	pu.mutation.SetTakenAt(t)
	return pu
}

// SetNillableTakenAt sets the "taken_at" field if the given value is not nil.
func (pu *PriceUpdate) SetNillableTakenAt(t *time.Time) *PriceUpdate {
	if t != nil {
		pu.SetTakenAt(*t)
	}
	return pu
}

// ClearTakenAt clears the value of the "taken_at" field.
func (pu *PriceUpdate) ClearTakenAt() *PriceUpdate {
	pu.mutation.ClearTakenAt()
	return pu
}

// SetRecipientID sets the "recipient" edge to the User entity by ID.
func (pu *PriceUpdate) SetRecipientID(id string) *PriceUpdate {
	pu.mutation.SetRecipientID(id)
	return pu
}

// SetNillableRecipientID sets the "recipient" edge to the User entity by ID if the given value is not nil.
func (pu *PriceUpdate) SetNillableRecipientID(id *string) *PriceUpdate {
	if id != nil {
		pu = pu.SetRecipientID(*id)
	}
	return pu
}

// SetRecipient sets the "recipient" edge to the User entity.
func (pu *PriceUpdate) SetRecipient(u *User) *PriceUpdate {
	return pu.SetRecipientID(u.ID)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (pu *PriceUpdate) AddNotificationIDs(ids ...uuid.UUID) *PriceUpdate {
	pu.mutation.AddNotificationIDs(ids...)
	return pu
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (pu *PriceUpdate) AddNotifications(n ...*Notification) *PriceUpdate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pu.AddNotificationIDs(ids...)
}

// Mutation returns the PriceMutation object of the builder.
func (pu *PriceUpdate) Mutation() *PriceMutation {
	return pu.mutation
}

// ClearRecipient clears the "recipient" edge to the User entity.
func (pu *PriceUpdate) ClearRecipient() *PriceUpdate {
	pu.mutation.ClearRecipient()
	return pu
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (pu *PriceUpdate) ClearNotifications() *PriceUpdate {
	pu.mutation.ClearNotifications()
	return pu
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (pu *PriceUpdate) RemoveNotificationIDs(ids ...uuid.UUID) *PriceUpdate {
	pu.mutation.RemoveNotificationIDs(ids...)
	return pu
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (pu *PriceUpdate) RemoveNotifications(n ...*Notification) *PriceUpdate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pu.RemoveNotificationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PriceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PriceUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PriceUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PriceUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PriceUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := price.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Price.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Description(); ok {
		if err := price.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Price.description": %w`, err)}
		}
	}
	return nil
}

func (pu *PriceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(price.Table, price.Columns, sqlgraph.NewFieldSpec(price.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(price.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(price.FieldDescription, field.TypeString, value)
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(price.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.TakenAt(); ok {
		_spec.SetField(price.FieldTakenAt, field.TypeTime, value)
	}
	if pu.mutation.TakenAtCleared() {
		_spec.ClearField(price.FieldTakenAt, field.TypeTime)
	}
	if pu.mutation.RecipientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   price.RecipientTable,
			Columns: []string{price.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RecipientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   price.RecipientTable,
			Columns: []string{price.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   price.NotificationsTable,
			Columns: []string{price.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !pu.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   price.NotificationsTable,
			Columns: []string{price.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   price.NotificationsTable,
			Columns: []string{price.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{price.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PriceUpdateOne is the builder for updating a single Price entity.
type PriceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PriceMutation
}

// SetName sets the "name" field.
func (puo *PriceUpdateOne) SetName(s string) *PriceUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetDescription sets the "description" field.
func (puo *PriceUpdateOne) SetDescription(s string) *PriceUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *PriceUpdateOne) SetCreatedAt(t time.Time) *PriceUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *PriceUpdateOne) SetNillableCreatedAt(t *time.Time) *PriceUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetTakenAt sets the "taken_at" field.
func (puo *PriceUpdateOne) SetTakenAt(t time.Time) *PriceUpdateOne {
	puo.mutation.SetTakenAt(t)
	return puo
}

// SetNillableTakenAt sets the "taken_at" field if the given value is not nil.
func (puo *PriceUpdateOne) SetNillableTakenAt(t *time.Time) *PriceUpdateOne {
	if t != nil {
		puo.SetTakenAt(*t)
	}
	return puo
}

// ClearTakenAt clears the value of the "taken_at" field.
func (puo *PriceUpdateOne) ClearTakenAt() *PriceUpdateOne {
	puo.mutation.ClearTakenAt()
	return puo
}

// SetRecipientID sets the "recipient" edge to the User entity by ID.
func (puo *PriceUpdateOne) SetRecipientID(id string) *PriceUpdateOne {
	puo.mutation.SetRecipientID(id)
	return puo
}

// SetNillableRecipientID sets the "recipient" edge to the User entity by ID if the given value is not nil.
func (puo *PriceUpdateOne) SetNillableRecipientID(id *string) *PriceUpdateOne {
	if id != nil {
		puo = puo.SetRecipientID(*id)
	}
	return puo
}

// SetRecipient sets the "recipient" edge to the User entity.
func (puo *PriceUpdateOne) SetRecipient(u *User) *PriceUpdateOne {
	return puo.SetRecipientID(u.ID)
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by IDs.
func (puo *PriceUpdateOne) AddNotificationIDs(ids ...uuid.UUID) *PriceUpdateOne {
	puo.mutation.AddNotificationIDs(ids...)
	return puo
}

// AddNotifications adds the "notifications" edges to the Notification entity.
func (puo *PriceUpdateOne) AddNotifications(n ...*Notification) *PriceUpdateOne {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return puo.AddNotificationIDs(ids...)
}

// Mutation returns the PriceMutation object of the builder.
func (puo *PriceUpdateOne) Mutation() *PriceMutation {
	return puo.mutation
}

// ClearRecipient clears the "recipient" edge to the User entity.
func (puo *PriceUpdateOne) ClearRecipient() *PriceUpdateOne {
	puo.mutation.ClearRecipient()
	return puo
}

// ClearNotifications clears all "notifications" edges to the Notification entity.
func (puo *PriceUpdateOne) ClearNotifications() *PriceUpdateOne {
	puo.mutation.ClearNotifications()
	return puo
}

// RemoveNotificationIDs removes the "notifications" edge to Notification entities by IDs.
func (puo *PriceUpdateOne) RemoveNotificationIDs(ids ...uuid.UUID) *PriceUpdateOne {
	puo.mutation.RemoveNotificationIDs(ids...)
	return puo
}

// RemoveNotifications removes "notifications" edges to Notification entities.
func (puo *PriceUpdateOne) RemoveNotifications(n ...*Notification) *PriceUpdateOne {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return puo.RemoveNotificationIDs(ids...)
}

// Where appends a list predicates to the PriceUpdate builder.
func (puo *PriceUpdateOne) Where(ps ...predicate.Price) *PriceUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PriceUpdateOne) Select(field string, fields ...string) *PriceUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Price entity.
func (puo *PriceUpdateOne) Save(ctx context.Context) (*Price, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PriceUpdateOne) SaveX(ctx context.Context) *Price {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PriceUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PriceUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PriceUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := price.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Price.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Description(); ok {
		if err := price.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Price.description": %w`, err)}
		}
	}
	return nil
}

func (puo *PriceUpdateOne) sqlSave(ctx context.Context) (_node *Price, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(price.Table, price.Columns, sqlgraph.NewFieldSpec(price.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Price.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, price.FieldID)
		for _, f := range fields {
			if !price.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != price.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(price.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(price.FieldDescription, field.TypeString, value)
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(price.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.TakenAt(); ok {
		_spec.SetField(price.FieldTakenAt, field.TypeTime, value)
	}
	if puo.mutation.TakenAtCleared() {
		_spec.ClearField(price.FieldTakenAt, field.TypeTime)
	}
	if puo.mutation.RecipientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   price.RecipientTable,
			Columns: []string{price.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RecipientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   price.RecipientTable,
			Columns: []string{price.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   price.NotificationsTable,
			Columns: []string{price.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedNotificationsIDs(); len(nodes) > 0 && !puo.mutation.NotificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   price.NotificationsTable,
			Columns: []string{price.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.NotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   price.NotificationsTable,
			Columns: []string{price.NotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Price{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{price.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
