// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/eesoymilk/health-statistic-api/ent/predicate"
	"github.com/eesoymilk/health-statistic-api/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeQuestionnaire = "Questionnaire"
	TypeUser          = "User"
)

// QuestionnaireMutation represents an operation that mutates the Questionnaire nodes in the graph.
type QuestionnaireMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Questionnaire, error)
	predicates    []predicate.Questionnaire
}

var _ ent.Mutation = (*QuestionnaireMutation)(nil)

// questionnaireOption allows management of the mutation configuration using functional options.
type questionnaireOption func(*QuestionnaireMutation)

// newQuestionnaireMutation creates new mutation for the Questionnaire entity.
func newQuestionnaireMutation(c config, op Op, opts ...questionnaireOption) *QuestionnaireMutation {
	m := &QuestionnaireMutation{
		config:        c,
		op:            op,
		typ:           TypeQuestionnaire,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQuestionnaireID sets the ID field of the mutation.
func withQuestionnaireID(id int) questionnaireOption {
	return func(m *QuestionnaireMutation) {
		var (
			err   error
			once  sync.Once
			value *Questionnaire
		)
		m.oldValue = func(ctx context.Context) (*Questionnaire, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Questionnaire.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQuestionnaire sets the old Questionnaire of the mutation.
func withQuestionnaire(node *Questionnaire) questionnaireOption {
	return func(m *QuestionnaireMutation) {
		m.oldValue = func(context.Context) (*Questionnaire, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QuestionnaireMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QuestionnaireMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *QuestionnaireMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *QuestionnaireMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Questionnaire.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the QuestionnaireMutation builder.
func (m *QuestionnaireMutation) Where(ps ...predicate.Questionnaire) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the QuestionnaireMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *QuestionnaireMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Questionnaire, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *QuestionnaireMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *QuestionnaireMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Questionnaire).
func (m *QuestionnaireMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *QuestionnaireMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *QuestionnaireMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *QuestionnaireMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Questionnaire field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionnaireMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Questionnaire field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *QuestionnaireMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *QuestionnaireMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionnaireMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Questionnaire numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *QuestionnaireMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *QuestionnaireMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *QuestionnaireMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Questionnaire nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *QuestionnaireMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Questionnaire field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *QuestionnaireMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *QuestionnaireMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *QuestionnaireMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *QuestionnaireMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *QuestionnaireMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *QuestionnaireMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *QuestionnaireMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Questionnaire unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *QuestionnaireMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Questionnaire edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                              Op
	typ                             string
	id                              *int
	birth_year                      *int
	addbirth_year                   *int
	height                          *float64
	addheight                       *float64
	weight                          *float64
	addweight                       *float64
	gender                          *user.Gender
	education_level                 *user.EducationLevel
	occupation                      *user.Occupation
	marriage                        *user.Marriage
	medical_history                 *string
	medication_status               *string
	demented_among_direct_relatives *bool
	head_injury_experience          *bool
	ear_condition                   *user.EarCondition
	eyesight_condition              *user.EyesightCondition
	smoking_habit                   *user.SmokingHabit
	clearedFields                   map[string]struct{}
	done                            bool
	oldValue                        func(context.Context) (*User, error)
	predicates                      []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetBirthYear sets the "birth_year" field.
func (m *UserMutation) SetBirthYear(i int) {
	m.birth_year = &i
	m.addbirth_year = nil
}

// BirthYear returns the value of the "birth_year" field in the mutation.
func (m *UserMutation) BirthYear() (r int, exists bool) {
	v := m.birth_year
	if v == nil {
		return
	}
	return *v, true
}

// OldBirthYear returns the old "birth_year" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldBirthYear(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBirthYear is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBirthYear requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBirthYear: %w", err)
	}
	return oldValue.BirthYear, nil
}

// AddBirthYear adds i to the "birth_year" field.
func (m *UserMutation) AddBirthYear(i int) {
	if m.addbirth_year != nil {
		*m.addbirth_year += i
	} else {
		m.addbirth_year = &i
	}
}

// AddedBirthYear returns the value that was added to the "birth_year" field in this mutation.
func (m *UserMutation) AddedBirthYear() (r int, exists bool) {
	v := m.addbirth_year
	if v == nil {
		return
	}
	return *v, true
}

// ResetBirthYear resets all changes to the "birth_year" field.
func (m *UserMutation) ResetBirthYear() {
	m.birth_year = nil
	m.addbirth_year = nil
}

// SetHeight sets the "height" field.
func (m *UserMutation) SetHeight(f float64) {
	m.height = &f
	m.addheight = nil
}

// Height returns the value of the "height" field in the mutation.
func (m *UserMutation) Height() (r float64, exists bool) {
	v := m.height
	if v == nil {
		return
	}
	return *v, true
}

// OldHeight returns the old "height" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldHeight(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeight: %w", err)
	}
	return oldValue.Height, nil
}

// AddHeight adds f to the "height" field.
func (m *UserMutation) AddHeight(f float64) {
	if m.addheight != nil {
		*m.addheight += f
	} else {
		m.addheight = &f
	}
}

// AddedHeight returns the value that was added to the "height" field in this mutation.
func (m *UserMutation) AddedHeight() (r float64, exists bool) {
	v := m.addheight
	if v == nil {
		return
	}
	return *v, true
}

// ResetHeight resets all changes to the "height" field.
func (m *UserMutation) ResetHeight() {
	m.height = nil
	m.addheight = nil
}

// SetWeight sets the "weight" field.
func (m *UserMutation) SetWeight(f float64) {
	m.weight = &f
	m.addweight = nil
}

// Weight returns the value of the "weight" field in the mutation.
func (m *UserMutation) Weight() (r float64, exists bool) {
	v := m.weight
	if v == nil {
		return
	}
	return *v, true
}

// OldWeight returns the old "weight" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldWeight(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeight: %w", err)
	}
	return oldValue.Weight, nil
}

// AddWeight adds f to the "weight" field.
func (m *UserMutation) AddWeight(f float64) {
	if m.addweight != nil {
		*m.addweight += f
	} else {
		m.addweight = &f
	}
}

// AddedWeight returns the value that was added to the "weight" field in this mutation.
func (m *UserMutation) AddedWeight() (r float64, exists bool) {
	v := m.addweight
	if v == nil {
		return
	}
	return *v, true
}

// ResetWeight resets all changes to the "weight" field.
func (m *UserMutation) ResetWeight() {
	m.weight = nil
	m.addweight = nil
}

// SetGender sets the "gender" field.
func (m *UserMutation) SetGender(u user.Gender) {
	m.gender = &u
}

// Gender returns the value of the "gender" field in the mutation.
func (m *UserMutation) Gender() (r user.Gender, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old "gender" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldGender(ctx context.Context) (v user.Gender, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// ResetGender resets all changes to the "gender" field.
func (m *UserMutation) ResetGender() {
	m.gender = nil
}

// SetEducationLevel sets the "education_level" field.
func (m *UserMutation) SetEducationLevel(ul user.EducationLevel) {
	m.education_level = &ul
}

// EducationLevel returns the value of the "education_level" field in the mutation.
func (m *UserMutation) EducationLevel() (r user.EducationLevel, exists bool) {
	v := m.education_level
	if v == nil {
		return
	}
	return *v, true
}

// OldEducationLevel returns the old "education_level" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEducationLevel(ctx context.Context) (v user.EducationLevel, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEducationLevel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEducationLevel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEducationLevel: %w", err)
	}
	return oldValue.EducationLevel, nil
}

// ResetEducationLevel resets all changes to the "education_level" field.
func (m *UserMutation) ResetEducationLevel() {
	m.education_level = nil
}

// SetOccupation sets the "occupation" field.
func (m *UserMutation) SetOccupation(u user.Occupation) {
	m.occupation = &u
}

// Occupation returns the value of the "occupation" field in the mutation.
func (m *UserMutation) Occupation() (r user.Occupation, exists bool) {
	v := m.occupation
	if v == nil {
		return
	}
	return *v, true
}

// OldOccupation returns the old "occupation" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldOccupation(ctx context.Context) (v user.Occupation, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOccupation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOccupation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOccupation: %w", err)
	}
	return oldValue.Occupation, nil
}

// ResetOccupation resets all changes to the "occupation" field.
func (m *UserMutation) ResetOccupation() {
	m.occupation = nil
}

// SetMarriage sets the "marriage" field.
func (m *UserMutation) SetMarriage(u user.Marriage) {
	m.marriage = &u
}

// Marriage returns the value of the "marriage" field in the mutation.
func (m *UserMutation) Marriage() (r user.Marriage, exists bool) {
	v := m.marriage
	if v == nil {
		return
	}
	return *v, true
}

// OldMarriage returns the old "marriage" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldMarriage(ctx context.Context) (v user.Marriage, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMarriage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMarriage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMarriage: %w", err)
	}
	return oldValue.Marriage, nil
}

// ResetMarriage resets all changes to the "marriage" field.
func (m *UserMutation) ResetMarriage() {
	m.marriage = nil
}

// SetMedicalHistory sets the "medical_history" field.
func (m *UserMutation) SetMedicalHistory(s string) {
	m.medical_history = &s
}

// MedicalHistory returns the value of the "medical_history" field in the mutation.
func (m *UserMutation) MedicalHistory() (r string, exists bool) {
	v := m.medical_history
	if v == nil {
		return
	}
	return *v, true
}

// OldMedicalHistory returns the old "medical_history" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldMedicalHistory(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMedicalHistory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMedicalHistory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMedicalHistory: %w", err)
	}
	return oldValue.MedicalHistory, nil
}

// ClearMedicalHistory clears the value of the "medical_history" field.
func (m *UserMutation) ClearMedicalHistory() {
	m.medical_history = nil
	m.clearedFields[user.FieldMedicalHistory] = struct{}{}
}

// MedicalHistoryCleared returns if the "medical_history" field was cleared in this mutation.
func (m *UserMutation) MedicalHistoryCleared() bool {
	_, ok := m.clearedFields[user.FieldMedicalHistory]
	return ok
}

// ResetMedicalHistory resets all changes to the "medical_history" field.
func (m *UserMutation) ResetMedicalHistory() {
	m.medical_history = nil
	delete(m.clearedFields, user.FieldMedicalHistory)
}

// SetMedicationStatus sets the "medication_status" field.
func (m *UserMutation) SetMedicationStatus(s string) {
	m.medication_status = &s
}

// MedicationStatus returns the value of the "medication_status" field in the mutation.
func (m *UserMutation) MedicationStatus() (r string, exists bool) {
	v := m.medication_status
	if v == nil {
		return
	}
	return *v, true
}

// OldMedicationStatus returns the old "medication_status" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldMedicationStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMedicationStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMedicationStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMedicationStatus: %w", err)
	}
	return oldValue.MedicationStatus, nil
}

// ClearMedicationStatus clears the value of the "medication_status" field.
func (m *UserMutation) ClearMedicationStatus() {
	m.medication_status = nil
	m.clearedFields[user.FieldMedicationStatus] = struct{}{}
}

// MedicationStatusCleared returns if the "medication_status" field was cleared in this mutation.
func (m *UserMutation) MedicationStatusCleared() bool {
	_, ok := m.clearedFields[user.FieldMedicationStatus]
	return ok
}

// ResetMedicationStatus resets all changes to the "medication_status" field.
func (m *UserMutation) ResetMedicationStatus() {
	m.medication_status = nil
	delete(m.clearedFields, user.FieldMedicationStatus)
}

// SetDementedAmongDirectRelatives sets the "demented_among_direct_relatives" field.
func (m *UserMutation) SetDementedAmongDirectRelatives(b bool) {
	m.demented_among_direct_relatives = &b
}

// DementedAmongDirectRelatives returns the value of the "demented_among_direct_relatives" field in the mutation.
func (m *UserMutation) DementedAmongDirectRelatives() (r bool, exists bool) {
	v := m.demented_among_direct_relatives
	if v == nil {
		return
	}
	return *v, true
}

// OldDementedAmongDirectRelatives returns the old "demented_among_direct_relatives" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDementedAmongDirectRelatives(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDementedAmongDirectRelatives is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDementedAmongDirectRelatives requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDementedAmongDirectRelatives: %w", err)
	}
	return oldValue.DementedAmongDirectRelatives, nil
}

// ResetDementedAmongDirectRelatives resets all changes to the "demented_among_direct_relatives" field.
func (m *UserMutation) ResetDementedAmongDirectRelatives() {
	m.demented_among_direct_relatives = nil
}

// SetHeadInjuryExperience sets the "head_injury_experience" field.
func (m *UserMutation) SetHeadInjuryExperience(b bool) {
	m.head_injury_experience = &b
}

// HeadInjuryExperience returns the value of the "head_injury_experience" field in the mutation.
func (m *UserMutation) HeadInjuryExperience() (r bool, exists bool) {
	v := m.head_injury_experience
	if v == nil {
		return
	}
	return *v, true
}

// OldHeadInjuryExperience returns the old "head_injury_experience" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldHeadInjuryExperience(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHeadInjuryExperience is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHeadInjuryExperience requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeadInjuryExperience: %w", err)
	}
	return oldValue.HeadInjuryExperience, nil
}

// ResetHeadInjuryExperience resets all changes to the "head_injury_experience" field.
func (m *UserMutation) ResetHeadInjuryExperience() {
	m.head_injury_experience = nil
}

// SetEarCondition sets the "ear_condition" field.
func (m *UserMutation) SetEarCondition(uc user.EarCondition) {
	m.ear_condition = &uc
}

// EarCondition returns the value of the "ear_condition" field in the mutation.
func (m *UserMutation) EarCondition() (r user.EarCondition, exists bool) {
	v := m.ear_condition
	if v == nil {
		return
	}
	return *v, true
}

// OldEarCondition returns the old "ear_condition" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEarCondition(ctx context.Context) (v user.EarCondition, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEarCondition is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEarCondition requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEarCondition: %w", err)
	}
	return oldValue.EarCondition, nil
}

// ResetEarCondition resets all changes to the "ear_condition" field.
func (m *UserMutation) ResetEarCondition() {
	m.ear_condition = nil
}

// SetEyesightCondition sets the "eyesight_condition" field.
func (m *UserMutation) SetEyesightCondition(uc user.EyesightCondition) {
	m.eyesight_condition = &uc
}

// EyesightCondition returns the value of the "eyesight_condition" field in the mutation.
func (m *UserMutation) EyesightCondition() (r user.EyesightCondition, exists bool) {
	v := m.eyesight_condition
	if v == nil {
		return
	}
	return *v, true
}

// OldEyesightCondition returns the old "eyesight_condition" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEyesightCondition(ctx context.Context) (v user.EyesightCondition, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEyesightCondition is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEyesightCondition requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEyesightCondition: %w", err)
	}
	return oldValue.EyesightCondition, nil
}

// ResetEyesightCondition resets all changes to the "eyesight_condition" field.
func (m *UserMutation) ResetEyesightCondition() {
	m.eyesight_condition = nil
}

// SetSmokingHabit sets the "smoking_habit" field.
func (m *UserMutation) SetSmokingHabit(uh user.SmokingHabit) {
	m.smoking_habit = &uh
}

// SmokingHabit returns the value of the "smoking_habit" field in the mutation.
func (m *UserMutation) SmokingHabit() (r user.SmokingHabit, exists bool) {
	v := m.smoking_habit
	if v == nil {
		return
	}
	return *v, true
}

// OldSmokingHabit returns the old "smoking_habit" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldSmokingHabit(ctx context.Context) (v user.SmokingHabit, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSmokingHabit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSmokingHabit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSmokingHabit: %w", err)
	}
	return oldValue.SmokingHabit, nil
}

// ResetSmokingHabit resets all changes to the "smoking_habit" field.
func (m *UserMutation) ResetSmokingHabit() {
	m.smoking_habit = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.birth_year != nil {
		fields = append(fields, user.FieldBirthYear)
	}
	if m.height != nil {
		fields = append(fields, user.FieldHeight)
	}
	if m.weight != nil {
		fields = append(fields, user.FieldWeight)
	}
	if m.gender != nil {
		fields = append(fields, user.FieldGender)
	}
	if m.education_level != nil {
		fields = append(fields, user.FieldEducationLevel)
	}
	if m.occupation != nil {
		fields = append(fields, user.FieldOccupation)
	}
	if m.marriage != nil {
		fields = append(fields, user.FieldMarriage)
	}
	if m.medical_history != nil {
		fields = append(fields, user.FieldMedicalHistory)
	}
	if m.medication_status != nil {
		fields = append(fields, user.FieldMedicationStatus)
	}
	if m.demented_among_direct_relatives != nil {
		fields = append(fields, user.FieldDementedAmongDirectRelatives)
	}
	if m.head_injury_experience != nil {
		fields = append(fields, user.FieldHeadInjuryExperience)
	}
	if m.ear_condition != nil {
		fields = append(fields, user.FieldEarCondition)
	}
	if m.eyesight_condition != nil {
		fields = append(fields, user.FieldEyesightCondition)
	}
	if m.smoking_habit != nil {
		fields = append(fields, user.FieldSmokingHabit)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldBirthYear:
		return m.BirthYear()
	case user.FieldHeight:
		return m.Height()
	case user.FieldWeight:
		return m.Weight()
	case user.FieldGender:
		return m.Gender()
	case user.FieldEducationLevel:
		return m.EducationLevel()
	case user.FieldOccupation:
		return m.Occupation()
	case user.FieldMarriage:
		return m.Marriage()
	case user.FieldMedicalHistory:
		return m.MedicalHistory()
	case user.FieldMedicationStatus:
		return m.MedicationStatus()
	case user.FieldDementedAmongDirectRelatives:
		return m.DementedAmongDirectRelatives()
	case user.FieldHeadInjuryExperience:
		return m.HeadInjuryExperience()
	case user.FieldEarCondition:
		return m.EarCondition()
	case user.FieldEyesightCondition:
		return m.EyesightCondition()
	case user.FieldSmokingHabit:
		return m.SmokingHabit()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldBirthYear:
		return m.OldBirthYear(ctx)
	case user.FieldHeight:
		return m.OldHeight(ctx)
	case user.FieldWeight:
		return m.OldWeight(ctx)
	case user.FieldGender:
		return m.OldGender(ctx)
	case user.FieldEducationLevel:
		return m.OldEducationLevel(ctx)
	case user.FieldOccupation:
		return m.OldOccupation(ctx)
	case user.FieldMarriage:
		return m.OldMarriage(ctx)
	case user.FieldMedicalHistory:
		return m.OldMedicalHistory(ctx)
	case user.FieldMedicationStatus:
		return m.OldMedicationStatus(ctx)
	case user.FieldDementedAmongDirectRelatives:
		return m.OldDementedAmongDirectRelatives(ctx)
	case user.FieldHeadInjuryExperience:
		return m.OldHeadInjuryExperience(ctx)
	case user.FieldEarCondition:
		return m.OldEarCondition(ctx)
	case user.FieldEyesightCondition:
		return m.OldEyesightCondition(ctx)
	case user.FieldSmokingHabit:
		return m.OldSmokingHabit(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldBirthYear:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBirthYear(v)
		return nil
	case user.FieldHeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeight(v)
		return nil
	case user.FieldWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeight(v)
		return nil
	case user.FieldGender:
		v, ok := value.(user.Gender)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	case user.FieldEducationLevel:
		v, ok := value.(user.EducationLevel)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEducationLevel(v)
		return nil
	case user.FieldOccupation:
		v, ok := value.(user.Occupation)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOccupation(v)
		return nil
	case user.FieldMarriage:
		v, ok := value.(user.Marriage)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMarriage(v)
		return nil
	case user.FieldMedicalHistory:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMedicalHistory(v)
		return nil
	case user.FieldMedicationStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMedicationStatus(v)
		return nil
	case user.FieldDementedAmongDirectRelatives:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDementedAmongDirectRelatives(v)
		return nil
	case user.FieldHeadInjuryExperience:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeadInjuryExperience(v)
		return nil
	case user.FieldEarCondition:
		v, ok := value.(user.EarCondition)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEarCondition(v)
		return nil
	case user.FieldEyesightCondition:
		v, ok := value.(user.EyesightCondition)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEyesightCondition(v)
		return nil
	case user.FieldSmokingHabit:
		v, ok := value.(user.SmokingHabit)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSmokingHabit(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addbirth_year != nil {
		fields = append(fields, user.FieldBirthYear)
	}
	if m.addheight != nil {
		fields = append(fields, user.FieldHeight)
	}
	if m.addweight != nil {
		fields = append(fields, user.FieldWeight)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldBirthYear:
		return m.AddedBirthYear()
	case user.FieldHeight:
		return m.AddedHeight()
	case user.FieldWeight:
		return m.AddedWeight()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldBirthYear:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBirthYear(v)
		return nil
	case user.FieldHeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHeight(v)
		return nil
	case user.FieldWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWeight(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldMedicalHistory) {
		fields = append(fields, user.FieldMedicalHistory)
	}
	if m.FieldCleared(user.FieldMedicationStatus) {
		fields = append(fields, user.FieldMedicationStatus)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldMedicalHistory:
		m.ClearMedicalHistory()
		return nil
	case user.FieldMedicationStatus:
		m.ClearMedicationStatus()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldBirthYear:
		m.ResetBirthYear()
		return nil
	case user.FieldHeight:
		m.ResetHeight()
		return nil
	case user.FieldWeight:
		m.ResetWeight()
		return nil
	case user.FieldGender:
		m.ResetGender()
		return nil
	case user.FieldEducationLevel:
		m.ResetEducationLevel()
		return nil
	case user.FieldOccupation:
		m.ResetOccupation()
		return nil
	case user.FieldMarriage:
		m.ResetMarriage()
		return nil
	case user.FieldMedicalHistory:
		m.ResetMedicalHistory()
		return nil
	case user.FieldMedicationStatus:
		m.ResetMedicationStatus()
		return nil
	case user.FieldDementedAmongDirectRelatives:
		m.ResetDementedAmongDirectRelatives()
		return nil
	case user.FieldHeadInjuryExperience:
		m.ResetHeadInjuryExperience()
		return nil
	case user.FieldEarCondition:
		m.ResetEarCondition()
		return nil
	case user.FieldEyesightCondition:
		m.ResetEyesightCondition()
		return nil
	case user.FieldSmokingHabit:
		m.ResetSmokingHabit()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
