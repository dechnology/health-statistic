// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/eesoymilk/health-statistic-api/ent/answer"
	"github.com/eesoymilk/health-statistic-api/ent/choice"
	"github.com/eesoymilk/health-statistic-api/ent/healthkit"
	"github.com/eesoymilk/health-statistic-api/ent/mycard"
	"github.com/eesoymilk/health-statistic-api/ent/notification"
	"github.com/eesoymilk/health-statistic-api/ent/predicate"
	"github.com/eesoymilk/health-statistic-api/ent/price"
	"github.com/eesoymilk/health-statistic-api/ent/question"
	"github.com/eesoymilk/health-statistic-api/ent/questionnaire"
	"github.com/eesoymilk/health-statistic-api/ent/questionnaireresponse"
	"github.com/eesoymilk/health-statistic-api/ent/user"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAnswer                = "Answer"
	TypeChoice                = "Choice"
	TypeHealthKit             = "HealthKit"
	TypeMyCard                = "MyCard"
	TypeNotification          = "Notification"
	TypePrice                 = "Price"
	TypeQuestion              = "Question"
	TypeQuestionnaire         = "Questionnaire"
	TypeQuestionnaireResponse = "QuestionnaireResponse"
	TypeUser                  = "User"
)

// AnswerMutation represents an operation that mutates the Answer nodes in the graph.
type AnswerMutation struct {
	config
	op                            Op
	typ                           string
	id                            *uuid.UUID
	created_at                    *time.Time
	body                          *string
	clearedFields                 map[string]struct{}
	chosen                        map[uuid.UUID]struct{}
	removedchosen                 map[uuid.UUID]struct{}
	clearedchosen                 bool
	question                      *uuid.UUID
	clearedquestion               bool
	questionnaire_response        *uuid.UUID
	clearedquestionnaire_response bool
	done                          bool
	oldValue                      func(context.Context) (*Answer, error)
	predicates                    []predicate.Answer
}

var _ ent.Mutation = (*AnswerMutation)(nil)

// answerOption allows management of the mutation configuration using functional options.
type answerOption func(*AnswerMutation)

// newAnswerMutation creates new mutation for the Answer entity.
func newAnswerMutation(c config, op Op, opts ...answerOption) *AnswerMutation {
	m := &AnswerMutation{
		config:        c,
		op:            op,
		typ:           TypeAnswer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAnswerID sets the ID field of the mutation.
func withAnswerID(id uuid.UUID) answerOption {
	return func(m *AnswerMutation) {
		var (
			err   error
			once  sync.Once
			value *Answer
		)
		m.oldValue = func(ctx context.Context) (*Answer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Answer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAnswer sets the old Answer of the mutation.
func withAnswer(node *Answer) answerOption {
	return func(m *AnswerMutation) {
		m.oldValue = func(context.Context) (*Answer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AnswerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AnswerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Answer entities.
func (m *AnswerMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AnswerMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AnswerMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Answer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *AnswerMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AnswerMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Answer entity.
// If the Answer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnswerMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AnswerMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetBody sets the "body" field.
func (m *AnswerMutation) SetBody(s string) {
	m.body = &s
}

// Body returns the value of the "body" field in the mutation.
func (m *AnswerMutation) Body() (r string, exists bool) {
	v := m.body
	if v == nil {
		return
	}
	return *v, true
}

// OldBody returns the old "body" field's value of the Answer entity.
// If the Answer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnswerMutation) OldBody(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBody is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBody requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBody: %w", err)
	}
	return oldValue.Body, nil
}

// ClearBody clears the value of the "body" field.
func (m *AnswerMutation) ClearBody() {
	m.body = nil
	m.clearedFields[answer.FieldBody] = struct{}{}
}

// BodyCleared returns if the "body" field was cleared in this mutation.
func (m *AnswerMutation) BodyCleared() bool {
	_, ok := m.clearedFields[answer.FieldBody]
	return ok
}

// ResetBody resets all changes to the "body" field.
func (m *AnswerMutation) ResetBody() {
	m.body = nil
	delete(m.clearedFields, answer.FieldBody)
}

// AddChosenIDs adds the "chosen" edge to the Choice entity by ids.
func (m *AnswerMutation) AddChosenIDs(ids ...uuid.UUID) {
	if m.chosen == nil {
		m.chosen = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.chosen[ids[i]] = struct{}{}
	}
}

// ClearChosen clears the "chosen" edge to the Choice entity.
func (m *AnswerMutation) ClearChosen() {
	m.clearedchosen = true
}

// ChosenCleared reports if the "chosen" edge to the Choice entity was cleared.
func (m *AnswerMutation) ChosenCleared() bool {
	return m.clearedchosen
}

// RemoveChosenIDs removes the "chosen" edge to the Choice entity by IDs.
func (m *AnswerMutation) RemoveChosenIDs(ids ...uuid.UUID) {
	if m.removedchosen == nil {
		m.removedchosen = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.chosen, ids[i])
		m.removedchosen[ids[i]] = struct{}{}
	}
}

// RemovedChosen returns the removed IDs of the "chosen" edge to the Choice entity.
func (m *AnswerMutation) RemovedChosenIDs() (ids []uuid.UUID) {
	for id := range m.removedchosen {
		ids = append(ids, id)
	}
	return
}

// ChosenIDs returns the "chosen" edge IDs in the mutation.
func (m *AnswerMutation) ChosenIDs() (ids []uuid.UUID) {
	for id := range m.chosen {
		ids = append(ids, id)
	}
	return
}

// ResetChosen resets all changes to the "chosen" edge.
func (m *AnswerMutation) ResetChosen() {
	m.chosen = nil
	m.clearedchosen = false
	m.removedchosen = nil
}

// SetQuestionID sets the "question" edge to the Question entity by id.
func (m *AnswerMutation) SetQuestionID(id uuid.UUID) {
	m.question = &id
}

// ClearQuestion clears the "question" edge to the Question entity.
func (m *AnswerMutation) ClearQuestion() {
	m.clearedquestion = true
}

// QuestionCleared reports if the "question" edge to the Question entity was cleared.
func (m *AnswerMutation) QuestionCleared() bool {
	return m.clearedquestion
}

// QuestionID returns the "question" edge ID in the mutation.
func (m *AnswerMutation) QuestionID() (id uuid.UUID, exists bool) {
	if m.question != nil {
		return *m.question, true
	}
	return
}

// QuestionIDs returns the "question" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// QuestionID instead. It exists only for internal usage by the builders.
func (m *AnswerMutation) QuestionIDs() (ids []uuid.UUID) {
	if id := m.question; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetQuestion resets all changes to the "question" edge.
func (m *AnswerMutation) ResetQuestion() {
	m.question = nil
	m.clearedquestion = false
}

// SetQuestionnaireResponseID sets the "questionnaire_response" edge to the QuestionnaireResponse entity by id.
func (m *AnswerMutation) SetQuestionnaireResponseID(id uuid.UUID) {
	m.questionnaire_response = &id
}

// ClearQuestionnaireResponse clears the "questionnaire_response" edge to the QuestionnaireResponse entity.
func (m *AnswerMutation) ClearQuestionnaireResponse() {
	m.clearedquestionnaire_response = true
}

// QuestionnaireResponseCleared reports if the "questionnaire_response" edge to the QuestionnaireResponse entity was cleared.
func (m *AnswerMutation) QuestionnaireResponseCleared() bool {
	return m.clearedquestionnaire_response
}

// QuestionnaireResponseID returns the "questionnaire_response" edge ID in the mutation.
func (m *AnswerMutation) QuestionnaireResponseID() (id uuid.UUID, exists bool) {
	if m.questionnaire_response != nil {
		return *m.questionnaire_response, true
	}
	return
}

// QuestionnaireResponseIDs returns the "questionnaire_response" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// QuestionnaireResponseID instead. It exists only for internal usage by the builders.
func (m *AnswerMutation) QuestionnaireResponseIDs() (ids []uuid.UUID) {
	if id := m.questionnaire_response; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetQuestionnaireResponse resets all changes to the "questionnaire_response" edge.
func (m *AnswerMutation) ResetQuestionnaireResponse() {
	m.questionnaire_response = nil
	m.clearedquestionnaire_response = false
}

// Where appends a list predicates to the AnswerMutation builder.
func (m *AnswerMutation) Where(ps ...predicate.Answer) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AnswerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AnswerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Answer, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AnswerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AnswerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Answer).
func (m *AnswerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AnswerMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.created_at != nil {
		fields = append(fields, answer.FieldCreatedAt)
	}
	if m.body != nil {
		fields = append(fields, answer.FieldBody)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AnswerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case answer.FieldCreatedAt:
		return m.CreatedAt()
	case answer.FieldBody:
		return m.Body()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AnswerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case answer.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case answer.FieldBody:
		return m.OldBody(ctx)
	}
	return nil, fmt.Errorf("unknown Answer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AnswerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case answer.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case answer.FieldBody:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBody(v)
		return nil
	}
	return fmt.Errorf("unknown Answer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AnswerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AnswerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AnswerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Answer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AnswerMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(answer.FieldBody) {
		fields = append(fields, answer.FieldBody)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AnswerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AnswerMutation) ClearField(name string) error {
	switch name {
	case answer.FieldBody:
		m.ClearBody()
		return nil
	}
	return fmt.Errorf("unknown Answer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AnswerMutation) ResetField(name string) error {
	switch name {
	case answer.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case answer.FieldBody:
		m.ResetBody()
		return nil
	}
	return fmt.Errorf("unknown Answer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AnswerMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.chosen != nil {
		edges = append(edges, answer.EdgeChosen)
	}
	if m.question != nil {
		edges = append(edges, answer.EdgeQuestion)
	}
	if m.questionnaire_response != nil {
		edges = append(edges, answer.EdgeQuestionnaireResponse)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AnswerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case answer.EdgeChosen:
		ids := make([]ent.Value, 0, len(m.chosen))
		for id := range m.chosen {
			ids = append(ids, id)
		}
		return ids
	case answer.EdgeQuestion:
		if id := m.question; id != nil {
			return []ent.Value{*id}
		}
	case answer.EdgeQuestionnaireResponse:
		if id := m.questionnaire_response; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AnswerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedchosen != nil {
		edges = append(edges, answer.EdgeChosen)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AnswerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case answer.EdgeChosen:
		ids := make([]ent.Value, 0, len(m.removedchosen))
		for id := range m.removedchosen {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AnswerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedchosen {
		edges = append(edges, answer.EdgeChosen)
	}
	if m.clearedquestion {
		edges = append(edges, answer.EdgeQuestion)
	}
	if m.clearedquestionnaire_response {
		edges = append(edges, answer.EdgeQuestionnaireResponse)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AnswerMutation) EdgeCleared(name string) bool {
	switch name {
	case answer.EdgeChosen:
		return m.clearedchosen
	case answer.EdgeQuestion:
		return m.clearedquestion
	case answer.EdgeQuestionnaireResponse:
		return m.clearedquestionnaire_response
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AnswerMutation) ClearEdge(name string) error {
	switch name {
	case answer.EdgeQuestion:
		m.ClearQuestion()
		return nil
	case answer.EdgeQuestionnaireResponse:
		m.ClearQuestionnaireResponse()
		return nil
	}
	return fmt.Errorf("unknown Answer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AnswerMutation) ResetEdge(name string) error {
	switch name {
	case answer.EdgeChosen:
		m.ResetChosen()
		return nil
	case answer.EdgeQuestion:
		m.ResetQuestion()
		return nil
	case answer.EdgeQuestionnaireResponse:
		m.ResetQuestionnaireResponse()
		return nil
	}
	return fmt.Errorf("unknown Answer edge %s", name)
}

// ChoiceMutation represents an operation that mutates the Choice nodes in the graph.
type ChoiceMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	body           *string
	_order         *int
	add_order      *int
	clearedFields  map[string]struct{}
	quesion        *uuid.UUID
	clearedquesion bool
	answer         map[uuid.UUID]struct{}
	removedanswer  map[uuid.UUID]struct{}
	clearedanswer  bool
	done           bool
	oldValue       func(context.Context) (*Choice, error)
	predicates     []predicate.Choice
}

var _ ent.Mutation = (*ChoiceMutation)(nil)

// choiceOption allows management of the mutation configuration using functional options.
type choiceOption func(*ChoiceMutation)

// newChoiceMutation creates new mutation for the Choice entity.
func newChoiceMutation(c config, op Op, opts ...choiceOption) *ChoiceMutation {
	m := &ChoiceMutation{
		config:        c,
		op:            op,
		typ:           TypeChoice,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChoiceID sets the ID field of the mutation.
func withChoiceID(id uuid.UUID) choiceOption {
	return func(m *ChoiceMutation) {
		var (
			err   error
			once  sync.Once
			value *Choice
		)
		m.oldValue = func(ctx context.Context) (*Choice, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Choice.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChoice sets the old Choice of the mutation.
func withChoice(node *Choice) choiceOption {
	return func(m *ChoiceMutation) {
		m.oldValue = func(context.Context) (*Choice, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChoiceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChoiceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Choice entities.
func (m *ChoiceMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChoiceMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChoiceMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Choice.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetBody sets the "body" field.
func (m *ChoiceMutation) SetBody(s string) {
	m.body = &s
}

// Body returns the value of the "body" field in the mutation.
func (m *ChoiceMutation) Body() (r string, exists bool) {
	v := m.body
	if v == nil {
		return
	}
	return *v, true
}

// OldBody returns the old "body" field's value of the Choice entity.
// If the Choice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChoiceMutation) OldBody(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBody is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBody requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBody: %w", err)
	}
	return oldValue.Body, nil
}

// ResetBody resets all changes to the "body" field.
func (m *ChoiceMutation) ResetBody() {
	m.body = nil
}

// SetOrder sets the "order" field.
func (m *ChoiceMutation) SetOrder(i int) {
	m._order = &i
	m.add_order = nil
}

// Order returns the value of the "order" field in the mutation.
func (m *ChoiceMutation) Order() (r int, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrder returns the old "order" field's value of the Choice entity.
// If the Choice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChoiceMutation) OldOrder(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrder: %w", err)
	}
	return oldValue.Order, nil
}

// AddOrder adds i to the "order" field.
func (m *ChoiceMutation) AddOrder(i int) {
	if m.add_order != nil {
		*m.add_order += i
	} else {
		m.add_order = &i
	}
}

// AddedOrder returns the value that was added to the "order" field in this mutation.
func (m *ChoiceMutation) AddedOrder() (r int, exists bool) {
	v := m.add_order
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrder resets all changes to the "order" field.
func (m *ChoiceMutation) ResetOrder() {
	m._order = nil
	m.add_order = nil
}

// SetQuesionID sets the "quesion" edge to the Question entity by id.
func (m *ChoiceMutation) SetQuesionID(id uuid.UUID) {
	m.quesion = &id
}

// ClearQuesion clears the "quesion" edge to the Question entity.
func (m *ChoiceMutation) ClearQuesion() {
	m.clearedquesion = true
}

// QuesionCleared reports if the "quesion" edge to the Question entity was cleared.
func (m *ChoiceMutation) QuesionCleared() bool {
	return m.clearedquesion
}

// QuesionID returns the "quesion" edge ID in the mutation.
func (m *ChoiceMutation) QuesionID() (id uuid.UUID, exists bool) {
	if m.quesion != nil {
		return *m.quesion, true
	}
	return
}

// QuesionIDs returns the "quesion" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// QuesionID instead. It exists only for internal usage by the builders.
func (m *ChoiceMutation) QuesionIDs() (ids []uuid.UUID) {
	if id := m.quesion; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetQuesion resets all changes to the "quesion" edge.
func (m *ChoiceMutation) ResetQuesion() {
	m.quesion = nil
	m.clearedquesion = false
}

// AddAnswerIDs adds the "answer" edge to the Answer entity by ids.
func (m *ChoiceMutation) AddAnswerIDs(ids ...uuid.UUID) {
	if m.answer == nil {
		m.answer = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.answer[ids[i]] = struct{}{}
	}
}

// ClearAnswer clears the "answer" edge to the Answer entity.
func (m *ChoiceMutation) ClearAnswer() {
	m.clearedanswer = true
}

// AnswerCleared reports if the "answer" edge to the Answer entity was cleared.
func (m *ChoiceMutation) AnswerCleared() bool {
	return m.clearedanswer
}

// RemoveAnswerIDs removes the "answer" edge to the Answer entity by IDs.
func (m *ChoiceMutation) RemoveAnswerIDs(ids ...uuid.UUID) {
	if m.removedanswer == nil {
		m.removedanswer = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.answer, ids[i])
		m.removedanswer[ids[i]] = struct{}{}
	}
}

// RemovedAnswer returns the removed IDs of the "answer" edge to the Answer entity.
func (m *ChoiceMutation) RemovedAnswerIDs() (ids []uuid.UUID) {
	for id := range m.removedanswer {
		ids = append(ids, id)
	}
	return
}

// AnswerIDs returns the "answer" edge IDs in the mutation.
func (m *ChoiceMutation) AnswerIDs() (ids []uuid.UUID) {
	for id := range m.answer {
		ids = append(ids, id)
	}
	return
}

// ResetAnswer resets all changes to the "answer" edge.
func (m *ChoiceMutation) ResetAnswer() {
	m.answer = nil
	m.clearedanswer = false
	m.removedanswer = nil
}

// Where appends a list predicates to the ChoiceMutation builder.
func (m *ChoiceMutation) Where(ps ...predicate.Choice) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ChoiceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ChoiceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Choice, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ChoiceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ChoiceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Choice).
func (m *ChoiceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChoiceMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.body != nil {
		fields = append(fields, choice.FieldBody)
	}
	if m._order != nil {
		fields = append(fields, choice.FieldOrder)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChoiceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case choice.FieldBody:
		return m.Body()
	case choice.FieldOrder:
		return m.Order()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChoiceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case choice.FieldBody:
		return m.OldBody(ctx)
	case choice.FieldOrder:
		return m.OldOrder(ctx)
	}
	return nil, fmt.Errorf("unknown Choice field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChoiceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case choice.FieldBody:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBody(v)
		return nil
	case choice.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrder(v)
		return nil
	}
	return fmt.Errorf("unknown Choice field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChoiceMutation) AddedFields() []string {
	var fields []string
	if m.add_order != nil {
		fields = append(fields, choice.FieldOrder)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChoiceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case choice.FieldOrder:
		return m.AddedOrder()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChoiceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case choice.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrder(v)
		return nil
	}
	return fmt.Errorf("unknown Choice numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChoiceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChoiceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChoiceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Choice nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChoiceMutation) ResetField(name string) error {
	switch name {
	case choice.FieldBody:
		m.ResetBody()
		return nil
	case choice.FieldOrder:
		m.ResetOrder()
		return nil
	}
	return fmt.Errorf("unknown Choice field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChoiceMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.quesion != nil {
		edges = append(edges, choice.EdgeQuesion)
	}
	if m.answer != nil {
		edges = append(edges, choice.EdgeAnswer)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChoiceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case choice.EdgeQuesion:
		if id := m.quesion; id != nil {
			return []ent.Value{*id}
		}
	case choice.EdgeAnswer:
		ids := make([]ent.Value, 0, len(m.answer))
		for id := range m.answer {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChoiceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedanswer != nil {
		edges = append(edges, choice.EdgeAnswer)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChoiceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case choice.EdgeAnswer:
		ids := make([]ent.Value, 0, len(m.removedanswer))
		for id := range m.removedanswer {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChoiceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedquesion {
		edges = append(edges, choice.EdgeQuesion)
	}
	if m.clearedanswer {
		edges = append(edges, choice.EdgeAnswer)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChoiceMutation) EdgeCleared(name string) bool {
	switch name {
	case choice.EdgeQuesion:
		return m.clearedquesion
	case choice.EdgeAnswer:
		return m.clearedanswer
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChoiceMutation) ClearEdge(name string) error {
	switch name {
	case choice.EdgeQuesion:
		m.ClearQuesion()
		return nil
	}
	return fmt.Errorf("unknown Choice unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChoiceMutation) ResetEdge(name string) error {
	switch name {
	case choice.EdgeQuesion:
		m.ResetQuesion()
		return nil
	case choice.EdgeAnswer:
		m.ResetAnswer()
		return nil
	}
	return fmt.Errorf("unknown Choice edge %s", name)
}

// HealthKitMutation represents an operation that mutates the HealthKit nodes in the graph.
type HealthKitMutation struct {
	config
	op            Op
	typ           string
	id            *int
	data          *map[string]interface{}
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*HealthKit, error)
	predicates    []predicate.HealthKit
}

var _ ent.Mutation = (*HealthKitMutation)(nil)

// healthkitOption allows management of the mutation configuration using functional options.
type healthkitOption func(*HealthKitMutation)

// newHealthKitMutation creates new mutation for the HealthKit entity.
func newHealthKitMutation(c config, op Op, opts ...healthkitOption) *HealthKitMutation {
	m := &HealthKitMutation{
		config:        c,
		op:            op,
		typ:           TypeHealthKit,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHealthKitID sets the ID field of the mutation.
func withHealthKitID(id int) healthkitOption {
	return func(m *HealthKitMutation) {
		var (
			err   error
			once  sync.Once
			value *HealthKit
		)
		m.oldValue = func(ctx context.Context) (*HealthKit, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().HealthKit.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHealthKit sets the old HealthKit of the mutation.
func withHealthKit(node *HealthKit) healthkitOption {
	return func(m *HealthKitMutation) {
		m.oldValue = func(context.Context) (*HealthKit, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HealthKitMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HealthKitMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HealthKitMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HealthKitMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().HealthKit.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetData sets the "data" field.
func (m *HealthKitMutation) SetData(value map[string]interface{}) {
	m.data = &value
}

// Data returns the value of the "data" field in the mutation.
func (m *HealthKitMutation) Data() (r map[string]interface{}, exists bool) {
	v := m.data
	if v == nil {
		return
	}
	return *v, true
}

// OldData returns the old "data" field's value of the HealthKit entity.
// If the HealthKit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HealthKitMutation) OldData(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldData: %w", err)
	}
	return oldValue.Data, nil
}

// ResetData resets all changes to the "data" field.
func (m *HealthKitMutation) ResetData() {
	m.data = nil
}

// Where appends a list predicates to the HealthKitMutation builder.
func (m *HealthKitMutation) Where(ps ...predicate.HealthKit) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the HealthKitMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *HealthKitMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.HealthKit, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *HealthKitMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *HealthKitMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (HealthKit).
func (m *HealthKitMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HealthKitMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.data != nil {
		fields = append(fields, healthkit.FieldData)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HealthKitMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case healthkit.FieldData:
		return m.Data()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HealthKitMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case healthkit.FieldData:
		return m.OldData(ctx)
	}
	return nil, fmt.Errorf("unknown HealthKit field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HealthKitMutation) SetField(name string, value ent.Value) error {
	switch name {
	case healthkit.FieldData:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetData(v)
		return nil
	}
	return fmt.Errorf("unknown HealthKit field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HealthKitMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HealthKitMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HealthKitMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown HealthKit numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HealthKitMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HealthKitMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HealthKitMutation) ClearField(name string) error {
	return fmt.Errorf("unknown HealthKit nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HealthKitMutation) ResetField(name string) error {
	switch name {
	case healthkit.FieldData:
		m.ResetData()
		return nil
	}
	return fmt.Errorf("unknown HealthKit field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HealthKitMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HealthKitMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HealthKitMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HealthKitMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HealthKitMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HealthKitMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HealthKitMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown HealthKit unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HealthKitMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown HealthKit edge %s", name)
}

// MyCardMutation represents an operation that mutates the MyCard nodes in the graph.
type MyCardMutation struct {
	config
	op                   Op
	typ                  string
	id                   *string
	card_password        *string
	created_at           *time.Time
	taken_at             *time.Time
	clearedFields        map[string]struct{}
	recipient            *string
	clearedrecipient     bool
	notifications        map[uuid.UUID]struct{}
	removednotifications map[uuid.UUID]struct{}
	clearednotifications bool
	done                 bool
	oldValue             func(context.Context) (*MyCard, error)
	predicates           []predicate.MyCard
}

var _ ent.Mutation = (*MyCardMutation)(nil)

// mycardOption allows management of the mutation configuration using functional options.
type mycardOption func(*MyCardMutation)

// newMyCardMutation creates new mutation for the MyCard entity.
func newMyCardMutation(c config, op Op, opts ...mycardOption) *MyCardMutation {
	m := &MyCardMutation{
		config:        c,
		op:            op,
		typ:           TypeMyCard,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMyCardID sets the ID field of the mutation.
func withMyCardID(id string) mycardOption {
	return func(m *MyCardMutation) {
		var (
			err   error
			once  sync.Once
			value *MyCard
		)
		m.oldValue = func(ctx context.Context) (*MyCard, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MyCard.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMyCard sets the old MyCard of the mutation.
func withMyCard(node *MyCard) mycardOption {
	return func(m *MyCardMutation) {
		m.oldValue = func(context.Context) (*MyCard, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MyCardMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MyCardMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of MyCard entities.
func (m *MyCardMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MyCardMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MyCardMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MyCard.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCardPassword sets the "card_password" field.
func (m *MyCardMutation) SetCardPassword(s string) {
	m.card_password = &s
}

// CardPassword returns the value of the "card_password" field in the mutation.
func (m *MyCardMutation) CardPassword() (r string, exists bool) {
	v := m.card_password
	if v == nil {
		return
	}
	return *v, true
}

// OldCardPassword returns the old "card_password" field's value of the MyCard entity.
// If the MyCard object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MyCardMutation) OldCardPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCardPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCardPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCardPassword: %w", err)
	}
	return oldValue.CardPassword, nil
}

// ResetCardPassword resets all changes to the "card_password" field.
func (m *MyCardMutation) ResetCardPassword() {
	m.card_password = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *MyCardMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MyCardMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the MyCard entity.
// If the MyCard object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MyCardMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MyCardMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetTakenAt sets the "taken_at" field.
func (m *MyCardMutation) SetTakenAt(t time.Time) {
	m.taken_at = &t
}

// TakenAt returns the value of the "taken_at" field in the mutation.
func (m *MyCardMutation) TakenAt() (r time.Time, exists bool) {
	v := m.taken_at
	if v == nil {
		return
	}
	return *v, true
}

// OldTakenAt returns the old "taken_at" field's value of the MyCard entity.
// If the MyCard object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MyCardMutation) OldTakenAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTakenAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTakenAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTakenAt: %w", err)
	}
	return oldValue.TakenAt, nil
}

// ClearTakenAt clears the value of the "taken_at" field.
func (m *MyCardMutation) ClearTakenAt() {
	m.taken_at = nil
	m.clearedFields[mycard.FieldTakenAt] = struct{}{}
}

// TakenAtCleared returns if the "taken_at" field was cleared in this mutation.
func (m *MyCardMutation) TakenAtCleared() bool {
	_, ok := m.clearedFields[mycard.FieldTakenAt]
	return ok
}

// ResetTakenAt resets all changes to the "taken_at" field.
func (m *MyCardMutation) ResetTakenAt() {
	m.taken_at = nil
	delete(m.clearedFields, mycard.FieldTakenAt)
}

// SetRecipientID sets the "recipient" edge to the User entity by id.
func (m *MyCardMutation) SetRecipientID(id string) {
	m.recipient = &id
}

// ClearRecipient clears the "recipient" edge to the User entity.
func (m *MyCardMutation) ClearRecipient() {
	m.clearedrecipient = true
}

// RecipientCleared reports if the "recipient" edge to the User entity was cleared.
func (m *MyCardMutation) RecipientCleared() bool {
	return m.clearedrecipient
}

// RecipientID returns the "recipient" edge ID in the mutation.
func (m *MyCardMutation) RecipientID() (id string, exists bool) {
	if m.recipient != nil {
		return *m.recipient, true
	}
	return
}

// RecipientIDs returns the "recipient" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RecipientID instead. It exists only for internal usage by the builders.
func (m *MyCardMutation) RecipientIDs() (ids []string) {
	if id := m.recipient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRecipient resets all changes to the "recipient" edge.
func (m *MyCardMutation) ResetRecipient() {
	m.recipient = nil
	m.clearedrecipient = false
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by ids.
func (m *MyCardMutation) AddNotificationIDs(ids ...uuid.UUID) {
	if m.notifications == nil {
		m.notifications = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.notifications[ids[i]] = struct{}{}
	}
}

// ClearNotifications clears the "notifications" edge to the Notification entity.
func (m *MyCardMutation) ClearNotifications() {
	m.clearednotifications = true
}

// NotificationsCleared reports if the "notifications" edge to the Notification entity was cleared.
func (m *MyCardMutation) NotificationsCleared() bool {
	return m.clearednotifications
}

// RemoveNotificationIDs removes the "notifications" edge to the Notification entity by IDs.
func (m *MyCardMutation) RemoveNotificationIDs(ids ...uuid.UUID) {
	if m.removednotifications == nil {
		m.removednotifications = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.notifications, ids[i])
		m.removednotifications[ids[i]] = struct{}{}
	}
}

// RemovedNotifications returns the removed IDs of the "notifications" edge to the Notification entity.
func (m *MyCardMutation) RemovedNotificationsIDs() (ids []uuid.UUID) {
	for id := range m.removednotifications {
		ids = append(ids, id)
	}
	return
}

// NotificationsIDs returns the "notifications" edge IDs in the mutation.
func (m *MyCardMutation) NotificationsIDs() (ids []uuid.UUID) {
	for id := range m.notifications {
		ids = append(ids, id)
	}
	return
}

// ResetNotifications resets all changes to the "notifications" edge.
func (m *MyCardMutation) ResetNotifications() {
	m.notifications = nil
	m.clearednotifications = false
	m.removednotifications = nil
}

// Where appends a list predicates to the MyCardMutation builder.
func (m *MyCardMutation) Where(ps ...predicate.MyCard) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MyCardMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MyCardMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MyCard, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MyCardMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MyCardMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MyCard).
func (m *MyCardMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MyCardMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.card_password != nil {
		fields = append(fields, mycard.FieldCardPassword)
	}
	if m.created_at != nil {
		fields = append(fields, mycard.FieldCreatedAt)
	}
	if m.taken_at != nil {
		fields = append(fields, mycard.FieldTakenAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MyCardMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case mycard.FieldCardPassword:
		return m.CardPassword()
	case mycard.FieldCreatedAt:
		return m.CreatedAt()
	case mycard.FieldTakenAt:
		return m.TakenAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MyCardMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case mycard.FieldCardPassword:
		return m.OldCardPassword(ctx)
	case mycard.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case mycard.FieldTakenAt:
		return m.OldTakenAt(ctx)
	}
	return nil, fmt.Errorf("unknown MyCard field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MyCardMutation) SetField(name string, value ent.Value) error {
	switch name {
	case mycard.FieldCardPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCardPassword(v)
		return nil
	case mycard.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case mycard.FieldTakenAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTakenAt(v)
		return nil
	}
	return fmt.Errorf("unknown MyCard field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MyCardMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MyCardMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MyCardMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MyCard numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MyCardMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(mycard.FieldTakenAt) {
		fields = append(fields, mycard.FieldTakenAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MyCardMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MyCardMutation) ClearField(name string) error {
	switch name {
	case mycard.FieldTakenAt:
		m.ClearTakenAt()
		return nil
	}
	return fmt.Errorf("unknown MyCard nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MyCardMutation) ResetField(name string) error {
	switch name {
	case mycard.FieldCardPassword:
		m.ResetCardPassword()
		return nil
	case mycard.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case mycard.FieldTakenAt:
		m.ResetTakenAt()
		return nil
	}
	return fmt.Errorf("unknown MyCard field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MyCardMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.recipient != nil {
		edges = append(edges, mycard.EdgeRecipient)
	}
	if m.notifications != nil {
		edges = append(edges, mycard.EdgeNotifications)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MyCardMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case mycard.EdgeRecipient:
		if id := m.recipient; id != nil {
			return []ent.Value{*id}
		}
	case mycard.EdgeNotifications:
		ids := make([]ent.Value, 0, len(m.notifications))
		for id := range m.notifications {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MyCardMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removednotifications != nil {
		edges = append(edges, mycard.EdgeNotifications)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MyCardMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case mycard.EdgeNotifications:
		ids := make([]ent.Value, 0, len(m.removednotifications))
		for id := range m.removednotifications {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MyCardMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedrecipient {
		edges = append(edges, mycard.EdgeRecipient)
	}
	if m.clearednotifications {
		edges = append(edges, mycard.EdgeNotifications)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MyCardMutation) EdgeCleared(name string) bool {
	switch name {
	case mycard.EdgeRecipient:
		return m.clearedrecipient
	case mycard.EdgeNotifications:
		return m.clearednotifications
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MyCardMutation) ClearEdge(name string) error {
	switch name {
	case mycard.EdgeRecipient:
		m.ClearRecipient()
		return nil
	}
	return fmt.Errorf("unknown MyCard unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MyCardMutation) ResetEdge(name string) error {
	switch name {
	case mycard.EdgeRecipient:
		m.ResetRecipient()
		return nil
	case mycard.EdgeNotifications:
		m.ResetNotifications()
		return nil
	}
	return fmt.Errorf("unknown MyCard edge %s", name)
}

// NotificationMutation represents an operation that mutates the Notification nodes in the graph.
type NotificationMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	_type            *notification.Type
	sent_at          *time.Time
	read_at          *time.Time
	message          *string
	clearedFields    map[string]struct{}
	recipient        *string
	clearedrecipient bool
	mycard           *string
	clearedmycard    bool
	price            *uuid.UUID
	clearedprice     bool
	done             bool
	oldValue         func(context.Context) (*Notification, error)
	predicates       []predicate.Notification
}

var _ ent.Mutation = (*NotificationMutation)(nil)

// notificationOption allows management of the mutation configuration using functional options.
type notificationOption func(*NotificationMutation)

// newNotificationMutation creates new mutation for the Notification entity.
func newNotificationMutation(c config, op Op, opts ...notificationOption) *NotificationMutation {
	m := &NotificationMutation{
		config:        c,
		op:            op,
		typ:           TypeNotification,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNotificationID sets the ID field of the mutation.
func withNotificationID(id uuid.UUID) notificationOption {
	return func(m *NotificationMutation) {
		var (
			err   error
			once  sync.Once
			value *Notification
		)
		m.oldValue = func(ctx context.Context) (*Notification, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Notification.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNotification sets the old Notification of the mutation.
func withNotification(node *Notification) notificationOption {
	return func(m *NotificationMutation) {
		m.oldValue = func(context.Context) (*Notification, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NotificationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NotificationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Notification entities.
func (m *NotificationMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NotificationMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NotificationMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Notification.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *NotificationMutation) SetType(n notification.Type) {
	m._type = &n
}

// GetType returns the value of the "type" field in the mutation.
func (m *NotificationMutation) GetType() (r notification.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Notification entity.
// If the Notification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMutation) OldType(ctx context.Context) (v notification.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *NotificationMutation) ResetType() {
	m._type = nil
}

// SetSentAt sets the "sent_at" field.
func (m *NotificationMutation) SetSentAt(t time.Time) {
	m.sent_at = &t
}

// SentAt returns the value of the "sent_at" field in the mutation.
func (m *NotificationMutation) SentAt() (r time.Time, exists bool) {
	v := m.sent_at
	if v == nil {
		return
	}
	return *v, true
}

// OldSentAt returns the old "sent_at" field's value of the Notification entity.
// If the Notification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMutation) OldSentAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSentAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSentAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSentAt: %w", err)
	}
	return oldValue.SentAt, nil
}

// ClearSentAt clears the value of the "sent_at" field.
func (m *NotificationMutation) ClearSentAt() {
	m.sent_at = nil
	m.clearedFields[notification.FieldSentAt] = struct{}{}
}

// SentAtCleared returns if the "sent_at" field was cleared in this mutation.
func (m *NotificationMutation) SentAtCleared() bool {
	_, ok := m.clearedFields[notification.FieldSentAt]
	return ok
}

// ResetSentAt resets all changes to the "sent_at" field.
func (m *NotificationMutation) ResetSentAt() {
	m.sent_at = nil
	delete(m.clearedFields, notification.FieldSentAt)
}

// SetReadAt sets the "read_at" field.
func (m *NotificationMutation) SetReadAt(t time.Time) {
	m.read_at = &t
}

// ReadAt returns the value of the "read_at" field in the mutation.
func (m *NotificationMutation) ReadAt() (r time.Time, exists bool) {
	v := m.read_at
	if v == nil {
		return
	}
	return *v, true
}

// OldReadAt returns the old "read_at" field's value of the Notification entity.
// If the Notification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMutation) OldReadAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReadAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReadAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReadAt: %w", err)
	}
	return oldValue.ReadAt, nil
}

// ClearReadAt clears the value of the "read_at" field.
func (m *NotificationMutation) ClearReadAt() {
	m.read_at = nil
	m.clearedFields[notification.FieldReadAt] = struct{}{}
}

// ReadAtCleared returns if the "read_at" field was cleared in this mutation.
func (m *NotificationMutation) ReadAtCleared() bool {
	_, ok := m.clearedFields[notification.FieldReadAt]
	return ok
}

// ResetReadAt resets all changes to the "read_at" field.
func (m *NotificationMutation) ResetReadAt() {
	m.read_at = nil
	delete(m.clearedFields, notification.FieldReadAt)
}

// SetMessage sets the "message" field.
func (m *NotificationMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *NotificationMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the Notification entity.
// If the Notification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ResetMessage resets all changes to the "message" field.
func (m *NotificationMutation) ResetMessage() {
	m.message = nil
}

// SetRecipientID sets the "recipient" edge to the User entity by id.
func (m *NotificationMutation) SetRecipientID(id string) {
	m.recipient = &id
}

// ClearRecipient clears the "recipient" edge to the User entity.
func (m *NotificationMutation) ClearRecipient() {
	m.clearedrecipient = true
}

// RecipientCleared reports if the "recipient" edge to the User entity was cleared.
func (m *NotificationMutation) RecipientCleared() bool {
	return m.clearedrecipient
}

// RecipientID returns the "recipient" edge ID in the mutation.
func (m *NotificationMutation) RecipientID() (id string, exists bool) {
	if m.recipient != nil {
		return *m.recipient, true
	}
	return
}

// RecipientIDs returns the "recipient" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RecipientID instead. It exists only for internal usage by the builders.
func (m *NotificationMutation) RecipientIDs() (ids []string) {
	if id := m.recipient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRecipient resets all changes to the "recipient" edge.
func (m *NotificationMutation) ResetRecipient() {
	m.recipient = nil
	m.clearedrecipient = false
}

// SetMycardID sets the "mycard" edge to the MyCard entity by id.
func (m *NotificationMutation) SetMycardID(id string) {
	m.mycard = &id
}

// ClearMycard clears the "mycard" edge to the MyCard entity.
func (m *NotificationMutation) ClearMycard() {
	m.clearedmycard = true
}

// MycardCleared reports if the "mycard" edge to the MyCard entity was cleared.
func (m *NotificationMutation) MycardCleared() bool {
	return m.clearedmycard
}

// MycardID returns the "mycard" edge ID in the mutation.
func (m *NotificationMutation) MycardID() (id string, exists bool) {
	if m.mycard != nil {
		return *m.mycard, true
	}
	return
}

// MycardIDs returns the "mycard" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MycardID instead. It exists only for internal usage by the builders.
func (m *NotificationMutation) MycardIDs() (ids []string) {
	if id := m.mycard; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMycard resets all changes to the "mycard" edge.
func (m *NotificationMutation) ResetMycard() {
	m.mycard = nil
	m.clearedmycard = false
}

// SetPriceID sets the "price" edge to the Price entity by id.
func (m *NotificationMutation) SetPriceID(id uuid.UUID) {
	m.price = &id
}

// ClearPrice clears the "price" edge to the Price entity.
func (m *NotificationMutation) ClearPrice() {
	m.clearedprice = true
}

// PriceCleared reports if the "price" edge to the Price entity was cleared.
func (m *NotificationMutation) PriceCleared() bool {
	return m.clearedprice
}

// PriceID returns the "price" edge ID in the mutation.
func (m *NotificationMutation) PriceID() (id uuid.UUID, exists bool) {
	if m.price != nil {
		return *m.price, true
	}
	return
}

// PriceIDs returns the "price" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PriceID instead. It exists only for internal usage by the builders.
func (m *NotificationMutation) PriceIDs() (ids []uuid.UUID) {
	if id := m.price; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPrice resets all changes to the "price" edge.
func (m *NotificationMutation) ResetPrice() {
	m.price = nil
	m.clearedprice = false
}

// Where appends a list predicates to the NotificationMutation builder.
func (m *NotificationMutation) Where(ps ...predicate.Notification) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the NotificationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *NotificationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Notification, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *NotificationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *NotificationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Notification).
func (m *NotificationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NotificationMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m._type != nil {
		fields = append(fields, notification.FieldType)
	}
	if m.sent_at != nil {
		fields = append(fields, notification.FieldSentAt)
	}
	if m.read_at != nil {
		fields = append(fields, notification.FieldReadAt)
	}
	if m.message != nil {
		fields = append(fields, notification.FieldMessage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NotificationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case notification.FieldType:
		return m.GetType()
	case notification.FieldSentAt:
		return m.SentAt()
	case notification.FieldReadAt:
		return m.ReadAt()
	case notification.FieldMessage:
		return m.Message()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NotificationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case notification.FieldType:
		return m.OldType(ctx)
	case notification.FieldSentAt:
		return m.OldSentAt(ctx)
	case notification.FieldReadAt:
		return m.OldReadAt(ctx)
	case notification.FieldMessage:
		return m.OldMessage(ctx)
	}
	return nil, fmt.Errorf("unknown Notification field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotificationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case notification.FieldType:
		v, ok := value.(notification.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case notification.FieldSentAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSentAt(v)
		return nil
	case notification.FieldReadAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReadAt(v)
		return nil
	case notification.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	}
	return fmt.Errorf("unknown Notification field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NotificationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NotificationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotificationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Notification numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NotificationMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(notification.FieldSentAt) {
		fields = append(fields, notification.FieldSentAt)
	}
	if m.FieldCleared(notification.FieldReadAt) {
		fields = append(fields, notification.FieldReadAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NotificationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NotificationMutation) ClearField(name string) error {
	switch name {
	case notification.FieldSentAt:
		m.ClearSentAt()
		return nil
	case notification.FieldReadAt:
		m.ClearReadAt()
		return nil
	}
	return fmt.Errorf("unknown Notification nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NotificationMutation) ResetField(name string) error {
	switch name {
	case notification.FieldType:
		m.ResetType()
		return nil
	case notification.FieldSentAt:
		m.ResetSentAt()
		return nil
	case notification.FieldReadAt:
		m.ResetReadAt()
		return nil
	case notification.FieldMessage:
		m.ResetMessage()
		return nil
	}
	return fmt.Errorf("unknown Notification field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NotificationMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.recipient != nil {
		edges = append(edges, notification.EdgeRecipient)
	}
	if m.mycard != nil {
		edges = append(edges, notification.EdgeMycard)
	}
	if m.price != nil {
		edges = append(edges, notification.EdgePrice)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NotificationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case notification.EdgeRecipient:
		if id := m.recipient; id != nil {
			return []ent.Value{*id}
		}
	case notification.EdgeMycard:
		if id := m.mycard; id != nil {
			return []ent.Value{*id}
		}
	case notification.EdgePrice:
		if id := m.price; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NotificationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NotificationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NotificationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedrecipient {
		edges = append(edges, notification.EdgeRecipient)
	}
	if m.clearedmycard {
		edges = append(edges, notification.EdgeMycard)
	}
	if m.clearedprice {
		edges = append(edges, notification.EdgePrice)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NotificationMutation) EdgeCleared(name string) bool {
	switch name {
	case notification.EdgeRecipient:
		return m.clearedrecipient
	case notification.EdgeMycard:
		return m.clearedmycard
	case notification.EdgePrice:
		return m.clearedprice
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NotificationMutation) ClearEdge(name string) error {
	switch name {
	case notification.EdgeRecipient:
		m.ClearRecipient()
		return nil
	case notification.EdgeMycard:
		m.ClearMycard()
		return nil
	case notification.EdgePrice:
		m.ClearPrice()
		return nil
	}
	return fmt.Errorf("unknown Notification unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NotificationMutation) ResetEdge(name string) error {
	switch name {
	case notification.EdgeRecipient:
		m.ResetRecipient()
		return nil
	case notification.EdgeMycard:
		m.ResetMycard()
		return nil
	case notification.EdgePrice:
		m.ResetPrice()
		return nil
	}
	return fmt.Errorf("unknown Notification edge %s", name)
}

// PriceMutation represents an operation that mutates the Price nodes in the graph.
type PriceMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	name                 *string
	description          *string
	created_at           *time.Time
	taken_at             *time.Time
	clearedFields        map[string]struct{}
	recipient            *string
	clearedrecipient     bool
	notifications        map[uuid.UUID]struct{}
	removednotifications map[uuid.UUID]struct{}
	clearednotifications bool
	done                 bool
	oldValue             func(context.Context) (*Price, error)
	predicates           []predicate.Price
}

var _ ent.Mutation = (*PriceMutation)(nil)

// priceOption allows management of the mutation configuration using functional options.
type priceOption func(*PriceMutation)

// newPriceMutation creates new mutation for the Price entity.
func newPriceMutation(c config, op Op, opts ...priceOption) *PriceMutation {
	m := &PriceMutation{
		config:        c,
		op:            op,
		typ:           TypePrice,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPriceID sets the ID field of the mutation.
func withPriceID(id uuid.UUID) priceOption {
	return func(m *PriceMutation) {
		var (
			err   error
			once  sync.Once
			value *Price
		)
		m.oldValue = func(ctx context.Context) (*Price, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Price.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPrice sets the old Price of the mutation.
func withPrice(node *Price) priceOption {
	return func(m *PriceMutation) {
		m.oldValue = func(context.Context) (*Price, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PriceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PriceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Price entities.
func (m *PriceMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PriceMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PriceMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Price.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *PriceMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PriceMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PriceMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *PriceMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *PriceMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *PriceMutation) ResetDescription() {
	m.description = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *PriceMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PriceMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PriceMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetTakenAt sets the "taken_at" field.
func (m *PriceMutation) SetTakenAt(t time.Time) {
	m.taken_at = &t
}

// TakenAt returns the value of the "taken_at" field in the mutation.
func (m *PriceMutation) TakenAt() (r time.Time, exists bool) {
	v := m.taken_at
	if v == nil {
		return
	}
	return *v, true
}

// OldTakenAt returns the old "taken_at" field's value of the Price entity.
// If the Price object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PriceMutation) OldTakenAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTakenAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTakenAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTakenAt: %w", err)
	}
	return oldValue.TakenAt, nil
}

// ClearTakenAt clears the value of the "taken_at" field.
func (m *PriceMutation) ClearTakenAt() {
	m.taken_at = nil
	m.clearedFields[price.FieldTakenAt] = struct{}{}
}

// TakenAtCleared returns if the "taken_at" field was cleared in this mutation.
func (m *PriceMutation) TakenAtCleared() bool {
	_, ok := m.clearedFields[price.FieldTakenAt]
	return ok
}

// ResetTakenAt resets all changes to the "taken_at" field.
func (m *PriceMutation) ResetTakenAt() {
	m.taken_at = nil
	delete(m.clearedFields, price.FieldTakenAt)
}

// SetRecipientID sets the "recipient" edge to the User entity by id.
func (m *PriceMutation) SetRecipientID(id string) {
	m.recipient = &id
}

// ClearRecipient clears the "recipient" edge to the User entity.
func (m *PriceMutation) ClearRecipient() {
	m.clearedrecipient = true
}

// RecipientCleared reports if the "recipient" edge to the User entity was cleared.
func (m *PriceMutation) RecipientCleared() bool {
	return m.clearedrecipient
}

// RecipientID returns the "recipient" edge ID in the mutation.
func (m *PriceMutation) RecipientID() (id string, exists bool) {
	if m.recipient != nil {
		return *m.recipient, true
	}
	return
}

// RecipientIDs returns the "recipient" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RecipientID instead. It exists only for internal usage by the builders.
func (m *PriceMutation) RecipientIDs() (ids []string) {
	if id := m.recipient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRecipient resets all changes to the "recipient" edge.
func (m *PriceMutation) ResetRecipient() {
	m.recipient = nil
	m.clearedrecipient = false
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by ids.
func (m *PriceMutation) AddNotificationIDs(ids ...uuid.UUID) {
	if m.notifications == nil {
		m.notifications = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.notifications[ids[i]] = struct{}{}
	}
}

// ClearNotifications clears the "notifications" edge to the Notification entity.
func (m *PriceMutation) ClearNotifications() {
	m.clearednotifications = true
}

// NotificationsCleared reports if the "notifications" edge to the Notification entity was cleared.
func (m *PriceMutation) NotificationsCleared() bool {
	return m.clearednotifications
}

// RemoveNotificationIDs removes the "notifications" edge to the Notification entity by IDs.
func (m *PriceMutation) RemoveNotificationIDs(ids ...uuid.UUID) {
	if m.removednotifications == nil {
		m.removednotifications = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.notifications, ids[i])
		m.removednotifications[ids[i]] = struct{}{}
	}
}

// RemovedNotifications returns the removed IDs of the "notifications" edge to the Notification entity.
func (m *PriceMutation) RemovedNotificationsIDs() (ids []uuid.UUID) {
	for id := range m.removednotifications {
		ids = append(ids, id)
	}
	return
}

// NotificationsIDs returns the "notifications" edge IDs in the mutation.
func (m *PriceMutation) NotificationsIDs() (ids []uuid.UUID) {
	for id := range m.notifications {
		ids = append(ids, id)
	}
	return
}

// ResetNotifications resets all changes to the "notifications" edge.
func (m *PriceMutation) ResetNotifications() {
	m.notifications = nil
	m.clearednotifications = false
	m.removednotifications = nil
}

// Where appends a list predicates to the PriceMutation builder.
func (m *PriceMutation) Where(ps ...predicate.Price) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PriceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PriceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Price, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PriceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PriceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Price).
func (m *PriceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PriceMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, price.FieldName)
	}
	if m.description != nil {
		fields = append(fields, price.FieldDescription)
	}
	if m.created_at != nil {
		fields = append(fields, price.FieldCreatedAt)
	}
	if m.taken_at != nil {
		fields = append(fields, price.FieldTakenAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PriceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case price.FieldName:
		return m.Name()
	case price.FieldDescription:
		return m.Description()
	case price.FieldCreatedAt:
		return m.CreatedAt()
	case price.FieldTakenAt:
		return m.TakenAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PriceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case price.FieldName:
		return m.OldName(ctx)
	case price.FieldDescription:
		return m.OldDescription(ctx)
	case price.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case price.FieldTakenAt:
		return m.OldTakenAt(ctx)
	}
	return nil, fmt.Errorf("unknown Price field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PriceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case price.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case price.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case price.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case price.FieldTakenAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTakenAt(v)
		return nil
	}
	return fmt.Errorf("unknown Price field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PriceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PriceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PriceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Price numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PriceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(price.FieldTakenAt) {
		fields = append(fields, price.FieldTakenAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PriceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PriceMutation) ClearField(name string) error {
	switch name {
	case price.FieldTakenAt:
		m.ClearTakenAt()
		return nil
	}
	return fmt.Errorf("unknown Price nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PriceMutation) ResetField(name string) error {
	switch name {
	case price.FieldName:
		m.ResetName()
		return nil
	case price.FieldDescription:
		m.ResetDescription()
		return nil
	case price.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case price.FieldTakenAt:
		m.ResetTakenAt()
		return nil
	}
	return fmt.Errorf("unknown Price field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PriceMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.recipient != nil {
		edges = append(edges, price.EdgeRecipient)
	}
	if m.notifications != nil {
		edges = append(edges, price.EdgeNotifications)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PriceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case price.EdgeRecipient:
		if id := m.recipient; id != nil {
			return []ent.Value{*id}
		}
	case price.EdgeNotifications:
		ids := make([]ent.Value, 0, len(m.notifications))
		for id := range m.notifications {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PriceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removednotifications != nil {
		edges = append(edges, price.EdgeNotifications)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PriceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case price.EdgeNotifications:
		ids := make([]ent.Value, 0, len(m.removednotifications))
		for id := range m.removednotifications {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PriceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedrecipient {
		edges = append(edges, price.EdgeRecipient)
	}
	if m.clearednotifications {
		edges = append(edges, price.EdgeNotifications)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PriceMutation) EdgeCleared(name string) bool {
	switch name {
	case price.EdgeRecipient:
		return m.clearedrecipient
	case price.EdgeNotifications:
		return m.clearednotifications
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PriceMutation) ClearEdge(name string) error {
	switch name {
	case price.EdgeRecipient:
		m.ClearRecipient()
		return nil
	}
	return fmt.Errorf("unknown Price unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PriceMutation) ResetEdge(name string) error {
	switch name {
	case price.EdgeRecipient:
		m.ResetRecipient()
		return nil
	case price.EdgeNotifications:
		m.ResetNotifications()
		return nil
	}
	return fmt.Errorf("unknown Price edge %s", name)
}

// QuestionMutation represents an operation that mutates the Question nodes in the graph.
type QuestionMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	_type                *question.Type
	body                 *string
	_order               *int
	add_order            *int
	clearedFields        map[string]struct{}
	questionnaire        *uuid.UUID
	clearedquestionnaire bool
	choices              map[uuid.UUID]struct{}
	removedchoices       map[uuid.UUID]struct{}
	clearedchoices       bool
	answers              map[uuid.UUID]struct{}
	removedanswers       map[uuid.UUID]struct{}
	clearedanswers       bool
	done                 bool
	oldValue             func(context.Context) (*Question, error)
	predicates           []predicate.Question
}

var _ ent.Mutation = (*QuestionMutation)(nil)

// questionOption allows management of the mutation configuration using functional options.
type questionOption func(*QuestionMutation)

// newQuestionMutation creates new mutation for the Question entity.
func newQuestionMutation(c config, op Op, opts ...questionOption) *QuestionMutation {
	m := &QuestionMutation{
		config:        c,
		op:            op,
		typ:           TypeQuestion,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQuestionID sets the ID field of the mutation.
func withQuestionID(id uuid.UUID) questionOption {
	return func(m *QuestionMutation) {
		var (
			err   error
			once  sync.Once
			value *Question
		)
		m.oldValue = func(ctx context.Context) (*Question, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Question.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQuestion sets the old Question of the mutation.
func withQuestion(node *Question) questionOption {
	return func(m *QuestionMutation) {
		m.oldValue = func(context.Context) (*Question, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QuestionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QuestionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Question entities.
func (m *QuestionMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *QuestionMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *QuestionMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Question.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *QuestionMutation) SetType(q question.Type) {
	m._type = &q
}

// GetType returns the value of the "type" field in the mutation.
func (m *QuestionMutation) GetType() (r question.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldType(ctx context.Context) (v question.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *QuestionMutation) ResetType() {
	m._type = nil
}

// SetBody sets the "body" field.
func (m *QuestionMutation) SetBody(s string) {
	m.body = &s
}

// Body returns the value of the "body" field in the mutation.
func (m *QuestionMutation) Body() (r string, exists bool) {
	v := m.body
	if v == nil {
		return
	}
	return *v, true
}

// OldBody returns the old "body" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldBody(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBody is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBody requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBody: %w", err)
	}
	return oldValue.Body, nil
}

// ResetBody resets all changes to the "body" field.
func (m *QuestionMutation) ResetBody() {
	m.body = nil
}

// SetOrder sets the "order" field.
func (m *QuestionMutation) SetOrder(i int) {
	m._order = &i
	m.add_order = nil
}

// Order returns the value of the "order" field in the mutation.
func (m *QuestionMutation) Order() (r int, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrder returns the old "order" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldOrder(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrder: %w", err)
	}
	return oldValue.Order, nil
}

// AddOrder adds i to the "order" field.
func (m *QuestionMutation) AddOrder(i int) {
	if m.add_order != nil {
		*m.add_order += i
	} else {
		m.add_order = &i
	}
}

// AddedOrder returns the value that was added to the "order" field in this mutation.
func (m *QuestionMutation) AddedOrder() (r int, exists bool) {
	v := m.add_order
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrder resets all changes to the "order" field.
func (m *QuestionMutation) ResetOrder() {
	m._order = nil
	m.add_order = nil
}

// SetQuestionnaireID sets the "questionnaire" edge to the Questionnaire entity by id.
func (m *QuestionMutation) SetQuestionnaireID(id uuid.UUID) {
	m.questionnaire = &id
}

// ClearQuestionnaire clears the "questionnaire" edge to the Questionnaire entity.
func (m *QuestionMutation) ClearQuestionnaire() {
	m.clearedquestionnaire = true
}

// QuestionnaireCleared reports if the "questionnaire" edge to the Questionnaire entity was cleared.
func (m *QuestionMutation) QuestionnaireCleared() bool {
	return m.clearedquestionnaire
}

// QuestionnaireID returns the "questionnaire" edge ID in the mutation.
func (m *QuestionMutation) QuestionnaireID() (id uuid.UUID, exists bool) {
	if m.questionnaire != nil {
		return *m.questionnaire, true
	}
	return
}

// QuestionnaireIDs returns the "questionnaire" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// QuestionnaireID instead. It exists only for internal usage by the builders.
func (m *QuestionMutation) QuestionnaireIDs() (ids []uuid.UUID) {
	if id := m.questionnaire; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetQuestionnaire resets all changes to the "questionnaire" edge.
func (m *QuestionMutation) ResetQuestionnaire() {
	m.questionnaire = nil
	m.clearedquestionnaire = false
}

// AddChoiceIDs adds the "choices" edge to the Choice entity by ids.
func (m *QuestionMutation) AddChoiceIDs(ids ...uuid.UUID) {
	if m.choices == nil {
		m.choices = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.choices[ids[i]] = struct{}{}
	}
}

// ClearChoices clears the "choices" edge to the Choice entity.
func (m *QuestionMutation) ClearChoices() {
	m.clearedchoices = true
}

// ChoicesCleared reports if the "choices" edge to the Choice entity was cleared.
func (m *QuestionMutation) ChoicesCleared() bool {
	return m.clearedchoices
}

// RemoveChoiceIDs removes the "choices" edge to the Choice entity by IDs.
func (m *QuestionMutation) RemoveChoiceIDs(ids ...uuid.UUID) {
	if m.removedchoices == nil {
		m.removedchoices = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.choices, ids[i])
		m.removedchoices[ids[i]] = struct{}{}
	}
}

// RemovedChoices returns the removed IDs of the "choices" edge to the Choice entity.
func (m *QuestionMutation) RemovedChoicesIDs() (ids []uuid.UUID) {
	for id := range m.removedchoices {
		ids = append(ids, id)
	}
	return
}

// ChoicesIDs returns the "choices" edge IDs in the mutation.
func (m *QuestionMutation) ChoicesIDs() (ids []uuid.UUID) {
	for id := range m.choices {
		ids = append(ids, id)
	}
	return
}

// ResetChoices resets all changes to the "choices" edge.
func (m *QuestionMutation) ResetChoices() {
	m.choices = nil
	m.clearedchoices = false
	m.removedchoices = nil
}

// AddAnswerIDs adds the "answers" edge to the Answer entity by ids.
func (m *QuestionMutation) AddAnswerIDs(ids ...uuid.UUID) {
	if m.answers == nil {
		m.answers = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.answers[ids[i]] = struct{}{}
	}
}

// ClearAnswers clears the "answers" edge to the Answer entity.
func (m *QuestionMutation) ClearAnswers() {
	m.clearedanswers = true
}

// AnswersCleared reports if the "answers" edge to the Answer entity was cleared.
func (m *QuestionMutation) AnswersCleared() bool {
	return m.clearedanswers
}

// RemoveAnswerIDs removes the "answers" edge to the Answer entity by IDs.
func (m *QuestionMutation) RemoveAnswerIDs(ids ...uuid.UUID) {
	if m.removedanswers == nil {
		m.removedanswers = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.answers, ids[i])
		m.removedanswers[ids[i]] = struct{}{}
	}
}

// RemovedAnswers returns the removed IDs of the "answers" edge to the Answer entity.
func (m *QuestionMutation) RemovedAnswersIDs() (ids []uuid.UUID) {
	for id := range m.removedanswers {
		ids = append(ids, id)
	}
	return
}

// AnswersIDs returns the "answers" edge IDs in the mutation.
func (m *QuestionMutation) AnswersIDs() (ids []uuid.UUID) {
	for id := range m.answers {
		ids = append(ids, id)
	}
	return
}

// ResetAnswers resets all changes to the "answers" edge.
func (m *QuestionMutation) ResetAnswers() {
	m.answers = nil
	m.clearedanswers = false
	m.removedanswers = nil
}

// Where appends a list predicates to the QuestionMutation builder.
func (m *QuestionMutation) Where(ps ...predicate.Question) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the QuestionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *QuestionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Question, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *QuestionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *QuestionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Question).
func (m *QuestionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *QuestionMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._type != nil {
		fields = append(fields, question.FieldType)
	}
	if m.body != nil {
		fields = append(fields, question.FieldBody)
	}
	if m._order != nil {
		fields = append(fields, question.FieldOrder)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *QuestionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case question.FieldType:
		return m.GetType()
	case question.FieldBody:
		return m.Body()
	case question.FieldOrder:
		return m.Order()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *QuestionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case question.FieldType:
		return m.OldType(ctx)
	case question.FieldBody:
		return m.OldBody(ctx)
	case question.FieldOrder:
		return m.OldOrder(ctx)
	}
	return nil, fmt.Errorf("unknown Question field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case question.FieldType:
		v, ok := value.(question.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case question.FieldBody:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBody(v)
		return nil
	case question.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrder(v)
		return nil
	}
	return fmt.Errorf("unknown Question field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *QuestionMutation) AddedFields() []string {
	var fields []string
	if m.add_order != nil {
		fields = append(fields, question.FieldOrder)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *QuestionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case question.FieldOrder:
		return m.AddedOrder()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case question.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrder(v)
		return nil
	}
	return fmt.Errorf("unknown Question numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *QuestionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *QuestionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *QuestionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Question nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *QuestionMutation) ResetField(name string) error {
	switch name {
	case question.FieldType:
		m.ResetType()
		return nil
	case question.FieldBody:
		m.ResetBody()
		return nil
	case question.FieldOrder:
		m.ResetOrder()
		return nil
	}
	return fmt.Errorf("unknown Question field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *QuestionMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.questionnaire != nil {
		edges = append(edges, question.EdgeQuestionnaire)
	}
	if m.choices != nil {
		edges = append(edges, question.EdgeChoices)
	}
	if m.answers != nil {
		edges = append(edges, question.EdgeAnswers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *QuestionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case question.EdgeQuestionnaire:
		if id := m.questionnaire; id != nil {
			return []ent.Value{*id}
		}
	case question.EdgeChoices:
		ids := make([]ent.Value, 0, len(m.choices))
		for id := range m.choices {
			ids = append(ids, id)
		}
		return ids
	case question.EdgeAnswers:
		ids := make([]ent.Value, 0, len(m.answers))
		for id := range m.answers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *QuestionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedchoices != nil {
		edges = append(edges, question.EdgeChoices)
	}
	if m.removedanswers != nil {
		edges = append(edges, question.EdgeAnswers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *QuestionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case question.EdgeChoices:
		ids := make([]ent.Value, 0, len(m.removedchoices))
		for id := range m.removedchoices {
			ids = append(ids, id)
		}
		return ids
	case question.EdgeAnswers:
		ids := make([]ent.Value, 0, len(m.removedanswers))
		for id := range m.removedanswers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *QuestionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedquestionnaire {
		edges = append(edges, question.EdgeQuestionnaire)
	}
	if m.clearedchoices {
		edges = append(edges, question.EdgeChoices)
	}
	if m.clearedanswers {
		edges = append(edges, question.EdgeAnswers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *QuestionMutation) EdgeCleared(name string) bool {
	switch name {
	case question.EdgeQuestionnaire:
		return m.clearedquestionnaire
	case question.EdgeChoices:
		return m.clearedchoices
	case question.EdgeAnswers:
		return m.clearedanswers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *QuestionMutation) ClearEdge(name string) error {
	switch name {
	case question.EdgeQuestionnaire:
		m.ClearQuestionnaire()
		return nil
	}
	return fmt.Errorf("unknown Question unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *QuestionMutation) ResetEdge(name string) error {
	switch name {
	case question.EdgeQuestionnaire:
		m.ResetQuestionnaire()
		return nil
	case question.EdgeChoices:
		m.ResetChoices()
		return nil
	case question.EdgeAnswers:
		m.ResetAnswers()
		return nil
	}
	return fmt.Errorf("unknown Question edge %s", name)
}

// QuestionnaireMutation represents an operation that mutates the Questionnaire nodes in the graph.
type QuestionnaireMutation struct {
	config
	op                             Op
	typ                            string
	id                             *uuid.UUID
	name                           *string
	created_at                     *time.Time
	clearedFields                  map[string]struct{}
	questions                      map[uuid.UUID]struct{}
	removedquestions               map[uuid.UUID]struct{}
	clearedquestions               bool
	questionnaire_responses        map[uuid.UUID]struct{}
	removedquestionnaire_responses map[uuid.UUID]struct{}
	clearedquestionnaire_responses bool
	done                           bool
	oldValue                       func(context.Context) (*Questionnaire, error)
	predicates                     []predicate.Questionnaire
}

var _ ent.Mutation = (*QuestionnaireMutation)(nil)

// questionnaireOption allows management of the mutation configuration using functional options.
type questionnaireOption func(*QuestionnaireMutation)

// newQuestionnaireMutation creates new mutation for the Questionnaire entity.
func newQuestionnaireMutation(c config, op Op, opts ...questionnaireOption) *QuestionnaireMutation {
	m := &QuestionnaireMutation{
		config:        c,
		op:            op,
		typ:           TypeQuestionnaire,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQuestionnaireID sets the ID field of the mutation.
func withQuestionnaireID(id uuid.UUID) questionnaireOption {
	return func(m *QuestionnaireMutation) {
		var (
			err   error
			once  sync.Once
			value *Questionnaire
		)
		m.oldValue = func(ctx context.Context) (*Questionnaire, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Questionnaire.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQuestionnaire sets the old Questionnaire of the mutation.
func withQuestionnaire(node *Questionnaire) questionnaireOption {
	return func(m *QuestionnaireMutation) {
		m.oldValue = func(context.Context) (*Questionnaire, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QuestionnaireMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QuestionnaireMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Questionnaire entities.
func (m *QuestionnaireMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *QuestionnaireMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *QuestionnaireMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Questionnaire.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *QuestionnaireMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *QuestionnaireMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Questionnaire entity.
// If the Questionnaire object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionnaireMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *QuestionnaireMutation) ResetName() {
	m.name = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *QuestionnaireMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *QuestionnaireMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Questionnaire entity.
// If the Questionnaire object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionnaireMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *QuestionnaireMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddQuestionIDs adds the "questions" edge to the Question entity by ids.
func (m *QuestionnaireMutation) AddQuestionIDs(ids ...uuid.UUID) {
	if m.questions == nil {
		m.questions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.questions[ids[i]] = struct{}{}
	}
}

// ClearQuestions clears the "questions" edge to the Question entity.
func (m *QuestionnaireMutation) ClearQuestions() {
	m.clearedquestions = true
}

// QuestionsCleared reports if the "questions" edge to the Question entity was cleared.
func (m *QuestionnaireMutation) QuestionsCleared() bool {
	return m.clearedquestions
}

// RemoveQuestionIDs removes the "questions" edge to the Question entity by IDs.
func (m *QuestionnaireMutation) RemoveQuestionIDs(ids ...uuid.UUID) {
	if m.removedquestions == nil {
		m.removedquestions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.questions, ids[i])
		m.removedquestions[ids[i]] = struct{}{}
	}
}

// RemovedQuestions returns the removed IDs of the "questions" edge to the Question entity.
func (m *QuestionnaireMutation) RemovedQuestionsIDs() (ids []uuid.UUID) {
	for id := range m.removedquestions {
		ids = append(ids, id)
	}
	return
}

// QuestionsIDs returns the "questions" edge IDs in the mutation.
func (m *QuestionnaireMutation) QuestionsIDs() (ids []uuid.UUID) {
	for id := range m.questions {
		ids = append(ids, id)
	}
	return
}

// ResetQuestions resets all changes to the "questions" edge.
func (m *QuestionnaireMutation) ResetQuestions() {
	m.questions = nil
	m.clearedquestions = false
	m.removedquestions = nil
}

// AddQuestionnaireResponseIDs adds the "questionnaire_responses" edge to the QuestionnaireResponse entity by ids.
func (m *QuestionnaireMutation) AddQuestionnaireResponseIDs(ids ...uuid.UUID) {
	if m.questionnaire_responses == nil {
		m.questionnaire_responses = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.questionnaire_responses[ids[i]] = struct{}{}
	}
}

// ClearQuestionnaireResponses clears the "questionnaire_responses" edge to the QuestionnaireResponse entity.
func (m *QuestionnaireMutation) ClearQuestionnaireResponses() {
	m.clearedquestionnaire_responses = true
}

// QuestionnaireResponsesCleared reports if the "questionnaire_responses" edge to the QuestionnaireResponse entity was cleared.
func (m *QuestionnaireMutation) QuestionnaireResponsesCleared() bool {
	return m.clearedquestionnaire_responses
}

// RemoveQuestionnaireResponseIDs removes the "questionnaire_responses" edge to the QuestionnaireResponse entity by IDs.
func (m *QuestionnaireMutation) RemoveQuestionnaireResponseIDs(ids ...uuid.UUID) {
	if m.removedquestionnaire_responses == nil {
		m.removedquestionnaire_responses = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.questionnaire_responses, ids[i])
		m.removedquestionnaire_responses[ids[i]] = struct{}{}
	}
}

// RemovedQuestionnaireResponses returns the removed IDs of the "questionnaire_responses" edge to the QuestionnaireResponse entity.
func (m *QuestionnaireMutation) RemovedQuestionnaireResponsesIDs() (ids []uuid.UUID) {
	for id := range m.removedquestionnaire_responses {
		ids = append(ids, id)
	}
	return
}

// QuestionnaireResponsesIDs returns the "questionnaire_responses" edge IDs in the mutation.
func (m *QuestionnaireMutation) QuestionnaireResponsesIDs() (ids []uuid.UUID) {
	for id := range m.questionnaire_responses {
		ids = append(ids, id)
	}
	return
}

// ResetQuestionnaireResponses resets all changes to the "questionnaire_responses" edge.
func (m *QuestionnaireMutation) ResetQuestionnaireResponses() {
	m.questionnaire_responses = nil
	m.clearedquestionnaire_responses = false
	m.removedquestionnaire_responses = nil
}

// Where appends a list predicates to the QuestionnaireMutation builder.
func (m *QuestionnaireMutation) Where(ps ...predicate.Questionnaire) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the QuestionnaireMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *QuestionnaireMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Questionnaire, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *QuestionnaireMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *QuestionnaireMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Questionnaire).
func (m *QuestionnaireMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *QuestionnaireMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, questionnaire.FieldName)
	}
	if m.created_at != nil {
		fields = append(fields, questionnaire.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *QuestionnaireMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case questionnaire.FieldName:
		return m.Name()
	case questionnaire.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *QuestionnaireMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case questionnaire.FieldName:
		return m.OldName(ctx)
	case questionnaire.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Questionnaire field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionnaireMutation) SetField(name string, value ent.Value) error {
	switch name {
	case questionnaire.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case questionnaire.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Questionnaire field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *QuestionnaireMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *QuestionnaireMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionnaireMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Questionnaire numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *QuestionnaireMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *QuestionnaireMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *QuestionnaireMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Questionnaire nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *QuestionnaireMutation) ResetField(name string) error {
	switch name {
	case questionnaire.FieldName:
		m.ResetName()
		return nil
	case questionnaire.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Questionnaire field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *QuestionnaireMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.questions != nil {
		edges = append(edges, questionnaire.EdgeQuestions)
	}
	if m.questionnaire_responses != nil {
		edges = append(edges, questionnaire.EdgeQuestionnaireResponses)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *QuestionnaireMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case questionnaire.EdgeQuestions:
		ids := make([]ent.Value, 0, len(m.questions))
		for id := range m.questions {
			ids = append(ids, id)
		}
		return ids
	case questionnaire.EdgeQuestionnaireResponses:
		ids := make([]ent.Value, 0, len(m.questionnaire_responses))
		for id := range m.questionnaire_responses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *QuestionnaireMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedquestions != nil {
		edges = append(edges, questionnaire.EdgeQuestions)
	}
	if m.removedquestionnaire_responses != nil {
		edges = append(edges, questionnaire.EdgeQuestionnaireResponses)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *QuestionnaireMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case questionnaire.EdgeQuestions:
		ids := make([]ent.Value, 0, len(m.removedquestions))
		for id := range m.removedquestions {
			ids = append(ids, id)
		}
		return ids
	case questionnaire.EdgeQuestionnaireResponses:
		ids := make([]ent.Value, 0, len(m.removedquestionnaire_responses))
		for id := range m.removedquestionnaire_responses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *QuestionnaireMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedquestions {
		edges = append(edges, questionnaire.EdgeQuestions)
	}
	if m.clearedquestionnaire_responses {
		edges = append(edges, questionnaire.EdgeQuestionnaireResponses)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *QuestionnaireMutation) EdgeCleared(name string) bool {
	switch name {
	case questionnaire.EdgeQuestions:
		return m.clearedquestions
	case questionnaire.EdgeQuestionnaireResponses:
		return m.clearedquestionnaire_responses
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *QuestionnaireMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Questionnaire unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *QuestionnaireMutation) ResetEdge(name string) error {
	switch name {
	case questionnaire.EdgeQuestions:
		m.ResetQuestions()
		return nil
	case questionnaire.EdgeQuestionnaireResponses:
		m.ResetQuestionnaireResponses()
		return nil
	}
	return fmt.Errorf("unknown Questionnaire edge %s", name)
}

// QuestionnaireResponseMutation represents an operation that mutates the QuestionnaireResponse nodes in the graph.
type QuestionnaireResponseMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	created_at           *time.Time
	clearedFields        map[string]struct{}
	user                 *string
	cleareduser          bool
	questionnaire        *uuid.UUID
	clearedquestionnaire bool
	answers              map[uuid.UUID]struct{}
	removedanswers       map[uuid.UUID]struct{}
	clearedanswers       bool
	done                 bool
	oldValue             func(context.Context) (*QuestionnaireResponse, error)
	predicates           []predicate.QuestionnaireResponse
}

var _ ent.Mutation = (*QuestionnaireResponseMutation)(nil)

// questionnaireresponseOption allows management of the mutation configuration using functional options.
type questionnaireresponseOption func(*QuestionnaireResponseMutation)

// newQuestionnaireResponseMutation creates new mutation for the QuestionnaireResponse entity.
func newQuestionnaireResponseMutation(c config, op Op, opts ...questionnaireresponseOption) *QuestionnaireResponseMutation {
	m := &QuestionnaireResponseMutation{
		config:        c,
		op:            op,
		typ:           TypeQuestionnaireResponse,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQuestionnaireResponseID sets the ID field of the mutation.
func withQuestionnaireResponseID(id uuid.UUID) questionnaireresponseOption {
	return func(m *QuestionnaireResponseMutation) {
		var (
			err   error
			once  sync.Once
			value *QuestionnaireResponse
		)
		m.oldValue = func(ctx context.Context) (*QuestionnaireResponse, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().QuestionnaireResponse.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQuestionnaireResponse sets the old QuestionnaireResponse of the mutation.
func withQuestionnaireResponse(node *QuestionnaireResponse) questionnaireresponseOption {
	return func(m *QuestionnaireResponseMutation) {
		m.oldValue = func(context.Context) (*QuestionnaireResponse, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QuestionnaireResponseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QuestionnaireResponseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of QuestionnaireResponse entities.
func (m *QuestionnaireResponseMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *QuestionnaireResponseMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *QuestionnaireResponseMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().QuestionnaireResponse.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *QuestionnaireResponseMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *QuestionnaireResponseMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the QuestionnaireResponse entity.
// If the QuestionnaireResponse object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionnaireResponseMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *QuestionnaireResponseMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *QuestionnaireResponseMutation) SetUserID(id string) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *QuestionnaireResponseMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *QuestionnaireResponseMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *QuestionnaireResponseMutation) UserID() (id string, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *QuestionnaireResponseMutation) UserIDs() (ids []string) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *QuestionnaireResponseMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetQuestionnaireID sets the "questionnaire" edge to the Questionnaire entity by id.
func (m *QuestionnaireResponseMutation) SetQuestionnaireID(id uuid.UUID) {
	m.questionnaire = &id
}

// ClearQuestionnaire clears the "questionnaire" edge to the Questionnaire entity.
func (m *QuestionnaireResponseMutation) ClearQuestionnaire() {
	m.clearedquestionnaire = true
}

// QuestionnaireCleared reports if the "questionnaire" edge to the Questionnaire entity was cleared.
func (m *QuestionnaireResponseMutation) QuestionnaireCleared() bool {
	return m.clearedquestionnaire
}

// QuestionnaireID returns the "questionnaire" edge ID in the mutation.
func (m *QuestionnaireResponseMutation) QuestionnaireID() (id uuid.UUID, exists bool) {
	if m.questionnaire != nil {
		return *m.questionnaire, true
	}
	return
}

// QuestionnaireIDs returns the "questionnaire" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// QuestionnaireID instead. It exists only for internal usage by the builders.
func (m *QuestionnaireResponseMutation) QuestionnaireIDs() (ids []uuid.UUID) {
	if id := m.questionnaire; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetQuestionnaire resets all changes to the "questionnaire" edge.
func (m *QuestionnaireResponseMutation) ResetQuestionnaire() {
	m.questionnaire = nil
	m.clearedquestionnaire = false
}

// AddAnswerIDs adds the "answers" edge to the Answer entity by ids.
func (m *QuestionnaireResponseMutation) AddAnswerIDs(ids ...uuid.UUID) {
	if m.answers == nil {
		m.answers = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.answers[ids[i]] = struct{}{}
	}
}

// ClearAnswers clears the "answers" edge to the Answer entity.
func (m *QuestionnaireResponseMutation) ClearAnswers() {
	m.clearedanswers = true
}

// AnswersCleared reports if the "answers" edge to the Answer entity was cleared.
func (m *QuestionnaireResponseMutation) AnswersCleared() bool {
	return m.clearedanswers
}

// RemoveAnswerIDs removes the "answers" edge to the Answer entity by IDs.
func (m *QuestionnaireResponseMutation) RemoveAnswerIDs(ids ...uuid.UUID) {
	if m.removedanswers == nil {
		m.removedanswers = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.answers, ids[i])
		m.removedanswers[ids[i]] = struct{}{}
	}
}

// RemovedAnswers returns the removed IDs of the "answers" edge to the Answer entity.
func (m *QuestionnaireResponseMutation) RemovedAnswersIDs() (ids []uuid.UUID) {
	for id := range m.removedanswers {
		ids = append(ids, id)
	}
	return
}

// AnswersIDs returns the "answers" edge IDs in the mutation.
func (m *QuestionnaireResponseMutation) AnswersIDs() (ids []uuid.UUID) {
	for id := range m.answers {
		ids = append(ids, id)
	}
	return
}

// ResetAnswers resets all changes to the "answers" edge.
func (m *QuestionnaireResponseMutation) ResetAnswers() {
	m.answers = nil
	m.clearedanswers = false
	m.removedanswers = nil
}

// Where appends a list predicates to the QuestionnaireResponseMutation builder.
func (m *QuestionnaireResponseMutation) Where(ps ...predicate.QuestionnaireResponse) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the QuestionnaireResponseMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *QuestionnaireResponseMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.QuestionnaireResponse, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *QuestionnaireResponseMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *QuestionnaireResponseMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (QuestionnaireResponse).
func (m *QuestionnaireResponseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *QuestionnaireResponseMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.created_at != nil {
		fields = append(fields, questionnaireresponse.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *QuestionnaireResponseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case questionnaireresponse.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *QuestionnaireResponseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case questionnaireresponse.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown QuestionnaireResponse field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionnaireResponseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case questionnaireresponse.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown QuestionnaireResponse field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *QuestionnaireResponseMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *QuestionnaireResponseMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionnaireResponseMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown QuestionnaireResponse numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *QuestionnaireResponseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *QuestionnaireResponseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *QuestionnaireResponseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown QuestionnaireResponse nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *QuestionnaireResponseMutation) ResetField(name string) error {
	switch name {
	case questionnaireresponse.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown QuestionnaireResponse field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *QuestionnaireResponseMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.user != nil {
		edges = append(edges, questionnaireresponse.EdgeUser)
	}
	if m.questionnaire != nil {
		edges = append(edges, questionnaireresponse.EdgeQuestionnaire)
	}
	if m.answers != nil {
		edges = append(edges, questionnaireresponse.EdgeAnswers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *QuestionnaireResponseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case questionnaireresponse.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case questionnaireresponse.EdgeQuestionnaire:
		if id := m.questionnaire; id != nil {
			return []ent.Value{*id}
		}
	case questionnaireresponse.EdgeAnswers:
		ids := make([]ent.Value, 0, len(m.answers))
		for id := range m.answers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *QuestionnaireResponseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedanswers != nil {
		edges = append(edges, questionnaireresponse.EdgeAnswers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *QuestionnaireResponseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case questionnaireresponse.EdgeAnswers:
		ids := make([]ent.Value, 0, len(m.removedanswers))
		for id := range m.removedanswers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *QuestionnaireResponseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareduser {
		edges = append(edges, questionnaireresponse.EdgeUser)
	}
	if m.clearedquestionnaire {
		edges = append(edges, questionnaireresponse.EdgeQuestionnaire)
	}
	if m.clearedanswers {
		edges = append(edges, questionnaireresponse.EdgeAnswers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *QuestionnaireResponseMutation) EdgeCleared(name string) bool {
	switch name {
	case questionnaireresponse.EdgeUser:
		return m.cleareduser
	case questionnaireresponse.EdgeQuestionnaire:
		return m.clearedquestionnaire
	case questionnaireresponse.EdgeAnswers:
		return m.clearedanswers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *QuestionnaireResponseMutation) ClearEdge(name string) error {
	switch name {
	case questionnaireresponse.EdgeUser:
		m.ClearUser()
		return nil
	case questionnaireresponse.EdgeQuestionnaire:
		m.ClearQuestionnaire()
		return nil
	}
	return fmt.Errorf("unknown QuestionnaireResponse unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *QuestionnaireResponseMutation) ResetEdge(name string) error {
	switch name {
	case questionnaireresponse.EdgeUser:
		m.ResetUser()
		return nil
	case questionnaireresponse.EdgeQuestionnaire:
		m.ResetQuestionnaire()
		return nil
	case questionnaireresponse.EdgeAnswers:
		m.ResetAnswers()
		return nil
	}
	return fmt.Errorf("unknown QuestionnaireResponse edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                              Op
	typ                             string
	id                              *string
	created_at                      *time.Time
	updated_at                      *time.Time
	birth_year                      *int
	addbirth_year                   *int
	height                          *float64
	addheight                       *float64
	weight                          *float64
	addweight                       *float64
	gender                          *user.Gender
	education_level                 *user.EducationLevel
	occupation                      *user.Occupation
	marriage                        *user.Marriage
	medical_history                 *user.MedicalHistory
	medication_status               *user.MedicationStatus
	demented_among_direct_relatives *bool
	head_injury_experience          *bool
	ear_condition                   *user.EarCondition
	eyesight_condition              *user.EyesightCondition
	smoking_habit                   *user.SmokingHabit
	clearedFields                   map[string]struct{}
	questionnaire_responses         map[uuid.UUID]struct{}
	removedquestionnaire_responses  map[uuid.UUID]struct{}
	clearedquestionnaire_responses  bool
	notifications                   map[uuid.UUID]struct{}
	removednotifications            map[uuid.UUID]struct{}
	clearednotifications            bool
	prices                          map[uuid.UUID]struct{}
	removedprices                   map[uuid.UUID]struct{}
	clearedprices                   bool
	mycards                         map[string]struct{}
	removedmycards                  map[string]struct{}
	clearedmycards                  bool
	done                            bool
	oldValue                        func(context.Context) (*User, error)
	predicates                      []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id string) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetBirthYear sets the "birth_year" field.
func (m *UserMutation) SetBirthYear(i int) {
	m.birth_year = &i
	m.addbirth_year = nil
}

// BirthYear returns the value of the "birth_year" field in the mutation.
func (m *UserMutation) BirthYear() (r int, exists bool) {
	v := m.birth_year
	if v == nil {
		return
	}
	return *v, true
}

// OldBirthYear returns the old "birth_year" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldBirthYear(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBirthYear is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBirthYear requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBirthYear: %w", err)
	}
	return oldValue.BirthYear, nil
}

// AddBirthYear adds i to the "birth_year" field.
func (m *UserMutation) AddBirthYear(i int) {
	if m.addbirth_year != nil {
		*m.addbirth_year += i
	} else {
		m.addbirth_year = &i
	}
}

// AddedBirthYear returns the value that was added to the "birth_year" field in this mutation.
func (m *UserMutation) AddedBirthYear() (r int, exists bool) {
	v := m.addbirth_year
	if v == nil {
		return
	}
	return *v, true
}

// ResetBirthYear resets all changes to the "birth_year" field.
func (m *UserMutation) ResetBirthYear() {
	m.birth_year = nil
	m.addbirth_year = nil
}

// SetHeight sets the "height" field.
func (m *UserMutation) SetHeight(f float64) {
	m.height = &f
	m.addheight = nil
}

// Height returns the value of the "height" field in the mutation.
func (m *UserMutation) Height() (r float64, exists bool) {
	v := m.height
	if v == nil {
		return
	}
	return *v, true
}

// OldHeight returns the old "height" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldHeight(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeight: %w", err)
	}
	return oldValue.Height, nil
}

// AddHeight adds f to the "height" field.
func (m *UserMutation) AddHeight(f float64) {
	if m.addheight != nil {
		*m.addheight += f
	} else {
		m.addheight = &f
	}
}

// AddedHeight returns the value that was added to the "height" field in this mutation.
func (m *UserMutation) AddedHeight() (r float64, exists bool) {
	v := m.addheight
	if v == nil {
		return
	}
	return *v, true
}

// ResetHeight resets all changes to the "height" field.
func (m *UserMutation) ResetHeight() {
	m.height = nil
	m.addheight = nil
}

// SetWeight sets the "weight" field.
func (m *UserMutation) SetWeight(f float64) {
	m.weight = &f
	m.addweight = nil
}

// Weight returns the value of the "weight" field in the mutation.
func (m *UserMutation) Weight() (r float64, exists bool) {
	v := m.weight
	if v == nil {
		return
	}
	return *v, true
}

// OldWeight returns the old "weight" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldWeight(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeight: %w", err)
	}
	return oldValue.Weight, nil
}

// AddWeight adds f to the "weight" field.
func (m *UserMutation) AddWeight(f float64) {
	if m.addweight != nil {
		*m.addweight += f
	} else {
		m.addweight = &f
	}
}

// AddedWeight returns the value that was added to the "weight" field in this mutation.
func (m *UserMutation) AddedWeight() (r float64, exists bool) {
	v := m.addweight
	if v == nil {
		return
	}
	return *v, true
}

// ResetWeight resets all changes to the "weight" field.
func (m *UserMutation) ResetWeight() {
	m.weight = nil
	m.addweight = nil
}

// SetGender sets the "gender" field.
func (m *UserMutation) SetGender(u user.Gender) {
	m.gender = &u
}

// Gender returns the value of the "gender" field in the mutation.
func (m *UserMutation) Gender() (r user.Gender, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old "gender" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldGender(ctx context.Context) (v user.Gender, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// ResetGender resets all changes to the "gender" field.
func (m *UserMutation) ResetGender() {
	m.gender = nil
}

// SetEducationLevel sets the "education_level" field.
func (m *UserMutation) SetEducationLevel(ul user.EducationLevel) {
	m.education_level = &ul
}

// EducationLevel returns the value of the "education_level" field in the mutation.
func (m *UserMutation) EducationLevel() (r user.EducationLevel, exists bool) {
	v := m.education_level
	if v == nil {
		return
	}
	return *v, true
}

// OldEducationLevel returns the old "education_level" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEducationLevel(ctx context.Context) (v user.EducationLevel, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEducationLevel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEducationLevel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEducationLevel: %w", err)
	}
	return oldValue.EducationLevel, nil
}

// ResetEducationLevel resets all changes to the "education_level" field.
func (m *UserMutation) ResetEducationLevel() {
	m.education_level = nil
}

// SetOccupation sets the "occupation" field.
func (m *UserMutation) SetOccupation(u user.Occupation) {
	m.occupation = &u
}

// Occupation returns the value of the "occupation" field in the mutation.
func (m *UserMutation) Occupation() (r user.Occupation, exists bool) {
	v := m.occupation
	if v == nil {
		return
	}
	return *v, true
}

// OldOccupation returns the old "occupation" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldOccupation(ctx context.Context) (v user.Occupation, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOccupation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOccupation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOccupation: %w", err)
	}
	return oldValue.Occupation, nil
}

// ResetOccupation resets all changes to the "occupation" field.
func (m *UserMutation) ResetOccupation() {
	m.occupation = nil
}

// SetMarriage sets the "marriage" field.
func (m *UserMutation) SetMarriage(u user.Marriage) {
	m.marriage = &u
}

// Marriage returns the value of the "marriage" field in the mutation.
func (m *UserMutation) Marriage() (r user.Marriage, exists bool) {
	v := m.marriage
	if v == nil {
		return
	}
	return *v, true
}

// OldMarriage returns the old "marriage" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldMarriage(ctx context.Context) (v user.Marriage, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMarriage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMarriage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMarriage: %w", err)
	}
	return oldValue.Marriage, nil
}

// ResetMarriage resets all changes to the "marriage" field.
func (m *UserMutation) ResetMarriage() {
	m.marriage = nil
}

// SetMedicalHistory sets the "medical_history" field.
func (m *UserMutation) SetMedicalHistory(uh user.MedicalHistory) {
	m.medical_history = &uh
}

// MedicalHistory returns the value of the "medical_history" field in the mutation.
func (m *UserMutation) MedicalHistory() (r user.MedicalHistory, exists bool) {
	v := m.medical_history
	if v == nil {
		return
	}
	return *v, true
}

// OldMedicalHistory returns the old "medical_history" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldMedicalHistory(ctx context.Context) (v user.MedicalHistory, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMedicalHistory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMedicalHistory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMedicalHistory: %w", err)
	}
	return oldValue.MedicalHistory, nil
}

// ResetMedicalHistory resets all changes to the "medical_history" field.
func (m *UserMutation) ResetMedicalHistory() {
	m.medical_history = nil
}

// SetMedicationStatus sets the "medication_status" field.
func (m *UserMutation) SetMedicationStatus(us user.MedicationStatus) {
	m.medication_status = &us
}

// MedicationStatus returns the value of the "medication_status" field in the mutation.
func (m *UserMutation) MedicationStatus() (r user.MedicationStatus, exists bool) {
	v := m.medication_status
	if v == nil {
		return
	}
	return *v, true
}

// OldMedicationStatus returns the old "medication_status" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldMedicationStatus(ctx context.Context) (v user.MedicationStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMedicationStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMedicationStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMedicationStatus: %w", err)
	}
	return oldValue.MedicationStatus, nil
}

// ResetMedicationStatus resets all changes to the "medication_status" field.
func (m *UserMutation) ResetMedicationStatus() {
	m.medication_status = nil
}

// SetDementedAmongDirectRelatives sets the "demented_among_direct_relatives" field.
func (m *UserMutation) SetDementedAmongDirectRelatives(b bool) {
	m.demented_among_direct_relatives = &b
}

// DementedAmongDirectRelatives returns the value of the "demented_among_direct_relatives" field in the mutation.
func (m *UserMutation) DementedAmongDirectRelatives() (r bool, exists bool) {
	v := m.demented_among_direct_relatives
	if v == nil {
		return
	}
	return *v, true
}

// OldDementedAmongDirectRelatives returns the old "demented_among_direct_relatives" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDementedAmongDirectRelatives(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDementedAmongDirectRelatives is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDementedAmongDirectRelatives requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDementedAmongDirectRelatives: %w", err)
	}
	return oldValue.DementedAmongDirectRelatives, nil
}

// ResetDementedAmongDirectRelatives resets all changes to the "demented_among_direct_relatives" field.
func (m *UserMutation) ResetDementedAmongDirectRelatives() {
	m.demented_among_direct_relatives = nil
}

// SetHeadInjuryExperience sets the "head_injury_experience" field.
func (m *UserMutation) SetHeadInjuryExperience(b bool) {
	m.head_injury_experience = &b
}

// HeadInjuryExperience returns the value of the "head_injury_experience" field in the mutation.
func (m *UserMutation) HeadInjuryExperience() (r bool, exists bool) {
	v := m.head_injury_experience
	if v == nil {
		return
	}
	return *v, true
}

// OldHeadInjuryExperience returns the old "head_injury_experience" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldHeadInjuryExperience(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHeadInjuryExperience is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHeadInjuryExperience requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeadInjuryExperience: %w", err)
	}
	return oldValue.HeadInjuryExperience, nil
}

// ResetHeadInjuryExperience resets all changes to the "head_injury_experience" field.
func (m *UserMutation) ResetHeadInjuryExperience() {
	m.head_injury_experience = nil
}

// SetEarCondition sets the "ear_condition" field.
func (m *UserMutation) SetEarCondition(uc user.EarCondition) {
	m.ear_condition = &uc
}

// EarCondition returns the value of the "ear_condition" field in the mutation.
func (m *UserMutation) EarCondition() (r user.EarCondition, exists bool) {
	v := m.ear_condition
	if v == nil {
		return
	}
	return *v, true
}

// OldEarCondition returns the old "ear_condition" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEarCondition(ctx context.Context) (v user.EarCondition, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEarCondition is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEarCondition requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEarCondition: %w", err)
	}
	return oldValue.EarCondition, nil
}

// ResetEarCondition resets all changes to the "ear_condition" field.
func (m *UserMutation) ResetEarCondition() {
	m.ear_condition = nil
}

// SetEyesightCondition sets the "eyesight_condition" field.
func (m *UserMutation) SetEyesightCondition(uc user.EyesightCondition) {
	m.eyesight_condition = &uc
}

// EyesightCondition returns the value of the "eyesight_condition" field in the mutation.
func (m *UserMutation) EyesightCondition() (r user.EyesightCondition, exists bool) {
	v := m.eyesight_condition
	if v == nil {
		return
	}
	return *v, true
}

// OldEyesightCondition returns the old "eyesight_condition" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEyesightCondition(ctx context.Context) (v user.EyesightCondition, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEyesightCondition is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEyesightCondition requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEyesightCondition: %w", err)
	}
	return oldValue.EyesightCondition, nil
}

// ResetEyesightCondition resets all changes to the "eyesight_condition" field.
func (m *UserMutation) ResetEyesightCondition() {
	m.eyesight_condition = nil
}

// SetSmokingHabit sets the "smoking_habit" field.
func (m *UserMutation) SetSmokingHabit(uh user.SmokingHabit) {
	m.smoking_habit = &uh
}

// SmokingHabit returns the value of the "smoking_habit" field in the mutation.
func (m *UserMutation) SmokingHabit() (r user.SmokingHabit, exists bool) {
	v := m.smoking_habit
	if v == nil {
		return
	}
	return *v, true
}

// OldSmokingHabit returns the old "smoking_habit" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldSmokingHabit(ctx context.Context) (v user.SmokingHabit, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSmokingHabit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSmokingHabit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSmokingHabit: %w", err)
	}
	return oldValue.SmokingHabit, nil
}

// ResetSmokingHabit resets all changes to the "smoking_habit" field.
func (m *UserMutation) ResetSmokingHabit() {
	m.smoking_habit = nil
}

// AddQuestionnaireResponseIDs adds the "questionnaire_responses" edge to the QuestionnaireResponse entity by ids.
func (m *UserMutation) AddQuestionnaireResponseIDs(ids ...uuid.UUID) {
	if m.questionnaire_responses == nil {
		m.questionnaire_responses = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.questionnaire_responses[ids[i]] = struct{}{}
	}
}

// ClearQuestionnaireResponses clears the "questionnaire_responses" edge to the QuestionnaireResponse entity.
func (m *UserMutation) ClearQuestionnaireResponses() {
	m.clearedquestionnaire_responses = true
}

// QuestionnaireResponsesCleared reports if the "questionnaire_responses" edge to the QuestionnaireResponse entity was cleared.
func (m *UserMutation) QuestionnaireResponsesCleared() bool {
	return m.clearedquestionnaire_responses
}

// RemoveQuestionnaireResponseIDs removes the "questionnaire_responses" edge to the QuestionnaireResponse entity by IDs.
func (m *UserMutation) RemoveQuestionnaireResponseIDs(ids ...uuid.UUID) {
	if m.removedquestionnaire_responses == nil {
		m.removedquestionnaire_responses = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.questionnaire_responses, ids[i])
		m.removedquestionnaire_responses[ids[i]] = struct{}{}
	}
}

// RemovedQuestionnaireResponses returns the removed IDs of the "questionnaire_responses" edge to the QuestionnaireResponse entity.
func (m *UserMutation) RemovedQuestionnaireResponsesIDs() (ids []uuid.UUID) {
	for id := range m.removedquestionnaire_responses {
		ids = append(ids, id)
	}
	return
}

// QuestionnaireResponsesIDs returns the "questionnaire_responses" edge IDs in the mutation.
func (m *UserMutation) QuestionnaireResponsesIDs() (ids []uuid.UUID) {
	for id := range m.questionnaire_responses {
		ids = append(ids, id)
	}
	return
}

// ResetQuestionnaireResponses resets all changes to the "questionnaire_responses" edge.
func (m *UserMutation) ResetQuestionnaireResponses() {
	m.questionnaire_responses = nil
	m.clearedquestionnaire_responses = false
	m.removedquestionnaire_responses = nil
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by ids.
func (m *UserMutation) AddNotificationIDs(ids ...uuid.UUID) {
	if m.notifications == nil {
		m.notifications = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.notifications[ids[i]] = struct{}{}
	}
}

// ClearNotifications clears the "notifications" edge to the Notification entity.
func (m *UserMutation) ClearNotifications() {
	m.clearednotifications = true
}

// NotificationsCleared reports if the "notifications" edge to the Notification entity was cleared.
func (m *UserMutation) NotificationsCleared() bool {
	return m.clearednotifications
}

// RemoveNotificationIDs removes the "notifications" edge to the Notification entity by IDs.
func (m *UserMutation) RemoveNotificationIDs(ids ...uuid.UUID) {
	if m.removednotifications == nil {
		m.removednotifications = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.notifications, ids[i])
		m.removednotifications[ids[i]] = struct{}{}
	}
}

// RemovedNotifications returns the removed IDs of the "notifications" edge to the Notification entity.
func (m *UserMutation) RemovedNotificationsIDs() (ids []uuid.UUID) {
	for id := range m.removednotifications {
		ids = append(ids, id)
	}
	return
}

// NotificationsIDs returns the "notifications" edge IDs in the mutation.
func (m *UserMutation) NotificationsIDs() (ids []uuid.UUID) {
	for id := range m.notifications {
		ids = append(ids, id)
	}
	return
}

// ResetNotifications resets all changes to the "notifications" edge.
func (m *UserMutation) ResetNotifications() {
	m.notifications = nil
	m.clearednotifications = false
	m.removednotifications = nil
}

// AddPriceIDs adds the "prices" edge to the Price entity by ids.
func (m *UserMutation) AddPriceIDs(ids ...uuid.UUID) {
	if m.prices == nil {
		m.prices = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.prices[ids[i]] = struct{}{}
	}
}

// ClearPrices clears the "prices" edge to the Price entity.
func (m *UserMutation) ClearPrices() {
	m.clearedprices = true
}

// PricesCleared reports if the "prices" edge to the Price entity was cleared.
func (m *UserMutation) PricesCleared() bool {
	return m.clearedprices
}

// RemovePriceIDs removes the "prices" edge to the Price entity by IDs.
func (m *UserMutation) RemovePriceIDs(ids ...uuid.UUID) {
	if m.removedprices == nil {
		m.removedprices = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.prices, ids[i])
		m.removedprices[ids[i]] = struct{}{}
	}
}

// RemovedPrices returns the removed IDs of the "prices" edge to the Price entity.
func (m *UserMutation) RemovedPricesIDs() (ids []uuid.UUID) {
	for id := range m.removedprices {
		ids = append(ids, id)
	}
	return
}

// PricesIDs returns the "prices" edge IDs in the mutation.
func (m *UserMutation) PricesIDs() (ids []uuid.UUID) {
	for id := range m.prices {
		ids = append(ids, id)
	}
	return
}

// ResetPrices resets all changes to the "prices" edge.
func (m *UserMutation) ResetPrices() {
	m.prices = nil
	m.clearedprices = false
	m.removedprices = nil
}

// AddMycardIDs adds the "mycards" edge to the MyCard entity by ids.
func (m *UserMutation) AddMycardIDs(ids ...string) {
	if m.mycards == nil {
		m.mycards = make(map[string]struct{})
	}
	for i := range ids {
		m.mycards[ids[i]] = struct{}{}
	}
}

// ClearMycards clears the "mycards" edge to the MyCard entity.
func (m *UserMutation) ClearMycards() {
	m.clearedmycards = true
}

// MycardsCleared reports if the "mycards" edge to the MyCard entity was cleared.
func (m *UserMutation) MycardsCleared() bool {
	return m.clearedmycards
}

// RemoveMycardIDs removes the "mycards" edge to the MyCard entity by IDs.
func (m *UserMutation) RemoveMycardIDs(ids ...string) {
	if m.removedmycards == nil {
		m.removedmycards = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.mycards, ids[i])
		m.removedmycards[ids[i]] = struct{}{}
	}
}

// RemovedMycards returns the removed IDs of the "mycards" edge to the MyCard entity.
func (m *UserMutation) RemovedMycardsIDs() (ids []string) {
	for id := range m.removedmycards {
		ids = append(ids, id)
	}
	return
}

// MycardsIDs returns the "mycards" edge IDs in the mutation.
func (m *UserMutation) MycardsIDs() (ids []string) {
	for id := range m.mycards {
		ids = append(ids, id)
	}
	return
}

// ResetMycards resets all changes to the "mycards" edge.
func (m *UserMutation) ResetMycards() {
	m.mycards = nil
	m.clearedmycards = false
	m.removedmycards = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 16)
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.birth_year != nil {
		fields = append(fields, user.FieldBirthYear)
	}
	if m.height != nil {
		fields = append(fields, user.FieldHeight)
	}
	if m.weight != nil {
		fields = append(fields, user.FieldWeight)
	}
	if m.gender != nil {
		fields = append(fields, user.FieldGender)
	}
	if m.education_level != nil {
		fields = append(fields, user.FieldEducationLevel)
	}
	if m.occupation != nil {
		fields = append(fields, user.FieldOccupation)
	}
	if m.marriage != nil {
		fields = append(fields, user.FieldMarriage)
	}
	if m.medical_history != nil {
		fields = append(fields, user.FieldMedicalHistory)
	}
	if m.medication_status != nil {
		fields = append(fields, user.FieldMedicationStatus)
	}
	if m.demented_among_direct_relatives != nil {
		fields = append(fields, user.FieldDementedAmongDirectRelatives)
	}
	if m.head_injury_experience != nil {
		fields = append(fields, user.FieldHeadInjuryExperience)
	}
	if m.ear_condition != nil {
		fields = append(fields, user.FieldEarCondition)
	}
	if m.eyesight_condition != nil {
		fields = append(fields, user.FieldEyesightCondition)
	}
	if m.smoking_habit != nil {
		fields = append(fields, user.FieldSmokingHabit)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldBirthYear:
		return m.BirthYear()
	case user.FieldHeight:
		return m.Height()
	case user.FieldWeight:
		return m.Weight()
	case user.FieldGender:
		return m.Gender()
	case user.FieldEducationLevel:
		return m.EducationLevel()
	case user.FieldOccupation:
		return m.Occupation()
	case user.FieldMarriage:
		return m.Marriage()
	case user.FieldMedicalHistory:
		return m.MedicalHistory()
	case user.FieldMedicationStatus:
		return m.MedicationStatus()
	case user.FieldDementedAmongDirectRelatives:
		return m.DementedAmongDirectRelatives()
	case user.FieldHeadInjuryExperience:
		return m.HeadInjuryExperience()
	case user.FieldEarCondition:
		return m.EarCondition()
	case user.FieldEyesightCondition:
		return m.EyesightCondition()
	case user.FieldSmokingHabit:
		return m.SmokingHabit()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldBirthYear:
		return m.OldBirthYear(ctx)
	case user.FieldHeight:
		return m.OldHeight(ctx)
	case user.FieldWeight:
		return m.OldWeight(ctx)
	case user.FieldGender:
		return m.OldGender(ctx)
	case user.FieldEducationLevel:
		return m.OldEducationLevel(ctx)
	case user.FieldOccupation:
		return m.OldOccupation(ctx)
	case user.FieldMarriage:
		return m.OldMarriage(ctx)
	case user.FieldMedicalHistory:
		return m.OldMedicalHistory(ctx)
	case user.FieldMedicationStatus:
		return m.OldMedicationStatus(ctx)
	case user.FieldDementedAmongDirectRelatives:
		return m.OldDementedAmongDirectRelatives(ctx)
	case user.FieldHeadInjuryExperience:
		return m.OldHeadInjuryExperience(ctx)
	case user.FieldEarCondition:
		return m.OldEarCondition(ctx)
	case user.FieldEyesightCondition:
		return m.OldEyesightCondition(ctx)
	case user.FieldSmokingHabit:
		return m.OldSmokingHabit(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldBirthYear:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBirthYear(v)
		return nil
	case user.FieldHeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeight(v)
		return nil
	case user.FieldWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeight(v)
		return nil
	case user.FieldGender:
		v, ok := value.(user.Gender)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	case user.FieldEducationLevel:
		v, ok := value.(user.EducationLevel)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEducationLevel(v)
		return nil
	case user.FieldOccupation:
		v, ok := value.(user.Occupation)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOccupation(v)
		return nil
	case user.FieldMarriage:
		v, ok := value.(user.Marriage)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMarriage(v)
		return nil
	case user.FieldMedicalHistory:
		v, ok := value.(user.MedicalHistory)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMedicalHistory(v)
		return nil
	case user.FieldMedicationStatus:
		v, ok := value.(user.MedicationStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMedicationStatus(v)
		return nil
	case user.FieldDementedAmongDirectRelatives:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDementedAmongDirectRelatives(v)
		return nil
	case user.FieldHeadInjuryExperience:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeadInjuryExperience(v)
		return nil
	case user.FieldEarCondition:
		v, ok := value.(user.EarCondition)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEarCondition(v)
		return nil
	case user.FieldEyesightCondition:
		v, ok := value.(user.EyesightCondition)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEyesightCondition(v)
		return nil
	case user.FieldSmokingHabit:
		v, ok := value.(user.SmokingHabit)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSmokingHabit(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addbirth_year != nil {
		fields = append(fields, user.FieldBirthYear)
	}
	if m.addheight != nil {
		fields = append(fields, user.FieldHeight)
	}
	if m.addweight != nil {
		fields = append(fields, user.FieldWeight)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldBirthYear:
		return m.AddedBirthYear()
	case user.FieldHeight:
		return m.AddedHeight()
	case user.FieldWeight:
		return m.AddedWeight()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldBirthYear:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBirthYear(v)
		return nil
	case user.FieldHeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHeight(v)
		return nil
	case user.FieldWeight:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWeight(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldBirthYear:
		m.ResetBirthYear()
		return nil
	case user.FieldHeight:
		m.ResetHeight()
		return nil
	case user.FieldWeight:
		m.ResetWeight()
		return nil
	case user.FieldGender:
		m.ResetGender()
		return nil
	case user.FieldEducationLevel:
		m.ResetEducationLevel()
		return nil
	case user.FieldOccupation:
		m.ResetOccupation()
		return nil
	case user.FieldMarriage:
		m.ResetMarriage()
		return nil
	case user.FieldMedicalHistory:
		m.ResetMedicalHistory()
		return nil
	case user.FieldMedicationStatus:
		m.ResetMedicationStatus()
		return nil
	case user.FieldDementedAmongDirectRelatives:
		m.ResetDementedAmongDirectRelatives()
		return nil
	case user.FieldHeadInjuryExperience:
		m.ResetHeadInjuryExperience()
		return nil
	case user.FieldEarCondition:
		m.ResetEarCondition()
		return nil
	case user.FieldEyesightCondition:
		m.ResetEyesightCondition()
		return nil
	case user.FieldSmokingHabit:
		m.ResetSmokingHabit()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.questionnaire_responses != nil {
		edges = append(edges, user.EdgeQuestionnaireResponses)
	}
	if m.notifications != nil {
		edges = append(edges, user.EdgeNotifications)
	}
	if m.prices != nil {
		edges = append(edges, user.EdgePrices)
	}
	if m.mycards != nil {
		edges = append(edges, user.EdgeMycards)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeQuestionnaireResponses:
		ids := make([]ent.Value, 0, len(m.questionnaire_responses))
		for id := range m.questionnaire_responses {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeNotifications:
		ids := make([]ent.Value, 0, len(m.notifications))
		for id := range m.notifications {
			ids = append(ids, id)
		}
		return ids
	case user.EdgePrices:
		ids := make([]ent.Value, 0, len(m.prices))
		for id := range m.prices {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeMycards:
		ids := make([]ent.Value, 0, len(m.mycards))
		for id := range m.mycards {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedquestionnaire_responses != nil {
		edges = append(edges, user.EdgeQuestionnaireResponses)
	}
	if m.removednotifications != nil {
		edges = append(edges, user.EdgeNotifications)
	}
	if m.removedprices != nil {
		edges = append(edges, user.EdgePrices)
	}
	if m.removedmycards != nil {
		edges = append(edges, user.EdgeMycards)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeQuestionnaireResponses:
		ids := make([]ent.Value, 0, len(m.removedquestionnaire_responses))
		for id := range m.removedquestionnaire_responses {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeNotifications:
		ids := make([]ent.Value, 0, len(m.removednotifications))
		for id := range m.removednotifications {
			ids = append(ids, id)
		}
		return ids
	case user.EdgePrices:
		ids := make([]ent.Value, 0, len(m.removedprices))
		for id := range m.removedprices {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeMycards:
		ids := make([]ent.Value, 0, len(m.removedmycards))
		for id := range m.removedmycards {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedquestionnaire_responses {
		edges = append(edges, user.EdgeQuestionnaireResponses)
	}
	if m.clearednotifications {
		edges = append(edges, user.EdgeNotifications)
	}
	if m.clearedprices {
		edges = append(edges, user.EdgePrices)
	}
	if m.clearedmycards {
		edges = append(edges, user.EdgeMycards)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeQuestionnaireResponses:
		return m.clearedquestionnaire_responses
	case user.EdgeNotifications:
		return m.clearednotifications
	case user.EdgePrices:
		return m.clearedprices
	case user.EdgeMycards:
		return m.clearedmycards
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeQuestionnaireResponses:
		m.ResetQuestionnaireResponses()
		return nil
	case user.EdgeNotifications:
		m.ResetNotifications()
		return nil
	case user.EdgePrices:
		m.ResetPrices()
		return nil
	case user.EdgeMycards:
		m.ResetMycards()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
