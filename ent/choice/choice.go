// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package choice

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the choice type in the database.
	Label = "choice"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBody holds the string denoting the body field in the database.
	FieldBody = "body"
	// FieldOrder holds the string denoting the order field in the database.
	FieldOrder = "order"
	// EdgeQuesion holds the string denoting the quesion edge name in mutations.
	EdgeQuesion = "quesion"
	// EdgeAnswer holds the string denoting the answer edge name in mutations.
	EdgeAnswer = "answer"
	// Table holds the table name of the choice in the database.
	Table = "choices"
	// QuesionTable is the table that holds the quesion relation/edge.
	QuesionTable = "choices"
	// QuesionInverseTable is the table name for the Question entity.
	// It exists in this package in order to avoid circular dependency with the "question" package.
	QuesionInverseTable = "questions"
	// QuesionColumn is the table column denoting the quesion relation/edge.
	QuesionColumn = "question_choices"
	// AnswerTable is the table that holds the answer relation/edge. The primary key declared below.
	AnswerTable = "answer_chosen"
	// AnswerInverseTable is the table name for the Answer entity.
	// It exists in this package in order to avoid circular dependency with the "answer" package.
	AnswerInverseTable = "answers"
)

// Columns holds all SQL columns for choice fields.
var Columns = []string{
	FieldID,
	FieldBody,
	FieldOrder,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "choices"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"question_choices",
}

var (
	// AnswerPrimaryKey and AnswerColumn2 are the table columns denoting the
	// primary key for the answer relation (M2M).
	AnswerPrimaryKey = []string{"answer_id", "choice_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// OrderValidator is a validator for the "order" field. It is called by the builders before save.
	OrderValidator func(int) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Choice queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBody orders the results by the body field.
func ByBody(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBody, opts...).ToFunc()
}

// ByOrder orders the results by the order field.
func ByOrder(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrder, opts...).ToFunc()
}

// ByQuesionField orders the results by quesion field.
func ByQuesionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQuesionStep(), sql.OrderByField(field, opts...))
	}
}

// ByAnswerCount orders the results by answer count.
func ByAnswerCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAnswerStep(), opts...)
	}
}

// ByAnswer orders the results by answer terms.
func ByAnswer(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAnswerStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newQuesionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QuesionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, QuesionTable, QuesionColumn),
	)
}
func newAnswerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AnswerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, AnswerTable, AnswerPrimaryKey...),
	)
}
