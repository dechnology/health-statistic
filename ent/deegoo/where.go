// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package deegoo

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/eesoymilk/health-statistic-api/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldLTE(FieldID, id))
}

// Perception applies equality check predicate on the "perception" field. It's identical to PerceptionEQ.
func Perception(v int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldEQ(FieldPerception, v))
}

// Focus applies equality check predicate on the "focus" field. It's identical to FocusEQ.
func Focus(v int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldEQ(FieldFocus, v))
}

// Execution applies equality check predicate on the "execution" field. It's identical to ExecutionEQ.
func Execution(v int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldEQ(FieldExecution, v))
}

// Memory applies equality check predicate on the "memory" field. It's identical to MemoryEQ.
func Memory(v int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldEQ(FieldMemory, v))
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldEQ(FieldLanguage, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldEQ(FieldCreatedAt, v))
}

// PerceptionEQ applies the EQ predicate on the "perception" field.
func PerceptionEQ(v int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldEQ(FieldPerception, v))
}

// PerceptionNEQ applies the NEQ predicate on the "perception" field.
func PerceptionNEQ(v int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldNEQ(FieldPerception, v))
}

// PerceptionIn applies the In predicate on the "perception" field.
func PerceptionIn(vs ...int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldIn(FieldPerception, vs...))
}

// PerceptionNotIn applies the NotIn predicate on the "perception" field.
func PerceptionNotIn(vs ...int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldNotIn(FieldPerception, vs...))
}

// PerceptionGT applies the GT predicate on the "perception" field.
func PerceptionGT(v int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldGT(FieldPerception, v))
}

// PerceptionGTE applies the GTE predicate on the "perception" field.
func PerceptionGTE(v int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldGTE(FieldPerception, v))
}

// PerceptionLT applies the LT predicate on the "perception" field.
func PerceptionLT(v int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldLT(FieldPerception, v))
}

// PerceptionLTE applies the LTE predicate on the "perception" field.
func PerceptionLTE(v int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldLTE(FieldPerception, v))
}

// FocusEQ applies the EQ predicate on the "focus" field.
func FocusEQ(v int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldEQ(FieldFocus, v))
}

// FocusNEQ applies the NEQ predicate on the "focus" field.
func FocusNEQ(v int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldNEQ(FieldFocus, v))
}

// FocusIn applies the In predicate on the "focus" field.
func FocusIn(vs ...int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldIn(FieldFocus, vs...))
}

// FocusNotIn applies the NotIn predicate on the "focus" field.
func FocusNotIn(vs ...int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldNotIn(FieldFocus, vs...))
}

// FocusGT applies the GT predicate on the "focus" field.
func FocusGT(v int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldGT(FieldFocus, v))
}

// FocusGTE applies the GTE predicate on the "focus" field.
func FocusGTE(v int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldGTE(FieldFocus, v))
}

// FocusLT applies the LT predicate on the "focus" field.
func FocusLT(v int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldLT(FieldFocus, v))
}

// FocusLTE applies the LTE predicate on the "focus" field.
func FocusLTE(v int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldLTE(FieldFocus, v))
}

// ExecutionEQ applies the EQ predicate on the "execution" field.
func ExecutionEQ(v int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldEQ(FieldExecution, v))
}

// ExecutionNEQ applies the NEQ predicate on the "execution" field.
func ExecutionNEQ(v int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldNEQ(FieldExecution, v))
}

// ExecutionIn applies the In predicate on the "execution" field.
func ExecutionIn(vs ...int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldIn(FieldExecution, vs...))
}

// ExecutionNotIn applies the NotIn predicate on the "execution" field.
func ExecutionNotIn(vs ...int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldNotIn(FieldExecution, vs...))
}

// ExecutionGT applies the GT predicate on the "execution" field.
func ExecutionGT(v int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldGT(FieldExecution, v))
}

// ExecutionGTE applies the GTE predicate on the "execution" field.
func ExecutionGTE(v int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldGTE(FieldExecution, v))
}

// ExecutionLT applies the LT predicate on the "execution" field.
func ExecutionLT(v int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldLT(FieldExecution, v))
}

// ExecutionLTE applies the LTE predicate on the "execution" field.
func ExecutionLTE(v int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldLTE(FieldExecution, v))
}

// MemoryEQ applies the EQ predicate on the "memory" field.
func MemoryEQ(v int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldEQ(FieldMemory, v))
}

// MemoryNEQ applies the NEQ predicate on the "memory" field.
func MemoryNEQ(v int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldNEQ(FieldMemory, v))
}

// MemoryIn applies the In predicate on the "memory" field.
func MemoryIn(vs ...int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldIn(FieldMemory, vs...))
}

// MemoryNotIn applies the NotIn predicate on the "memory" field.
func MemoryNotIn(vs ...int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldNotIn(FieldMemory, vs...))
}

// MemoryGT applies the GT predicate on the "memory" field.
func MemoryGT(v int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldGT(FieldMemory, v))
}

// MemoryGTE applies the GTE predicate on the "memory" field.
func MemoryGTE(v int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldGTE(FieldMemory, v))
}

// MemoryLT applies the LT predicate on the "memory" field.
func MemoryLT(v int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldLT(FieldMemory, v))
}

// MemoryLTE applies the LTE predicate on the "memory" field.
func MemoryLTE(v int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldLTE(FieldMemory, v))
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldEQ(FieldLanguage, v))
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldNEQ(FieldLanguage, v))
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldIn(FieldLanguage, vs...))
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldNotIn(FieldLanguage, vs...))
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldGT(FieldLanguage, v))
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldGTE(FieldLanguage, v))
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldLT(FieldLanguage, v))
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v int8) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldLTE(FieldLanguage, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Deegoo {
	return predicate.Deegoo(sql.FieldLTE(FieldCreatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Deegoo {
	return predicate.Deegoo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Deegoo {
	return predicate.Deegoo(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Deegoo) predicate.Deegoo {
	return predicate.Deegoo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Deegoo) predicate.Deegoo {
	return predicate.Deegoo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Deegoo) predicate.Deegoo {
	return predicate.Deegoo(func(s *sql.Selector) {
		p(s.Not())
	})
}
