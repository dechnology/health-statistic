// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/eesoymilk/health-statistic-api/ent/questionnaire"
	"github.com/google/uuid"
)

// Questionnaire is the model entity for the Questionnaire schema.
type Questionnaire struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QuestionnaireQuery when eager-loading is set.
	Edges        QuestionnaireEdges `json:"-"`
	selectValues sql.SelectValues
}

// QuestionnaireEdges holds the relations/edges for other nodes in the graph.
type QuestionnaireEdges struct {
	// Questions holds the value of the questions edge.
	Questions []*Question `json:"questions,omitempty"`
	// QuestionnaireResponses holds the value of the questionnaire_responses edge.
	QuestionnaireResponses []*QuestionnaireResponse `json:"questionnaire_responses,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// QuestionsOrErr returns the Questions value or an error if the edge
// was not loaded in eager-loading.
func (e QuestionnaireEdges) QuestionsOrErr() ([]*Question, error) {
	if e.loadedTypes[0] {
		return e.Questions, nil
	}
	return nil, &NotLoadedError{edge: "questions"}
}

// QuestionnaireResponsesOrErr returns the QuestionnaireResponses value or an error if the edge
// was not loaded in eager-loading.
func (e QuestionnaireEdges) QuestionnaireResponsesOrErr() ([]*QuestionnaireResponse, error) {
	if e.loadedTypes[1] {
		return e.QuestionnaireResponses, nil
	}
	return nil, &NotLoadedError{edge: "questionnaire_responses"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Questionnaire) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case questionnaire.FieldName:
			values[i] = new(sql.NullString)
		case questionnaire.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case questionnaire.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Questionnaire fields.
func (q *Questionnaire) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case questionnaire.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				q.ID = *value
			}
		case questionnaire.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				q.Name = value.String
			}
		case questionnaire.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				q.CreatedAt = value.Time
			}
		default:
			q.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Questionnaire.
// This includes values selected through modifiers, order, etc.
func (q *Questionnaire) Value(name string) (ent.Value, error) {
	return q.selectValues.Get(name)
}

// QueryQuestions queries the "questions" edge of the Questionnaire entity.
func (q *Questionnaire) QueryQuestions() *QuestionQuery {
	return NewQuestionnaireClient(q.config).QueryQuestions(q)
}

// QueryQuestionnaireResponses queries the "questionnaire_responses" edge of the Questionnaire entity.
func (q *Questionnaire) QueryQuestionnaireResponses() *QuestionnaireResponseQuery {
	return NewQuestionnaireClient(q.config).QueryQuestionnaireResponses(q)
}

// Update returns a builder for updating this Questionnaire.
// Note that you need to call Questionnaire.Unwrap() before calling this method if this Questionnaire
// was returned from a transaction, and the transaction was committed or rolled back.
func (q *Questionnaire) Update() *QuestionnaireUpdateOne {
	return NewQuestionnaireClient(q.config).UpdateOne(q)
}

// Unwrap unwraps the Questionnaire entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (q *Questionnaire) Unwrap() *Questionnaire {
	_tx, ok := q.config.driver.(*txDriver)
	if !ok {
		panic("ent: Questionnaire is not a transactional entity")
	}
	q.config.driver = _tx.drv
	return q
}

// String implements the fmt.Stringer.
func (q *Questionnaire) String() string {
	var builder strings.Builder
	builder.WriteString("Questionnaire(")
	builder.WriteString(fmt.Sprintf("id=%v, ", q.ID))
	builder.WriteString("name=")
	builder.WriteString(q.Name)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(q.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (q *Questionnaire) MarshalJSON() ([]byte, error) {
	type Alias Questionnaire
	return json.Marshal(&struct {
		*Alias
		QuestionnaireEdges
	}{
		Alias:              (*Alias)(q),
		QuestionnaireEdges: q.Edges,
	})
}

// Questionnaires is a parsable slice of Questionnaire.
type Questionnaires []*Questionnaire
