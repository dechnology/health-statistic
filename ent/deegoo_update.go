// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eesoymilk/health-statistic-api/ent/deegoo"
	"github.com/eesoymilk/health-statistic-api/ent/predicate"
	"github.com/eesoymilk/health-statistic-api/ent/user"
)

// DeegooUpdate is the builder for updating Deegoo entities.
type DeegooUpdate struct {
	config
	hooks    []Hook
	mutation *DeegooMutation
}

// Where appends a list predicates to the DeegooUpdate builder.
func (du *DeegooUpdate) Where(ps ...predicate.Deegoo) *DeegooUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetPerception sets the "perception" field.
func (du *DeegooUpdate) SetPerception(i int8) *DeegooUpdate {
	du.mutation.ResetPerception()
	du.mutation.SetPerception(i)
	return du
}

// AddPerception adds i to the "perception" field.
func (du *DeegooUpdate) AddPerception(i int8) *DeegooUpdate {
	du.mutation.AddPerception(i)
	return du
}

// SetFocus sets the "focus" field.
func (du *DeegooUpdate) SetFocus(i int8) *DeegooUpdate {
	du.mutation.ResetFocus()
	du.mutation.SetFocus(i)
	return du
}

// AddFocus adds i to the "focus" field.
func (du *DeegooUpdate) AddFocus(i int8) *DeegooUpdate {
	du.mutation.AddFocus(i)
	return du
}

// SetExecution sets the "execution" field.
func (du *DeegooUpdate) SetExecution(i int8) *DeegooUpdate {
	du.mutation.ResetExecution()
	du.mutation.SetExecution(i)
	return du
}

// AddExecution adds i to the "execution" field.
func (du *DeegooUpdate) AddExecution(i int8) *DeegooUpdate {
	du.mutation.AddExecution(i)
	return du
}

// SetMemory sets the "memory" field.
func (du *DeegooUpdate) SetMemory(i int8) *DeegooUpdate {
	du.mutation.ResetMemory()
	du.mutation.SetMemory(i)
	return du
}

// AddMemory adds i to the "memory" field.
func (du *DeegooUpdate) AddMemory(i int8) *DeegooUpdate {
	du.mutation.AddMemory(i)
	return du
}

// SetLanguage sets the "language" field.
func (du *DeegooUpdate) SetLanguage(i int8) *DeegooUpdate {
	du.mutation.ResetLanguage()
	du.mutation.SetLanguage(i)
	return du
}

// AddLanguage adds i to the "language" field.
func (du *DeegooUpdate) AddLanguage(i int8) *DeegooUpdate {
	du.mutation.AddLanguage(i)
	return du
}

// SetCreatedAt sets the "created_at" field.
func (du *DeegooUpdate) SetCreatedAt(t time.Time) *DeegooUpdate {
	du.mutation.SetCreatedAt(t)
	return du
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (du *DeegooUpdate) SetNillableCreatedAt(t *time.Time) *DeegooUpdate {
	if t != nil {
		du.SetCreatedAt(*t)
	}
	return du
}

// SetUserID sets the "user" edge to the User entity by ID.
func (du *DeegooUpdate) SetUserID(id string) *DeegooUpdate {
	du.mutation.SetUserID(id)
	return du
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (du *DeegooUpdate) SetNillableUserID(id *string) *DeegooUpdate {
	if id != nil {
		du = du.SetUserID(*id)
	}
	return du
}

// SetUser sets the "user" edge to the User entity.
func (du *DeegooUpdate) SetUser(u *User) *DeegooUpdate {
	return du.SetUserID(u.ID)
}

// Mutation returns the DeegooMutation object of the builder.
func (du *DeegooUpdate) Mutation() *DeegooMutation {
	return du.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (du *DeegooUpdate) ClearUser() *DeegooUpdate {
	du.mutation.ClearUser()
	return du
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DeegooUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DeegooUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DeegooUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DeegooUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DeegooUpdate) check() error {
	if v, ok := du.mutation.Perception(); ok {
		if err := deegoo.PerceptionValidator(v); err != nil {
			return &ValidationError{Name: "perception", err: fmt.Errorf(`ent: validator failed for field "Deegoo.perception": %w`, err)}
		}
	}
	if v, ok := du.mutation.Focus(); ok {
		if err := deegoo.FocusValidator(v); err != nil {
			return &ValidationError{Name: "focus", err: fmt.Errorf(`ent: validator failed for field "Deegoo.focus": %w`, err)}
		}
	}
	if v, ok := du.mutation.Execution(); ok {
		if err := deegoo.ExecutionValidator(v); err != nil {
			return &ValidationError{Name: "execution", err: fmt.Errorf(`ent: validator failed for field "Deegoo.execution": %w`, err)}
		}
	}
	if v, ok := du.mutation.Memory(); ok {
		if err := deegoo.MemoryValidator(v); err != nil {
			return &ValidationError{Name: "memory", err: fmt.Errorf(`ent: validator failed for field "Deegoo.memory": %w`, err)}
		}
	}
	if v, ok := du.mutation.Language(); ok {
		if err := deegoo.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf(`ent: validator failed for field "Deegoo.language": %w`, err)}
		}
	}
	return nil
}

func (du *DeegooUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(deegoo.Table, deegoo.Columns, sqlgraph.NewFieldSpec(deegoo.FieldID, field.TypeUUID))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Perception(); ok {
		_spec.SetField(deegoo.FieldPerception, field.TypeInt8, value)
	}
	if value, ok := du.mutation.AddedPerception(); ok {
		_spec.AddField(deegoo.FieldPerception, field.TypeInt8, value)
	}
	if value, ok := du.mutation.Focus(); ok {
		_spec.SetField(deegoo.FieldFocus, field.TypeInt8, value)
	}
	if value, ok := du.mutation.AddedFocus(); ok {
		_spec.AddField(deegoo.FieldFocus, field.TypeInt8, value)
	}
	if value, ok := du.mutation.Execution(); ok {
		_spec.SetField(deegoo.FieldExecution, field.TypeInt8, value)
	}
	if value, ok := du.mutation.AddedExecution(); ok {
		_spec.AddField(deegoo.FieldExecution, field.TypeInt8, value)
	}
	if value, ok := du.mutation.Memory(); ok {
		_spec.SetField(deegoo.FieldMemory, field.TypeInt8, value)
	}
	if value, ok := du.mutation.AddedMemory(); ok {
		_spec.AddField(deegoo.FieldMemory, field.TypeInt8, value)
	}
	if value, ok := du.mutation.Language(); ok {
		_spec.SetField(deegoo.FieldLanguage, field.TypeInt8, value)
	}
	if value, ok := du.mutation.AddedLanguage(); ok {
		_spec.AddField(deegoo.FieldLanguage, field.TypeInt8, value)
	}
	if value, ok := du.mutation.CreatedAt(); ok {
		_spec.SetField(deegoo.FieldCreatedAt, field.TypeTime, value)
	}
	if du.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deegoo.UserTable,
			Columns: []string{deegoo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deegoo.UserTable,
			Columns: []string{deegoo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deegoo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DeegooUpdateOne is the builder for updating a single Deegoo entity.
type DeegooUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeegooMutation
}

// SetPerception sets the "perception" field.
func (duo *DeegooUpdateOne) SetPerception(i int8) *DeegooUpdateOne {
	duo.mutation.ResetPerception()
	duo.mutation.SetPerception(i)
	return duo
}

// AddPerception adds i to the "perception" field.
func (duo *DeegooUpdateOne) AddPerception(i int8) *DeegooUpdateOne {
	duo.mutation.AddPerception(i)
	return duo
}

// SetFocus sets the "focus" field.
func (duo *DeegooUpdateOne) SetFocus(i int8) *DeegooUpdateOne {
	duo.mutation.ResetFocus()
	duo.mutation.SetFocus(i)
	return duo
}

// AddFocus adds i to the "focus" field.
func (duo *DeegooUpdateOne) AddFocus(i int8) *DeegooUpdateOne {
	duo.mutation.AddFocus(i)
	return duo
}

// SetExecution sets the "execution" field.
func (duo *DeegooUpdateOne) SetExecution(i int8) *DeegooUpdateOne {
	duo.mutation.ResetExecution()
	duo.mutation.SetExecution(i)
	return duo
}

// AddExecution adds i to the "execution" field.
func (duo *DeegooUpdateOne) AddExecution(i int8) *DeegooUpdateOne {
	duo.mutation.AddExecution(i)
	return duo
}

// SetMemory sets the "memory" field.
func (duo *DeegooUpdateOne) SetMemory(i int8) *DeegooUpdateOne {
	duo.mutation.ResetMemory()
	duo.mutation.SetMemory(i)
	return duo
}

// AddMemory adds i to the "memory" field.
func (duo *DeegooUpdateOne) AddMemory(i int8) *DeegooUpdateOne {
	duo.mutation.AddMemory(i)
	return duo
}

// SetLanguage sets the "language" field.
func (duo *DeegooUpdateOne) SetLanguage(i int8) *DeegooUpdateOne {
	duo.mutation.ResetLanguage()
	duo.mutation.SetLanguage(i)
	return duo
}

// AddLanguage adds i to the "language" field.
func (duo *DeegooUpdateOne) AddLanguage(i int8) *DeegooUpdateOne {
	duo.mutation.AddLanguage(i)
	return duo
}

// SetCreatedAt sets the "created_at" field.
func (duo *DeegooUpdateOne) SetCreatedAt(t time.Time) *DeegooUpdateOne {
	duo.mutation.SetCreatedAt(t)
	return duo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (duo *DeegooUpdateOne) SetNillableCreatedAt(t *time.Time) *DeegooUpdateOne {
	if t != nil {
		duo.SetCreatedAt(*t)
	}
	return duo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (duo *DeegooUpdateOne) SetUserID(id string) *DeegooUpdateOne {
	duo.mutation.SetUserID(id)
	return duo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (duo *DeegooUpdateOne) SetNillableUserID(id *string) *DeegooUpdateOne {
	if id != nil {
		duo = duo.SetUserID(*id)
	}
	return duo
}

// SetUser sets the "user" edge to the User entity.
func (duo *DeegooUpdateOne) SetUser(u *User) *DeegooUpdateOne {
	return duo.SetUserID(u.ID)
}

// Mutation returns the DeegooMutation object of the builder.
func (duo *DeegooUpdateOne) Mutation() *DeegooMutation {
	return duo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (duo *DeegooUpdateOne) ClearUser() *DeegooUpdateOne {
	duo.mutation.ClearUser()
	return duo
}

// Where appends a list predicates to the DeegooUpdate builder.
func (duo *DeegooUpdateOne) Where(ps ...predicate.Deegoo) *DeegooUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DeegooUpdateOne) Select(field string, fields ...string) *DeegooUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Deegoo entity.
func (duo *DeegooUpdateOne) Save(ctx context.Context) (*Deegoo, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DeegooUpdateOne) SaveX(ctx context.Context) *Deegoo {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DeegooUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DeegooUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DeegooUpdateOne) check() error {
	if v, ok := duo.mutation.Perception(); ok {
		if err := deegoo.PerceptionValidator(v); err != nil {
			return &ValidationError{Name: "perception", err: fmt.Errorf(`ent: validator failed for field "Deegoo.perception": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Focus(); ok {
		if err := deegoo.FocusValidator(v); err != nil {
			return &ValidationError{Name: "focus", err: fmt.Errorf(`ent: validator failed for field "Deegoo.focus": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Execution(); ok {
		if err := deegoo.ExecutionValidator(v); err != nil {
			return &ValidationError{Name: "execution", err: fmt.Errorf(`ent: validator failed for field "Deegoo.execution": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Memory(); ok {
		if err := deegoo.MemoryValidator(v); err != nil {
			return &ValidationError{Name: "memory", err: fmt.Errorf(`ent: validator failed for field "Deegoo.memory": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Language(); ok {
		if err := deegoo.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf(`ent: validator failed for field "Deegoo.language": %w`, err)}
		}
	}
	return nil
}

func (duo *DeegooUpdateOne) sqlSave(ctx context.Context) (_node *Deegoo, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(deegoo.Table, deegoo.Columns, sqlgraph.NewFieldSpec(deegoo.FieldID, field.TypeUUID))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Deegoo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deegoo.FieldID)
		for _, f := range fields {
			if !deegoo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deegoo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Perception(); ok {
		_spec.SetField(deegoo.FieldPerception, field.TypeInt8, value)
	}
	if value, ok := duo.mutation.AddedPerception(); ok {
		_spec.AddField(deegoo.FieldPerception, field.TypeInt8, value)
	}
	if value, ok := duo.mutation.Focus(); ok {
		_spec.SetField(deegoo.FieldFocus, field.TypeInt8, value)
	}
	if value, ok := duo.mutation.AddedFocus(); ok {
		_spec.AddField(deegoo.FieldFocus, field.TypeInt8, value)
	}
	if value, ok := duo.mutation.Execution(); ok {
		_spec.SetField(deegoo.FieldExecution, field.TypeInt8, value)
	}
	if value, ok := duo.mutation.AddedExecution(); ok {
		_spec.AddField(deegoo.FieldExecution, field.TypeInt8, value)
	}
	if value, ok := duo.mutation.Memory(); ok {
		_spec.SetField(deegoo.FieldMemory, field.TypeInt8, value)
	}
	if value, ok := duo.mutation.AddedMemory(); ok {
		_spec.AddField(deegoo.FieldMemory, field.TypeInt8, value)
	}
	if value, ok := duo.mutation.Language(); ok {
		_spec.SetField(deegoo.FieldLanguage, field.TypeInt8, value)
	}
	if value, ok := duo.mutation.AddedLanguage(); ok {
		_spec.AddField(deegoo.FieldLanguage, field.TypeInt8, value)
	}
	if value, ok := duo.mutation.CreatedAt(); ok {
		_spec.SetField(deegoo.FieldCreatedAt, field.TypeTime, value)
	}
	if duo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deegoo.UserTable,
			Columns: []string{deegoo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deegoo.UserTable,
			Columns: []string{deegoo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Deegoo{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deegoo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
