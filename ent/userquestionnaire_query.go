// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eesoymilk/health-statistic-api/ent/answer"
	"github.com/eesoymilk/health-statistic-api/ent/predicate"
	"github.com/eesoymilk/health-statistic-api/ent/questionnaire"
	"github.com/eesoymilk/health-statistic-api/ent/user"
	"github.com/eesoymilk/health-statistic-api/ent/userquestionnaire"
	"github.com/google/uuid"
)

// UserQuestionnaireQuery is the builder for querying UserQuestionnaire entities.
type UserQuestionnaireQuery struct {
	config
	ctx               *QueryContext
	order             []userquestionnaire.OrderOption
	inters            []Interceptor
	predicates        []predicate.UserQuestionnaire
	withUser          *UserQuery
	withQuestionnaire *QuestionnaireQuery
	withAnswers       *AnswerQuery
	withFKs           bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserQuestionnaireQuery builder.
func (uqq *UserQuestionnaireQuery) Where(ps ...predicate.UserQuestionnaire) *UserQuestionnaireQuery {
	uqq.predicates = append(uqq.predicates, ps...)
	return uqq
}

// Limit the number of records to be returned by this query.
func (uqq *UserQuestionnaireQuery) Limit(limit int) *UserQuestionnaireQuery {
	uqq.ctx.Limit = &limit
	return uqq
}

// Offset to start from.
func (uqq *UserQuestionnaireQuery) Offset(offset int) *UserQuestionnaireQuery {
	uqq.ctx.Offset = &offset
	return uqq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (uqq *UserQuestionnaireQuery) Unique(unique bool) *UserQuestionnaireQuery {
	uqq.ctx.Unique = &unique
	return uqq
}

// Order specifies how the records should be ordered.
func (uqq *UserQuestionnaireQuery) Order(o ...userquestionnaire.OrderOption) *UserQuestionnaireQuery {
	uqq.order = append(uqq.order, o...)
	return uqq
}

// QueryUser chains the current query on the "user" edge.
func (uqq *UserQuestionnaireQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: uqq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uqq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userquestionnaire.Table, userquestionnaire.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userquestionnaire.UserTable, userquestionnaire.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(uqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryQuestionnaire chains the current query on the "questionnaire" edge.
func (uqq *UserQuestionnaireQuery) QueryQuestionnaire() *QuestionnaireQuery {
	query := (&QuestionnaireClient{config: uqq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uqq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userquestionnaire.Table, userquestionnaire.FieldID, selector),
			sqlgraph.To(questionnaire.Table, questionnaire.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userquestionnaire.QuestionnaireTable, userquestionnaire.QuestionnaireColumn),
		)
		fromU = sqlgraph.SetNeighbors(uqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAnswers chains the current query on the "answers" edge.
func (uqq *UserQuestionnaireQuery) QueryAnswers() *AnswerQuery {
	query := (&AnswerClient{config: uqq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uqq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userquestionnaire.Table, userquestionnaire.FieldID, selector),
			sqlgraph.To(answer.Table, answer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, userquestionnaire.AnswersTable, userquestionnaire.AnswersColumn),
		)
		fromU = sqlgraph.SetNeighbors(uqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UserQuestionnaire entity from the query.
// Returns a *NotFoundError when no UserQuestionnaire was found.
func (uqq *UserQuestionnaireQuery) First(ctx context.Context) (*UserQuestionnaire, error) {
	nodes, err := uqq.Limit(1).All(setContextOp(ctx, uqq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{userquestionnaire.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (uqq *UserQuestionnaireQuery) FirstX(ctx context.Context) *UserQuestionnaire {
	node, err := uqq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UserQuestionnaire ID from the query.
// Returns a *NotFoundError when no UserQuestionnaire ID was found.
func (uqq *UserQuestionnaireQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = uqq.Limit(1).IDs(setContextOp(ctx, uqq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{userquestionnaire.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (uqq *UserQuestionnaireQuery) FirstIDX(ctx context.Context) int {
	id, err := uqq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UserQuestionnaire entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UserQuestionnaire entity is found.
// Returns a *NotFoundError when no UserQuestionnaire entities are found.
func (uqq *UserQuestionnaireQuery) Only(ctx context.Context) (*UserQuestionnaire, error) {
	nodes, err := uqq.Limit(2).All(setContextOp(ctx, uqq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{userquestionnaire.Label}
	default:
		return nil, &NotSingularError{userquestionnaire.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (uqq *UserQuestionnaireQuery) OnlyX(ctx context.Context) *UserQuestionnaire {
	node, err := uqq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UserQuestionnaire ID in the query.
// Returns a *NotSingularError when more than one UserQuestionnaire ID is found.
// Returns a *NotFoundError when no entities are found.
func (uqq *UserQuestionnaireQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = uqq.Limit(2).IDs(setContextOp(ctx, uqq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{userquestionnaire.Label}
	default:
		err = &NotSingularError{userquestionnaire.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (uqq *UserQuestionnaireQuery) OnlyIDX(ctx context.Context) int {
	id, err := uqq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UserQuestionnaires.
func (uqq *UserQuestionnaireQuery) All(ctx context.Context) ([]*UserQuestionnaire, error) {
	ctx = setContextOp(ctx, uqq.ctx, "All")
	if err := uqq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UserQuestionnaire, *UserQuestionnaireQuery]()
	return withInterceptors[[]*UserQuestionnaire](ctx, uqq, qr, uqq.inters)
}

// AllX is like All, but panics if an error occurs.
func (uqq *UserQuestionnaireQuery) AllX(ctx context.Context) []*UserQuestionnaire {
	nodes, err := uqq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UserQuestionnaire IDs.
func (uqq *UserQuestionnaireQuery) IDs(ctx context.Context) (ids []int, err error) {
	if uqq.ctx.Unique == nil && uqq.path != nil {
		uqq.Unique(true)
	}
	ctx = setContextOp(ctx, uqq.ctx, "IDs")
	if err = uqq.Select(userquestionnaire.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (uqq *UserQuestionnaireQuery) IDsX(ctx context.Context) []int {
	ids, err := uqq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (uqq *UserQuestionnaireQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, uqq.ctx, "Count")
	if err := uqq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, uqq, querierCount[*UserQuestionnaireQuery](), uqq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (uqq *UserQuestionnaireQuery) CountX(ctx context.Context) int {
	count, err := uqq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (uqq *UserQuestionnaireQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, uqq.ctx, "Exist")
	switch _, err := uqq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (uqq *UserQuestionnaireQuery) ExistX(ctx context.Context) bool {
	exist, err := uqq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserQuestionnaireQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (uqq *UserQuestionnaireQuery) Clone() *UserQuestionnaireQuery {
	if uqq == nil {
		return nil
	}
	return &UserQuestionnaireQuery{
		config:            uqq.config,
		ctx:               uqq.ctx.Clone(),
		order:             append([]userquestionnaire.OrderOption{}, uqq.order...),
		inters:            append([]Interceptor{}, uqq.inters...),
		predicates:        append([]predicate.UserQuestionnaire{}, uqq.predicates...),
		withUser:          uqq.withUser.Clone(),
		withQuestionnaire: uqq.withQuestionnaire.Clone(),
		withAnswers:       uqq.withAnswers.Clone(),
		// clone intermediate query.
		sql:  uqq.sql.Clone(),
		path: uqq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (uqq *UserQuestionnaireQuery) WithUser(opts ...func(*UserQuery)) *UserQuestionnaireQuery {
	query := (&UserClient{config: uqq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uqq.withUser = query
	return uqq
}

// WithQuestionnaire tells the query-builder to eager-load the nodes that are connected to
// the "questionnaire" edge. The optional arguments are used to configure the query builder of the edge.
func (uqq *UserQuestionnaireQuery) WithQuestionnaire(opts ...func(*QuestionnaireQuery)) *UserQuestionnaireQuery {
	query := (&QuestionnaireClient{config: uqq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uqq.withQuestionnaire = query
	return uqq
}

// WithAnswers tells the query-builder to eager-load the nodes that are connected to
// the "answers" edge. The optional arguments are used to configure the query builder of the edge.
func (uqq *UserQuestionnaireQuery) WithAnswers(opts ...func(*AnswerQuery)) *UserQuestionnaireQuery {
	query := (&AnswerClient{config: uqq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uqq.withAnswers = query
	return uqq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserQuestionnaire.Query().
//		GroupBy(userquestionnaire.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (uqq *UserQuestionnaireQuery) GroupBy(field string, fields ...string) *UserQuestionnaireGroupBy {
	uqq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserQuestionnaireGroupBy{build: uqq}
	grbuild.flds = &uqq.ctx.Fields
	grbuild.label = userquestionnaire.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.UserQuestionnaire.Query().
//		Select(userquestionnaire.FieldCreatedAt).
//		Scan(ctx, &v)
func (uqq *UserQuestionnaireQuery) Select(fields ...string) *UserQuestionnaireSelect {
	uqq.ctx.Fields = append(uqq.ctx.Fields, fields...)
	sbuild := &UserQuestionnaireSelect{UserQuestionnaireQuery: uqq}
	sbuild.label = userquestionnaire.Label
	sbuild.flds, sbuild.scan = &uqq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserQuestionnaireSelect configured with the given aggregations.
func (uqq *UserQuestionnaireQuery) Aggregate(fns ...AggregateFunc) *UserQuestionnaireSelect {
	return uqq.Select().Aggregate(fns...)
}

func (uqq *UserQuestionnaireQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range uqq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, uqq); err != nil {
				return err
			}
		}
	}
	for _, f := range uqq.ctx.Fields {
		if !userquestionnaire.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if uqq.path != nil {
		prev, err := uqq.path(ctx)
		if err != nil {
			return err
		}
		uqq.sql = prev
	}
	return nil
}

func (uqq *UserQuestionnaireQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UserQuestionnaire, error) {
	var (
		nodes       = []*UserQuestionnaire{}
		withFKs     = uqq.withFKs
		_spec       = uqq.querySpec()
		loadedTypes = [3]bool{
			uqq.withUser != nil,
			uqq.withQuestionnaire != nil,
			uqq.withAnswers != nil,
		}
	)
	if uqq.withUser != nil || uqq.withQuestionnaire != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, userquestionnaire.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UserQuestionnaire).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UserQuestionnaire{config: uqq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, uqq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := uqq.withUser; query != nil {
		if err := uqq.loadUser(ctx, query, nodes, nil,
			func(n *UserQuestionnaire, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := uqq.withQuestionnaire; query != nil {
		if err := uqq.loadQuestionnaire(ctx, query, nodes, nil,
			func(n *UserQuestionnaire, e *Questionnaire) { n.Edges.Questionnaire = e }); err != nil {
			return nil, err
		}
	}
	if query := uqq.withAnswers; query != nil {
		if err := uqq.loadAnswers(ctx, query, nodes,
			func(n *UserQuestionnaire) { n.Edges.Answers = []*Answer{} },
			func(n *UserQuestionnaire, e *Answer) { n.Edges.Answers = append(n.Edges.Answers, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (uqq *UserQuestionnaireQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*UserQuestionnaire, init func(*UserQuestionnaire), assign func(*UserQuestionnaire, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*UserQuestionnaire)
	for i := range nodes {
		if nodes[i].user_questionnaires == nil {
			continue
		}
		fk := *nodes[i].user_questionnaires
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_questionnaires" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (uqq *UserQuestionnaireQuery) loadQuestionnaire(ctx context.Context, query *QuestionnaireQuery, nodes []*UserQuestionnaire, init func(*UserQuestionnaire), assign func(*UserQuestionnaire, *Questionnaire)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*UserQuestionnaire)
	for i := range nodes {
		if nodes[i].questionnaire_responses == nil {
			continue
		}
		fk := *nodes[i].questionnaire_responses
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(questionnaire.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "questionnaire_responses" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (uqq *UserQuestionnaireQuery) loadAnswers(ctx context.Context, query *AnswerQuery, nodes []*UserQuestionnaire, init func(*UserQuestionnaire), assign func(*UserQuestionnaire, *Answer)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*UserQuestionnaire)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Answer(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(userquestionnaire.AnswersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_questionnaire_answers
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_questionnaire_answers" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_questionnaire_answers" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (uqq *UserQuestionnaireQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := uqq.querySpec()
	_spec.Node.Columns = uqq.ctx.Fields
	if len(uqq.ctx.Fields) > 0 {
		_spec.Unique = uqq.ctx.Unique != nil && *uqq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, uqq.driver, _spec)
}

func (uqq *UserQuestionnaireQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(userquestionnaire.Table, userquestionnaire.Columns, sqlgraph.NewFieldSpec(userquestionnaire.FieldID, field.TypeInt))
	_spec.From = uqq.sql
	if unique := uqq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if uqq.path != nil {
		_spec.Unique = true
	}
	if fields := uqq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userquestionnaire.FieldID)
		for i := range fields {
			if fields[i] != userquestionnaire.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := uqq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := uqq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := uqq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := uqq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (uqq *UserQuestionnaireQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(uqq.driver.Dialect())
	t1 := builder.Table(userquestionnaire.Table)
	columns := uqq.ctx.Fields
	if len(columns) == 0 {
		columns = userquestionnaire.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if uqq.sql != nil {
		selector = uqq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if uqq.ctx.Unique != nil && *uqq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range uqq.predicates {
		p(selector)
	}
	for _, p := range uqq.order {
		p(selector)
	}
	if offset := uqq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := uqq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserQuestionnaireGroupBy is the group-by builder for UserQuestionnaire entities.
type UserQuestionnaireGroupBy struct {
	selector
	build *UserQuestionnaireQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (uqgb *UserQuestionnaireGroupBy) Aggregate(fns ...AggregateFunc) *UserQuestionnaireGroupBy {
	uqgb.fns = append(uqgb.fns, fns...)
	return uqgb
}

// Scan applies the selector query and scans the result into the given value.
func (uqgb *UserQuestionnaireGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, uqgb.build.ctx, "GroupBy")
	if err := uqgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserQuestionnaireQuery, *UserQuestionnaireGroupBy](ctx, uqgb.build, uqgb, uqgb.build.inters, v)
}

func (uqgb *UserQuestionnaireGroupBy) sqlScan(ctx context.Context, root *UserQuestionnaireQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(uqgb.fns))
	for _, fn := range uqgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*uqgb.flds)+len(uqgb.fns))
		for _, f := range *uqgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*uqgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := uqgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserQuestionnaireSelect is the builder for selecting fields of UserQuestionnaire entities.
type UserQuestionnaireSelect struct {
	*UserQuestionnaireQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (uqs *UserQuestionnaireSelect) Aggregate(fns ...AggregateFunc) *UserQuestionnaireSelect {
	uqs.fns = append(uqs.fns, fns...)
	return uqs
}

// Scan applies the selector query and scans the result into the given value.
func (uqs *UserQuestionnaireSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, uqs.ctx, "Select")
	if err := uqs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserQuestionnaireQuery, *UserQuestionnaireSelect](ctx, uqs.UserQuestionnaireQuery, uqs, uqs.inters, v)
}

func (uqs *UserQuestionnaireSelect) sqlScan(ctx context.Context, root *UserQuestionnaireQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(uqs.fns))
	for _, fn := range uqs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*uqs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := uqs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
