// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/eesoymilk/health-statistic-api/ent/healthkit"
)

// HealthKit is the model entity for the HealthKit schema.
type HealthKit struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Data holds the value of the "data" field.
	Data         map[string]interface{} `json:"data,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HealthKit) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case healthkit.FieldData:
			values[i] = new([]byte)
		case healthkit.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HealthKit fields.
func (hk *HealthKit) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case healthkit.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			hk.ID = int(value.Int64)
		case healthkit.FieldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &hk.Data); err != nil {
					return fmt.Errorf("unmarshal field data: %w", err)
				}
			}
		default:
			hk.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HealthKit.
// This includes values selected through modifiers, order, etc.
func (hk *HealthKit) Value(name string) (ent.Value, error) {
	return hk.selectValues.Get(name)
}

// Update returns a builder for updating this HealthKit.
// Note that you need to call HealthKit.Unwrap() before calling this method if this HealthKit
// was returned from a transaction, and the transaction was committed or rolled back.
func (hk *HealthKit) Update() *HealthKitUpdateOne {
	return NewHealthKitClient(hk.config).UpdateOne(hk)
}

// Unwrap unwraps the HealthKit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hk *HealthKit) Unwrap() *HealthKit {
	_tx, ok := hk.config.driver.(*txDriver)
	if !ok {
		panic("ent: HealthKit is not a transactional entity")
	}
	hk.config.driver = _tx.drv
	return hk
}

// String implements the fmt.Stringer.
func (hk *HealthKit) String() string {
	var builder strings.Builder
	builder.WriteString("HealthKit(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hk.ID))
	builder.WriteString("data=")
	builder.WriteString(fmt.Sprintf("%v", hk.Data))
	builder.WriteByte(')')
	return builder.String()
}

// HealthKits is a parsable slice of HealthKit.
type HealthKits []*HealthKit
