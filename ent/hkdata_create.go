// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eesoymilk/health-statistic-api/ent/healthkit"
	"github.com/eesoymilk/health-statistic-api/ent/hkdata"
	"github.com/google/uuid"
)

// HKDataCreate is the builder for creating a HKData entity.
type HKDataCreate struct {
	config
	mutation *HKDataMutation
	hooks    []Hook
}

// SetDataID sets the "data_id" field.
func (hdc *HKDataCreate) SetDataID(s string) *HKDataCreate {
	hdc.mutation.SetDataID(s)
	return hdc
}

// SetType sets the "type" field.
func (hdc *HKDataCreate) SetType(s string) *HKDataCreate {
	hdc.mutation.SetType(s)
	return hdc
}

// SetValue sets the "value" field.
func (hdc *HKDataCreate) SetValue(s string) *HKDataCreate {
	hdc.mutation.SetValue(s)
	return hdc
}

// SetStartTimestamp sets the "start_timestamp" field.
func (hdc *HKDataCreate) SetStartTimestamp(s string) *HKDataCreate {
	hdc.mutation.SetStartTimestamp(s)
	return hdc
}

// SetEndTimestamp sets the "end_timestamp" field.
func (hdc *HKDataCreate) SetEndTimestamp(s string) *HKDataCreate {
	hdc.mutation.SetEndTimestamp(s)
	return hdc
}

// SetTimezoneID sets the "timezone_id" field.
func (hdc *HKDataCreate) SetTimezoneID(s string) *HKDataCreate {
	hdc.mutation.SetTimezoneID(s)
	return hdc
}

// SetID sets the "id" field.
func (hdc *HKDataCreate) SetID(u uuid.UUID) *HKDataCreate {
	hdc.mutation.SetID(u)
	return hdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (hdc *HKDataCreate) SetNillableID(u *uuid.UUID) *HKDataCreate {
	if u != nil {
		hdc.SetID(*u)
	}
	return hdc
}

// SetHealthkitID sets the "healthkit" edge to the HealthKit entity by ID.
func (hdc *HKDataCreate) SetHealthkitID(id uuid.UUID) *HKDataCreate {
	hdc.mutation.SetHealthkitID(id)
	return hdc
}

// SetNillableHealthkitID sets the "healthkit" edge to the HealthKit entity by ID if the given value is not nil.
func (hdc *HKDataCreate) SetNillableHealthkitID(id *uuid.UUID) *HKDataCreate {
	if id != nil {
		hdc = hdc.SetHealthkitID(*id)
	}
	return hdc
}

// SetHealthkit sets the "healthkit" edge to the HealthKit entity.
func (hdc *HKDataCreate) SetHealthkit(h *HealthKit) *HKDataCreate {
	return hdc.SetHealthkitID(h.ID)
}

// Mutation returns the HKDataMutation object of the builder.
func (hdc *HKDataCreate) Mutation() *HKDataMutation {
	return hdc.mutation
}

// Save creates the HKData in the database.
func (hdc *HKDataCreate) Save(ctx context.Context) (*HKData, error) {
	hdc.defaults()
	return withHooks(ctx, hdc.sqlSave, hdc.mutation, hdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hdc *HKDataCreate) SaveX(ctx context.Context) *HKData {
	v, err := hdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hdc *HKDataCreate) Exec(ctx context.Context) error {
	_, err := hdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hdc *HKDataCreate) ExecX(ctx context.Context) {
	if err := hdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hdc *HKDataCreate) defaults() {
	if _, ok := hdc.mutation.ID(); !ok {
		v := hkdata.DefaultID()
		hdc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hdc *HKDataCreate) check() error {
	if _, ok := hdc.mutation.DataID(); !ok {
		return &ValidationError{Name: "data_id", err: errors.New(`ent: missing required field "HKData.data_id"`)}
	}
	if _, ok := hdc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "HKData.type"`)}
	}
	if _, ok := hdc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "HKData.value"`)}
	}
	if _, ok := hdc.mutation.StartTimestamp(); !ok {
		return &ValidationError{Name: "start_timestamp", err: errors.New(`ent: missing required field "HKData.start_timestamp"`)}
	}
	if _, ok := hdc.mutation.EndTimestamp(); !ok {
		return &ValidationError{Name: "end_timestamp", err: errors.New(`ent: missing required field "HKData.end_timestamp"`)}
	}
	if _, ok := hdc.mutation.TimezoneID(); !ok {
		return &ValidationError{Name: "timezone_id", err: errors.New(`ent: missing required field "HKData.timezone_id"`)}
	}
	return nil
}

func (hdc *HKDataCreate) sqlSave(ctx context.Context) (*HKData, error) {
	if err := hdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	hdc.mutation.id = &_node.ID
	hdc.mutation.done = true
	return _node, nil
}

func (hdc *HKDataCreate) createSpec() (*HKData, *sqlgraph.CreateSpec) {
	var (
		_node = &HKData{config: hdc.config}
		_spec = sqlgraph.NewCreateSpec(hkdata.Table, sqlgraph.NewFieldSpec(hkdata.FieldID, field.TypeUUID))
	)
	if id, ok := hdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := hdc.mutation.DataID(); ok {
		_spec.SetField(hkdata.FieldDataID, field.TypeString, value)
		_node.DataID = value
	}
	if value, ok := hdc.mutation.GetType(); ok {
		_spec.SetField(hkdata.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := hdc.mutation.Value(); ok {
		_spec.SetField(hkdata.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if value, ok := hdc.mutation.StartTimestamp(); ok {
		_spec.SetField(hkdata.FieldStartTimestamp, field.TypeString, value)
		_node.StartTimestamp = value
	}
	if value, ok := hdc.mutation.EndTimestamp(); ok {
		_spec.SetField(hkdata.FieldEndTimestamp, field.TypeString, value)
		_node.EndTimestamp = value
	}
	if value, ok := hdc.mutation.TimezoneID(); ok {
		_spec.SetField(hkdata.FieldTimezoneID, field.TypeString, value)
		_node.TimezoneID = value
	}
	if nodes := hdc.mutation.HealthkitIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hkdata.HealthkitTable,
			Columns: []string{hkdata.HealthkitColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(healthkit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.health_kit_data = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HKDataCreateBulk is the builder for creating many HKData entities in bulk.
type HKDataCreateBulk struct {
	config
	builders []*HKDataCreate
}

// Save creates the HKData entities in the database.
func (hdcb *HKDataCreateBulk) Save(ctx context.Context) ([]*HKData, error) {
	specs := make([]*sqlgraph.CreateSpec, len(hdcb.builders))
	nodes := make([]*HKData, len(hdcb.builders))
	mutators := make([]Mutator, len(hdcb.builders))
	for i := range hdcb.builders {
		func(i int, root context.Context) {
			builder := hdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HKDataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hdcb *HKDataCreateBulk) SaveX(ctx context.Context) []*HKData {
	v, err := hdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hdcb *HKDataCreateBulk) Exec(ctx context.Context) error {
	_, err := hdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hdcb *HKDataCreateBulk) ExecX(ctx context.Context) {
	if err := hdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
