// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eesoymilk/health-statistic-api/ent/answer"
	"github.com/eesoymilk/health-statistic-api/ent/predicate"
	"github.com/eesoymilk/health-statistic-api/ent/questionnaire"
	"github.com/eesoymilk/health-statistic-api/ent/questionnaireresponse"
	"github.com/eesoymilk/health-statistic-api/ent/user"
	"github.com/google/uuid"
)

// QuestionnaireResponseUpdate is the builder for updating QuestionnaireResponse entities.
type QuestionnaireResponseUpdate struct {
	config
	hooks    []Hook
	mutation *QuestionnaireResponseMutation
}

// Where appends a list predicates to the QuestionnaireResponseUpdate builder.
func (qru *QuestionnaireResponseUpdate) Where(ps ...predicate.QuestionnaireResponse) *QuestionnaireResponseUpdate {
	qru.mutation.Where(ps...)
	return qru
}

// SetCreatedAt sets the "created_at" field.
func (qru *QuestionnaireResponseUpdate) SetCreatedAt(t time.Time) *QuestionnaireResponseUpdate {
	qru.mutation.SetCreatedAt(t)
	return qru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qru *QuestionnaireResponseUpdate) SetNillableCreatedAt(t *time.Time) *QuestionnaireResponseUpdate {
	if t != nil {
		qru.SetCreatedAt(*t)
	}
	return qru
}

// SetUserID sets the "user" edge to the User entity by ID.
func (qru *QuestionnaireResponseUpdate) SetUserID(id string) *QuestionnaireResponseUpdate {
	qru.mutation.SetUserID(id)
	return qru
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (qru *QuestionnaireResponseUpdate) SetNillableUserID(id *string) *QuestionnaireResponseUpdate {
	if id != nil {
		qru = qru.SetUserID(*id)
	}
	return qru
}

// SetUser sets the "user" edge to the User entity.
func (qru *QuestionnaireResponseUpdate) SetUser(u *User) *QuestionnaireResponseUpdate {
	return qru.SetUserID(u.ID)
}

// SetQuestionnaireID sets the "questionnaire" edge to the Questionnaire entity by ID.
func (qru *QuestionnaireResponseUpdate) SetQuestionnaireID(id uuid.UUID) *QuestionnaireResponseUpdate {
	qru.mutation.SetQuestionnaireID(id)
	return qru
}

// SetNillableQuestionnaireID sets the "questionnaire" edge to the Questionnaire entity by ID if the given value is not nil.
func (qru *QuestionnaireResponseUpdate) SetNillableQuestionnaireID(id *uuid.UUID) *QuestionnaireResponseUpdate {
	if id != nil {
		qru = qru.SetQuestionnaireID(*id)
	}
	return qru
}

// SetQuestionnaire sets the "questionnaire" edge to the Questionnaire entity.
func (qru *QuestionnaireResponseUpdate) SetQuestionnaire(q *Questionnaire) *QuestionnaireResponseUpdate {
	return qru.SetQuestionnaireID(q.ID)
}

// AddAnswerIDs adds the "answers" edge to the Answer entity by IDs.
func (qru *QuestionnaireResponseUpdate) AddAnswerIDs(ids ...uuid.UUID) *QuestionnaireResponseUpdate {
	qru.mutation.AddAnswerIDs(ids...)
	return qru
}

// AddAnswers adds the "answers" edges to the Answer entity.
func (qru *QuestionnaireResponseUpdate) AddAnswers(a ...*Answer) *QuestionnaireResponseUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return qru.AddAnswerIDs(ids...)
}

// Mutation returns the QuestionnaireResponseMutation object of the builder.
func (qru *QuestionnaireResponseUpdate) Mutation() *QuestionnaireResponseMutation {
	return qru.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (qru *QuestionnaireResponseUpdate) ClearUser() *QuestionnaireResponseUpdate {
	qru.mutation.ClearUser()
	return qru
}

// ClearQuestionnaire clears the "questionnaire" edge to the Questionnaire entity.
func (qru *QuestionnaireResponseUpdate) ClearQuestionnaire() *QuestionnaireResponseUpdate {
	qru.mutation.ClearQuestionnaire()
	return qru
}

// ClearAnswers clears all "answers" edges to the Answer entity.
func (qru *QuestionnaireResponseUpdate) ClearAnswers() *QuestionnaireResponseUpdate {
	qru.mutation.ClearAnswers()
	return qru
}

// RemoveAnswerIDs removes the "answers" edge to Answer entities by IDs.
func (qru *QuestionnaireResponseUpdate) RemoveAnswerIDs(ids ...uuid.UUID) *QuestionnaireResponseUpdate {
	qru.mutation.RemoveAnswerIDs(ids...)
	return qru
}

// RemoveAnswers removes "answers" edges to Answer entities.
func (qru *QuestionnaireResponseUpdate) RemoveAnswers(a ...*Answer) *QuestionnaireResponseUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return qru.RemoveAnswerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qru *QuestionnaireResponseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, qru.sqlSave, qru.mutation, qru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qru *QuestionnaireResponseUpdate) SaveX(ctx context.Context) int {
	affected, err := qru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qru *QuestionnaireResponseUpdate) Exec(ctx context.Context) error {
	_, err := qru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qru *QuestionnaireResponseUpdate) ExecX(ctx context.Context) {
	if err := qru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (qru *QuestionnaireResponseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(questionnaireresponse.Table, questionnaireresponse.Columns, sqlgraph.NewFieldSpec(questionnaireresponse.FieldID, field.TypeUUID))
	if ps := qru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qru.mutation.CreatedAt(); ok {
		_spec.SetField(questionnaireresponse.FieldCreatedAt, field.TypeTime, value)
	}
	if qru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionnaireresponse.UserTable,
			Columns: []string{questionnaireresponse.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionnaireresponse.UserTable,
			Columns: []string{questionnaireresponse.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qru.mutation.QuestionnaireCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionnaireresponse.QuestionnaireTable,
			Columns: []string{questionnaireresponse.QuestionnaireColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionnaire.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qru.mutation.QuestionnaireIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionnaireresponse.QuestionnaireTable,
			Columns: []string{questionnaireresponse.QuestionnaireColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionnaire.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qru.mutation.AnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questionnaireresponse.AnswersTable,
			Columns: []string{questionnaireresponse.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qru.mutation.RemovedAnswersIDs(); len(nodes) > 0 && !qru.mutation.AnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questionnaireresponse.AnswersTable,
			Columns: []string{questionnaireresponse.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qru.mutation.AnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questionnaireresponse.AnswersTable,
			Columns: []string{questionnaireresponse.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{questionnaireresponse.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qru.mutation.done = true
	return n, nil
}

// QuestionnaireResponseUpdateOne is the builder for updating a single QuestionnaireResponse entity.
type QuestionnaireResponseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QuestionnaireResponseMutation
}

// SetCreatedAt sets the "created_at" field.
func (qruo *QuestionnaireResponseUpdateOne) SetCreatedAt(t time.Time) *QuestionnaireResponseUpdateOne {
	qruo.mutation.SetCreatedAt(t)
	return qruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qruo *QuestionnaireResponseUpdateOne) SetNillableCreatedAt(t *time.Time) *QuestionnaireResponseUpdateOne {
	if t != nil {
		qruo.SetCreatedAt(*t)
	}
	return qruo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (qruo *QuestionnaireResponseUpdateOne) SetUserID(id string) *QuestionnaireResponseUpdateOne {
	qruo.mutation.SetUserID(id)
	return qruo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (qruo *QuestionnaireResponseUpdateOne) SetNillableUserID(id *string) *QuestionnaireResponseUpdateOne {
	if id != nil {
		qruo = qruo.SetUserID(*id)
	}
	return qruo
}

// SetUser sets the "user" edge to the User entity.
func (qruo *QuestionnaireResponseUpdateOne) SetUser(u *User) *QuestionnaireResponseUpdateOne {
	return qruo.SetUserID(u.ID)
}

// SetQuestionnaireID sets the "questionnaire" edge to the Questionnaire entity by ID.
func (qruo *QuestionnaireResponseUpdateOne) SetQuestionnaireID(id uuid.UUID) *QuestionnaireResponseUpdateOne {
	qruo.mutation.SetQuestionnaireID(id)
	return qruo
}

// SetNillableQuestionnaireID sets the "questionnaire" edge to the Questionnaire entity by ID if the given value is not nil.
func (qruo *QuestionnaireResponseUpdateOne) SetNillableQuestionnaireID(id *uuid.UUID) *QuestionnaireResponseUpdateOne {
	if id != nil {
		qruo = qruo.SetQuestionnaireID(*id)
	}
	return qruo
}

// SetQuestionnaire sets the "questionnaire" edge to the Questionnaire entity.
func (qruo *QuestionnaireResponseUpdateOne) SetQuestionnaire(q *Questionnaire) *QuestionnaireResponseUpdateOne {
	return qruo.SetQuestionnaireID(q.ID)
}

// AddAnswerIDs adds the "answers" edge to the Answer entity by IDs.
func (qruo *QuestionnaireResponseUpdateOne) AddAnswerIDs(ids ...uuid.UUID) *QuestionnaireResponseUpdateOne {
	qruo.mutation.AddAnswerIDs(ids...)
	return qruo
}

// AddAnswers adds the "answers" edges to the Answer entity.
func (qruo *QuestionnaireResponseUpdateOne) AddAnswers(a ...*Answer) *QuestionnaireResponseUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return qruo.AddAnswerIDs(ids...)
}

// Mutation returns the QuestionnaireResponseMutation object of the builder.
func (qruo *QuestionnaireResponseUpdateOne) Mutation() *QuestionnaireResponseMutation {
	return qruo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (qruo *QuestionnaireResponseUpdateOne) ClearUser() *QuestionnaireResponseUpdateOne {
	qruo.mutation.ClearUser()
	return qruo
}

// ClearQuestionnaire clears the "questionnaire" edge to the Questionnaire entity.
func (qruo *QuestionnaireResponseUpdateOne) ClearQuestionnaire() *QuestionnaireResponseUpdateOne {
	qruo.mutation.ClearQuestionnaire()
	return qruo
}

// ClearAnswers clears all "answers" edges to the Answer entity.
func (qruo *QuestionnaireResponseUpdateOne) ClearAnswers() *QuestionnaireResponseUpdateOne {
	qruo.mutation.ClearAnswers()
	return qruo
}

// RemoveAnswerIDs removes the "answers" edge to Answer entities by IDs.
func (qruo *QuestionnaireResponseUpdateOne) RemoveAnswerIDs(ids ...uuid.UUID) *QuestionnaireResponseUpdateOne {
	qruo.mutation.RemoveAnswerIDs(ids...)
	return qruo
}

// RemoveAnswers removes "answers" edges to Answer entities.
func (qruo *QuestionnaireResponseUpdateOne) RemoveAnswers(a ...*Answer) *QuestionnaireResponseUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return qruo.RemoveAnswerIDs(ids...)
}

// Where appends a list predicates to the QuestionnaireResponseUpdate builder.
func (qruo *QuestionnaireResponseUpdateOne) Where(ps ...predicate.QuestionnaireResponse) *QuestionnaireResponseUpdateOne {
	qruo.mutation.Where(ps...)
	return qruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (qruo *QuestionnaireResponseUpdateOne) Select(field string, fields ...string) *QuestionnaireResponseUpdateOne {
	qruo.fields = append([]string{field}, fields...)
	return qruo
}

// Save executes the query and returns the updated QuestionnaireResponse entity.
func (qruo *QuestionnaireResponseUpdateOne) Save(ctx context.Context) (*QuestionnaireResponse, error) {
	return withHooks(ctx, qruo.sqlSave, qruo.mutation, qruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qruo *QuestionnaireResponseUpdateOne) SaveX(ctx context.Context) *QuestionnaireResponse {
	node, err := qruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (qruo *QuestionnaireResponseUpdateOne) Exec(ctx context.Context) error {
	_, err := qruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qruo *QuestionnaireResponseUpdateOne) ExecX(ctx context.Context) {
	if err := qruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (qruo *QuestionnaireResponseUpdateOne) sqlSave(ctx context.Context) (_node *QuestionnaireResponse, err error) {
	_spec := sqlgraph.NewUpdateSpec(questionnaireresponse.Table, questionnaireresponse.Columns, sqlgraph.NewFieldSpec(questionnaireresponse.FieldID, field.TypeUUID))
	id, ok := qruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "QuestionnaireResponse.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := qruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, questionnaireresponse.FieldID)
		for _, f := range fields {
			if !questionnaireresponse.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != questionnaireresponse.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := qruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qruo.mutation.CreatedAt(); ok {
		_spec.SetField(questionnaireresponse.FieldCreatedAt, field.TypeTime, value)
	}
	if qruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionnaireresponse.UserTable,
			Columns: []string{questionnaireresponse.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionnaireresponse.UserTable,
			Columns: []string{questionnaireresponse.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qruo.mutation.QuestionnaireCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionnaireresponse.QuestionnaireTable,
			Columns: []string{questionnaireresponse.QuestionnaireColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionnaire.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qruo.mutation.QuestionnaireIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionnaireresponse.QuestionnaireTable,
			Columns: []string{questionnaireresponse.QuestionnaireColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionnaire.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qruo.mutation.AnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questionnaireresponse.AnswersTable,
			Columns: []string{questionnaireresponse.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qruo.mutation.RemovedAnswersIDs(); len(nodes) > 0 && !qruo.mutation.AnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questionnaireresponse.AnswersTable,
			Columns: []string{questionnaireresponse.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qruo.mutation.AnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questionnaireresponse.AnswersTable,
			Columns: []string{questionnaireresponse.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &QuestionnaireResponse{config: qruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, qruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{questionnaireresponse.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	qruo.mutation.done = true
	return _node, nil
}
