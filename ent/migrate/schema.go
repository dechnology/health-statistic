// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AnswersColumns holds the columns for the "answers" table.
	AnswersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "body", Type: field.TypeString, Size: 2147483647},
		{Name: "question_answers", Type: field.TypeInt, Nullable: true},
		{Name: "user_questionnaire_answers", Type: field.TypeInt, Nullable: true},
	}
	// AnswersTable holds the schema information for the "answers" table.
	AnswersTable = &schema.Table{
		Name:       "answers",
		Columns:    AnswersColumns,
		PrimaryKey: []*schema.Column{AnswersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "answers_questions_answers",
				Columns:    []*schema.Column{AnswersColumns[3]},
				RefColumns: []*schema.Column{QuestionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "answers_user_questionnaires_answers",
				Columns:    []*schema.Column{AnswersColumns[4]},
				RefColumns: []*schema.Column{UserQuestionnairesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// QuestionsColumns holds the columns for the "questions" table.
	QuestionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "body", Type: field.TypeString, Size: 2147483647},
		{Name: "type", Type: field.TypeString, Size: 2147483647},
		{Name: "questionnaire_questions", Type: field.TypeInt, Nullable: true},
	}
	// QuestionsTable holds the schema information for the "questions" table.
	QuestionsTable = &schema.Table{
		Name:       "questions",
		Columns:    QuestionsColumns,
		PrimaryKey: []*schema.Column{QuestionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "questions_questionnaires_questions",
				Columns:    []*schema.Column{QuestionsColumns[3]},
				RefColumns: []*schema.Column{QuestionnairesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// QuestionnairesColumns holds the columns for the "questionnaires" table.
	QuestionnairesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
	}
	// QuestionnairesTable holds the schema information for the "questionnaires" table.
	QuestionnairesTable = &schema.Table{
		Name:       "questionnaires",
		Columns:    QuestionnairesColumns,
		PrimaryKey: []*schema.Column{QuestionnairesColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "birth_year", Type: field.TypeInt},
		{Name: "height", Type: field.TypeFloat64},
		{Name: "weight", Type: field.TypeFloat64},
		{Name: "gender", Type: field.TypeEnum, Enums: []string{"male", "female", "nonbinary"}},
		{Name: "education_level", Type: field.TypeEnum, Enums: []string{"elementry_school_or_below", "middle_school", "high_school", "bachelor", "master", "doctorate"}},
		{Name: "occupation", Type: field.TypeEnum, Enums: []string{"student", "government_employee", "service_industry", "industry_and_commerce", "freelancer", "domestic"}},
		{Name: "marriage", Type: field.TypeEnum, Enums: []string{"single", "married", "divorced", "widowed"}},
		{Name: "medical_history", Type: field.TypeString, Nullable: true, Size: 100},
		{Name: "medication_status", Type: field.TypeString, Nullable: true, Size: 100},
		{Name: "demented_among_direct_relatives", Type: field.TypeBool},
		{Name: "head_injury_experience", Type: field.TypeBool},
		{Name: "ear_condition", Type: field.TypeEnum, Enums: []string{"normal", "slightly_affecting_conversation", "need_hearing_aid"}},
		{Name: "eyesight_condition", Type: field.TypeEnum, Enums: []string{"normal", "slightly_affecting_reading", "need_glasses"}},
		{Name: "smoking_habit", Type: field.TypeEnum, Enums: []string{"none", "sometimes", "everyday"}},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// UserQuestionnairesColumns holds the columns for the "user_questionnaires" table.
	UserQuestionnairesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "questionnaire_responses", Type: field.TypeInt, Nullable: true},
		{Name: "user_questionnaires", Type: field.TypeUUID, Nullable: true},
	}
	// UserQuestionnairesTable holds the schema information for the "user_questionnaires" table.
	UserQuestionnairesTable = &schema.Table{
		Name:       "user_questionnaires",
		Columns:    UserQuestionnairesColumns,
		PrimaryKey: []*schema.Column{UserQuestionnairesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_questionnaires_questionnaires_responses",
				Columns:    []*schema.Column{UserQuestionnairesColumns[2]},
				RefColumns: []*schema.Column{QuestionnairesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "user_questionnaires_users_questionnaires",
				Columns:    []*schema.Column{UserQuestionnairesColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AnswersTable,
		QuestionsTable,
		QuestionnairesTable,
		UsersTable,
		UserQuestionnairesTable,
	}
)

func init() {
	AnswersTable.ForeignKeys[0].RefTable = QuestionsTable
	AnswersTable.ForeignKeys[1].RefTable = UserQuestionnairesTable
	QuestionsTable.ForeignKeys[0].RefTable = QuestionnairesTable
	UserQuestionnairesTable.ForeignKeys[0].RefTable = QuestionnairesTable
	UserQuestionnairesTable.ForeignKeys[1].RefTable = UsersTable
}
