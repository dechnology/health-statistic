// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/eesoymilk/health-statistic-api/ent/questionnaire"
	"github.com/eesoymilk/health-statistic-api/ent/user"
	"github.com/eesoymilk/health-statistic-api/ent/userquestionnaire"
	"github.com/google/uuid"
)

// UserQuestionnaire is the model entity for the UserQuestionnaire schema.
type UserQuestionnaire struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuestionnaireQuery when eager-loading is set.
	Edges                   UserQuestionnaireEdges `json:"edges"`
	questionnaire_responses *int
	user_questionnaires     *uuid.UUID
	selectValues            sql.SelectValues
}

// UserQuestionnaireEdges holds the relations/edges for other nodes in the graph.
type UserQuestionnaireEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Questionnaire holds the value of the questionnaire edge.
	Questionnaire *Questionnaire `json:"questionnaire,omitempty"`
	// Answers holds the value of the answers edge.
	Answers []*Answer `json:"answers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserQuestionnaireEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// QuestionnaireOrErr returns the Questionnaire value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserQuestionnaireEdges) QuestionnaireOrErr() (*Questionnaire, error) {
	if e.loadedTypes[1] {
		if e.Questionnaire == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: questionnaire.Label}
		}
		return e.Questionnaire, nil
	}
	return nil, &NotLoadedError{edge: "questionnaire"}
}

// AnswersOrErr returns the Answers value or an error if the edge
// was not loaded in eager-loading.
func (e UserQuestionnaireEdges) AnswersOrErr() ([]*Answer, error) {
	if e.loadedTypes[2] {
		return e.Answers, nil
	}
	return nil, &NotLoadedError{edge: "answers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserQuestionnaire) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userquestionnaire.FieldID:
			values[i] = new(sql.NullInt64)
		case userquestionnaire.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case userquestionnaire.ForeignKeys[0]: // questionnaire_responses
			values[i] = new(sql.NullInt64)
		case userquestionnaire.ForeignKeys[1]: // user_questionnaires
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserQuestionnaire fields.
func (uq *UserQuestionnaire) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userquestionnaire.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uq.ID = int(value.Int64)
		case userquestionnaire.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				uq.CreatedAt = value.Time
			}
		case userquestionnaire.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field questionnaire_responses", value)
			} else if value.Valid {
				uq.questionnaire_responses = new(int)
				*uq.questionnaire_responses = int(value.Int64)
			}
		case userquestionnaire.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_questionnaires", values[i])
			} else if value.Valid {
				uq.user_questionnaires = new(uuid.UUID)
				*uq.user_questionnaires = *value.S.(*uuid.UUID)
			}
		default:
			uq.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserQuestionnaire.
// This includes values selected through modifiers, order, etc.
func (uq *UserQuestionnaire) Value(name string) (ent.Value, error) {
	return uq.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserQuestionnaire entity.
func (uq *UserQuestionnaire) QueryUser() *UserQuery {
	return NewUserQuestionnaireClient(uq.config).QueryUser(uq)
}

// QueryQuestionnaire queries the "questionnaire" edge of the UserQuestionnaire entity.
func (uq *UserQuestionnaire) QueryQuestionnaire() *QuestionnaireQuery {
	return NewUserQuestionnaireClient(uq.config).QueryQuestionnaire(uq)
}

// QueryAnswers queries the "answers" edge of the UserQuestionnaire entity.
func (uq *UserQuestionnaire) QueryAnswers() *AnswerQuery {
	return NewUserQuestionnaireClient(uq.config).QueryAnswers(uq)
}

// Update returns a builder for updating this UserQuestionnaire.
// Note that you need to call UserQuestionnaire.Unwrap() before calling this method if this UserQuestionnaire
// was returned from a transaction, and the transaction was committed or rolled back.
func (uq *UserQuestionnaire) Update() *UserQuestionnaireUpdateOne {
	return NewUserQuestionnaireClient(uq.config).UpdateOne(uq)
}

// Unwrap unwraps the UserQuestionnaire entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uq *UserQuestionnaire) Unwrap() *UserQuestionnaire {
	_tx, ok := uq.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserQuestionnaire is not a transactional entity")
	}
	uq.config.driver = _tx.drv
	return uq
}

// String implements the fmt.Stringer.
func (uq *UserQuestionnaire) String() string {
	var builder strings.Builder
	builder.WriteString("UserQuestionnaire(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uq.ID))
	builder.WriteString("created_at=")
	builder.WriteString(uq.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserQuestionnaires is a parsable slice of UserQuestionnaire.
type UserQuestionnaires []*UserQuestionnaire
