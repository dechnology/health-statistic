// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eesoymilk/health-statistic-api/ent/healthkit"
	"github.com/eesoymilk/health-statistic-api/ent/predicate"
)

// HealthKitDelete is the builder for deleting a HealthKit entity.
type HealthKitDelete struct {
	config
	hooks    []Hook
	mutation *HealthKitMutation
}

// Where appends a list predicates to the HealthKitDelete builder.
func (hkd *HealthKitDelete) Where(ps ...predicate.HealthKit) *HealthKitDelete {
	hkd.mutation.Where(ps...)
	return hkd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (hkd *HealthKitDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, hkd.sqlExec, hkd.mutation, hkd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (hkd *HealthKitDelete) ExecX(ctx context.Context) int {
	n, err := hkd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (hkd *HealthKitDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(healthkit.Table, sqlgraph.NewFieldSpec(healthkit.FieldID, field.TypeUUID))
	if ps := hkd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, hkd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	hkd.mutation.done = true
	return affected, err
}

// HealthKitDeleteOne is the builder for deleting a single HealthKit entity.
type HealthKitDeleteOne struct {
	hkd *HealthKitDelete
}

// Where appends a list predicates to the HealthKitDelete builder.
func (hkdo *HealthKitDeleteOne) Where(ps ...predicate.HealthKit) *HealthKitDeleteOne {
	hkdo.hkd.mutation.Where(ps...)
	return hkdo
}

// Exec executes the deletion query.
func (hkdo *HealthKitDeleteOne) Exec(ctx context.Context) error {
	n, err := hkdo.hkd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{healthkit.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (hkdo *HealthKitDeleteOne) ExecX(ctx context.Context) {
	if err := hkdo.Exec(ctx); err != nil {
		panic(err)
	}
}
