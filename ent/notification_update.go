// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eesoymilk/health-statistic-api/ent/mycard"
	"github.com/eesoymilk/health-statistic-api/ent/notification"
	"github.com/eesoymilk/health-statistic-api/ent/predicate"
	"github.com/eesoymilk/health-statistic-api/ent/price"
	"github.com/eesoymilk/health-statistic-api/ent/user"
	"github.com/google/uuid"
)

// NotificationUpdate is the builder for updating Notification entities.
type NotificationUpdate struct {
	config
	hooks    []Hook
	mutation *NotificationMutation
}

// Where appends a list predicates to the NotificationUpdate builder.
func (nu *NotificationUpdate) Where(ps ...predicate.Notification) *NotificationUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetType sets the "type" field.
func (nu *NotificationUpdate) SetType(n notification.Type) *NotificationUpdate {
	nu.mutation.SetType(n)
	return nu
}

// SetSentAt sets the "sent_at" field.
func (nu *NotificationUpdate) SetSentAt(t time.Time) *NotificationUpdate {
	nu.mutation.SetSentAt(t)
	return nu
}

// SetNillableSentAt sets the "sent_at" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableSentAt(t *time.Time) *NotificationUpdate {
	if t != nil {
		nu.SetSentAt(*t)
	}
	return nu
}

// ClearSentAt clears the value of the "sent_at" field.
func (nu *NotificationUpdate) ClearSentAt() *NotificationUpdate {
	nu.mutation.ClearSentAt()
	return nu
}

// SetReadAt sets the "read_at" field.
func (nu *NotificationUpdate) SetReadAt(t time.Time) *NotificationUpdate {
	nu.mutation.SetReadAt(t)
	return nu
}

// SetNillableReadAt sets the "read_at" field if the given value is not nil.
func (nu *NotificationUpdate) SetNillableReadAt(t *time.Time) *NotificationUpdate {
	if t != nil {
		nu.SetReadAt(*t)
	}
	return nu
}

// ClearReadAt clears the value of the "read_at" field.
func (nu *NotificationUpdate) ClearReadAt() *NotificationUpdate {
	nu.mutation.ClearReadAt()
	return nu
}

// SetMessage sets the "message" field.
func (nu *NotificationUpdate) SetMessage(s string) *NotificationUpdate {
	nu.mutation.SetMessage(s)
	return nu
}

// SetRecipientID sets the "recipient" edge to the User entity by ID.
func (nu *NotificationUpdate) SetRecipientID(id string) *NotificationUpdate {
	nu.mutation.SetRecipientID(id)
	return nu
}

// SetNillableRecipientID sets the "recipient" edge to the User entity by ID if the given value is not nil.
func (nu *NotificationUpdate) SetNillableRecipientID(id *string) *NotificationUpdate {
	if id != nil {
		nu = nu.SetRecipientID(*id)
	}
	return nu
}

// SetRecipient sets the "recipient" edge to the User entity.
func (nu *NotificationUpdate) SetRecipient(u *User) *NotificationUpdate {
	return nu.SetRecipientID(u.ID)
}

// SetMycardID sets the "mycard" edge to the MyCard entity by ID.
func (nu *NotificationUpdate) SetMycardID(id string) *NotificationUpdate {
	nu.mutation.SetMycardID(id)
	return nu
}

// SetNillableMycardID sets the "mycard" edge to the MyCard entity by ID if the given value is not nil.
func (nu *NotificationUpdate) SetNillableMycardID(id *string) *NotificationUpdate {
	if id != nil {
		nu = nu.SetMycardID(*id)
	}
	return nu
}

// SetMycard sets the "mycard" edge to the MyCard entity.
func (nu *NotificationUpdate) SetMycard(m *MyCard) *NotificationUpdate {
	return nu.SetMycardID(m.ID)
}

// SetPriceID sets the "price" edge to the Price entity by ID.
func (nu *NotificationUpdate) SetPriceID(id uuid.UUID) *NotificationUpdate {
	nu.mutation.SetPriceID(id)
	return nu
}

// SetNillablePriceID sets the "price" edge to the Price entity by ID if the given value is not nil.
func (nu *NotificationUpdate) SetNillablePriceID(id *uuid.UUID) *NotificationUpdate {
	if id != nil {
		nu = nu.SetPriceID(*id)
	}
	return nu
}

// SetPrice sets the "price" edge to the Price entity.
func (nu *NotificationUpdate) SetPrice(p *Price) *NotificationUpdate {
	return nu.SetPriceID(p.ID)
}

// Mutation returns the NotificationMutation object of the builder.
func (nu *NotificationUpdate) Mutation() *NotificationMutation {
	return nu.mutation
}

// ClearRecipient clears the "recipient" edge to the User entity.
func (nu *NotificationUpdate) ClearRecipient() *NotificationUpdate {
	nu.mutation.ClearRecipient()
	return nu
}

// ClearMycard clears the "mycard" edge to the MyCard entity.
func (nu *NotificationUpdate) ClearMycard() *NotificationUpdate {
	nu.mutation.ClearMycard()
	return nu
}

// ClearPrice clears the "price" edge to the Price entity.
func (nu *NotificationUpdate) ClearPrice() *NotificationUpdate {
	nu.mutation.ClearPrice()
	return nu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NotificationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NotificationUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NotificationUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NotificationUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nu *NotificationUpdate) check() error {
	if v, ok := nu.mutation.GetType(); ok {
		if err := notification.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Notification.type": %w`, err)}
		}
	}
	return nil
}

func (nu *NotificationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(notification.Table, notification.Columns, sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.GetType(); ok {
		_spec.SetField(notification.FieldType, field.TypeEnum, value)
	}
	if value, ok := nu.mutation.SentAt(); ok {
		_spec.SetField(notification.FieldSentAt, field.TypeTime, value)
	}
	if nu.mutation.SentAtCleared() {
		_spec.ClearField(notification.FieldSentAt, field.TypeTime)
	}
	if value, ok := nu.mutation.ReadAt(); ok {
		_spec.SetField(notification.FieldReadAt, field.TypeTime, value)
	}
	if nu.mutation.ReadAtCleared() {
		_spec.ClearField(notification.FieldReadAt, field.TypeTime)
	}
	if value, ok := nu.mutation.Message(); ok {
		_spec.SetField(notification.FieldMessage, field.TypeString, value)
	}
	if nu.mutation.RecipientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.RecipientTable,
			Columns: []string{notification.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RecipientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.RecipientTable,
			Columns: []string{notification.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.MycardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.MycardTable,
			Columns: []string{notification.MycardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mycard.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.MycardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.MycardTable,
			Columns: []string{notification.MycardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mycard.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.PriceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.PriceTable,
			Columns: []string{notification.PriceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(price.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.PriceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.PriceTable,
			Columns: []string{notification.PriceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(price.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NotificationUpdateOne is the builder for updating a single Notification entity.
type NotificationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NotificationMutation
}

// SetType sets the "type" field.
func (nuo *NotificationUpdateOne) SetType(n notification.Type) *NotificationUpdateOne {
	nuo.mutation.SetType(n)
	return nuo
}

// SetSentAt sets the "sent_at" field.
func (nuo *NotificationUpdateOne) SetSentAt(t time.Time) *NotificationUpdateOne {
	nuo.mutation.SetSentAt(t)
	return nuo
}

// SetNillableSentAt sets the "sent_at" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableSentAt(t *time.Time) *NotificationUpdateOne {
	if t != nil {
		nuo.SetSentAt(*t)
	}
	return nuo
}

// ClearSentAt clears the value of the "sent_at" field.
func (nuo *NotificationUpdateOne) ClearSentAt() *NotificationUpdateOne {
	nuo.mutation.ClearSentAt()
	return nuo
}

// SetReadAt sets the "read_at" field.
func (nuo *NotificationUpdateOne) SetReadAt(t time.Time) *NotificationUpdateOne {
	nuo.mutation.SetReadAt(t)
	return nuo
}

// SetNillableReadAt sets the "read_at" field if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableReadAt(t *time.Time) *NotificationUpdateOne {
	if t != nil {
		nuo.SetReadAt(*t)
	}
	return nuo
}

// ClearReadAt clears the value of the "read_at" field.
func (nuo *NotificationUpdateOne) ClearReadAt() *NotificationUpdateOne {
	nuo.mutation.ClearReadAt()
	return nuo
}

// SetMessage sets the "message" field.
func (nuo *NotificationUpdateOne) SetMessage(s string) *NotificationUpdateOne {
	nuo.mutation.SetMessage(s)
	return nuo
}

// SetRecipientID sets the "recipient" edge to the User entity by ID.
func (nuo *NotificationUpdateOne) SetRecipientID(id string) *NotificationUpdateOne {
	nuo.mutation.SetRecipientID(id)
	return nuo
}

// SetNillableRecipientID sets the "recipient" edge to the User entity by ID if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableRecipientID(id *string) *NotificationUpdateOne {
	if id != nil {
		nuo = nuo.SetRecipientID(*id)
	}
	return nuo
}

// SetRecipient sets the "recipient" edge to the User entity.
func (nuo *NotificationUpdateOne) SetRecipient(u *User) *NotificationUpdateOne {
	return nuo.SetRecipientID(u.ID)
}

// SetMycardID sets the "mycard" edge to the MyCard entity by ID.
func (nuo *NotificationUpdateOne) SetMycardID(id string) *NotificationUpdateOne {
	nuo.mutation.SetMycardID(id)
	return nuo
}

// SetNillableMycardID sets the "mycard" edge to the MyCard entity by ID if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillableMycardID(id *string) *NotificationUpdateOne {
	if id != nil {
		nuo = nuo.SetMycardID(*id)
	}
	return nuo
}

// SetMycard sets the "mycard" edge to the MyCard entity.
func (nuo *NotificationUpdateOne) SetMycard(m *MyCard) *NotificationUpdateOne {
	return nuo.SetMycardID(m.ID)
}

// SetPriceID sets the "price" edge to the Price entity by ID.
func (nuo *NotificationUpdateOne) SetPriceID(id uuid.UUID) *NotificationUpdateOne {
	nuo.mutation.SetPriceID(id)
	return nuo
}

// SetNillablePriceID sets the "price" edge to the Price entity by ID if the given value is not nil.
func (nuo *NotificationUpdateOne) SetNillablePriceID(id *uuid.UUID) *NotificationUpdateOne {
	if id != nil {
		nuo = nuo.SetPriceID(*id)
	}
	return nuo
}

// SetPrice sets the "price" edge to the Price entity.
func (nuo *NotificationUpdateOne) SetPrice(p *Price) *NotificationUpdateOne {
	return nuo.SetPriceID(p.ID)
}

// Mutation returns the NotificationMutation object of the builder.
func (nuo *NotificationUpdateOne) Mutation() *NotificationMutation {
	return nuo.mutation
}

// ClearRecipient clears the "recipient" edge to the User entity.
func (nuo *NotificationUpdateOne) ClearRecipient() *NotificationUpdateOne {
	nuo.mutation.ClearRecipient()
	return nuo
}

// ClearMycard clears the "mycard" edge to the MyCard entity.
func (nuo *NotificationUpdateOne) ClearMycard() *NotificationUpdateOne {
	nuo.mutation.ClearMycard()
	return nuo
}

// ClearPrice clears the "price" edge to the Price entity.
func (nuo *NotificationUpdateOne) ClearPrice() *NotificationUpdateOne {
	nuo.mutation.ClearPrice()
	return nuo
}

// Where appends a list predicates to the NotificationUpdate builder.
func (nuo *NotificationUpdateOne) Where(ps ...predicate.Notification) *NotificationUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NotificationUpdateOne) Select(field string, fields ...string) *NotificationUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Notification entity.
func (nuo *NotificationUpdateOne) Save(ctx context.Context) (*Notification, error) {
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NotificationUpdateOne) SaveX(ctx context.Context) *Notification {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NotificationUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NotificationUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NotificationUpdateOne) check() error {
	if v, ok := nuo.mutation.GetType(); ok {
		if err := notification.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Notification.type": %w`, err)}
		}
	}
	return nil
}

func (nuo *NotificationUpdateOne) sqlSave(ctx context.Context) (_node *Notification, err error) {
	if err := nuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notification.Table, notification.Columns, sqlgraph.NewFieldSpec(notification.FieldID, field.TypeUUID))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Notification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notification.FieldID)
		for _, f := range fields {
			if !notification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.GetType(); ok {
		_spec.SetField(notification.FieldType, field.TypeEnum, value)
	}
	if value, ok := nuo.mutation.SentAt(); ok {
		_spec.SetField(notification.FieldSentAt, field.TypeTime, value)
	}
	if nuo.mutation.SentAtCleared() {
		_spec.ClearField(notification.FieldSentAt, field.TypeTime)
	}
	if value, ok := nuo.mutation.ReadAt(); ok {
		_spec.SetField(notification.FieldReadAt, field.TypeTime, value)
	}
	if nuo.mutation.ReadAtCleared() {
		_spec.ClearField(notification.FieldReadAt, field.TypeTime)
	}
	if value, ok := nuo.mutation.Message(); ok {
		_spec.SetField(notification.FieldMessage, field.TypeString, value)
	}
	if nuo.mutation.RecipientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.RecipientTable,
			Columns: []string{notification.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RecipientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.RecipientTable,
			Columns: []string{notification.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.MycardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.MycardTable,
			Columns: []string{notification.MycardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mycard.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.MycardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.MycardTable,
			Columns: []string{notification.MycardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mycard.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.PriceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.PriceTable,
			Columns: []string{notification.PriceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(price.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.PriceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notification.PriceTable,
			Columns: []string{notification.PriceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(price.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Notification{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
