// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eesoymilk/health-statistic-api/ent/predicate"
	"github.com/eesoymilk/health-statistic-api/ent/questionnaire"
)

// QuestionnaireDelete is the builder for deleting a Questionnaire entity.
type QuestionnaireDelete struct {
	config
	hooks    []Hook
	mutation *QuestionnaireMutation
}

// Where appends a list predicates to the QuestionnaireDelete builder.
func (qd *QuestionnaireDelete) Where(ps ...predicate.Questionnaire) *QuestionnaireDelete {
	qd.mutation.Where(ps...)
	return qd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (qd *QuestionnaireDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, qd.sqlExec, qd.mutation, qd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (qd *QuestionnaireDelete) ExecX(ctx context.Context) int {
	n, err := qd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (qd *QuestionnaireDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(questionnaire.Table, sqlgraph.NewFieldSpec(questionnaire.FieldID, field.TypeUUID))
	if ps := qd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, qd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	qd.mutation.done = true
	return affected, err
}

// QuestionnaireDeleteOne is the builder for deleting a single Questionnaire entity.
type QuestionnaireDeleteOne struct {
	qd *QuestionnaireDelete
}

// Where appends a list predicates to the QuestionnaireDelete builder.
func (qdo *QuestionnaireDeleteOne) Where(ps ...predicate.Questionnaire) *QuestionnaireDeleteOne {
	qdo.qd.mutation.Where(ps...)
	return qdo
}

// Exec executes the deletion query.
func (qdo *QuestionnaireDeleteOne) Exec(ctx context.Context) error {
	n, err := qdo.qd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{questionnaire.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (qdo *QuestionnaireDeleteOne) ExecX(ctx context.Context) {
	if err := qdo.Exec(ctx); err != nil {
		panic(err)
	}
}
