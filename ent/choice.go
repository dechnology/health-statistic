// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/eesoymilk/health-statistic-api/ent/answer"
	"github.com/eesoymilk/health-statistic-api/ent/choice"
	"github.com/eesoymilk/health-statistic-api/ent/question"
	"github.com/google/uuid"
)

// Choice is the model entity for the Choice schema.
type Choice struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Body holds the value of the "body" field.
	Body string `json:"body,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChoiceQuery when eager-loading is set.
	Edges            ChoiceEdges `json:"-"`
	answer_chosen    *uuid.UUID
	question_choices *uuid.UUID
	selectValues     sql.SelectValues
}

// ChoiceEdges holds the relations/edges for other nodes in the graph.
type ChoiceEdges struct {
	// Quesion holds the value of the quesion edge.
	Quesion *Question `json:"quesion,omitempty"`
	// Answer holds the value of the answer edge.
	Answer *Answer `json:"answer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// QuesionOrErr returns the Quesion value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChoiceEdges) QuesionOrErr() (*Question, error) {
	if e.loadedTypes[0] {
		if e.Quesion == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: question.Label}
		}
		return e.Quesion, nil
	}
	return nil, &NotLoadedError{edge: "quesion"}
}

// AnswerOrErr returns the Answer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChoiceEdges) AnswerOrErr() (*Answer, error) {
	if e.loadedTypes[1] {
		if e.Answer == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: answer.Label}
		}
		return e.Answer, nil
	}
	return nil, &NotLoadedError{edge: "answer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Choice) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case choice.FieldOrder:
			values[i] = new(sql.NullInt64)
		case choice.FieldBody:
			values[i] = new(sql.NullString)
		case choice.FieldID:
			values[i] = new(uuid.UUID)
		case choice.ForeignKeys[0]: // answer_chosen
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case choice.ForeignKeys[1]: // question_choices
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Choice fields.
func (c *Choice) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case choice.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case choice.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				c.Body = value.String
			}
		case choice.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				c.Order = int(value.Int64)
			}
		case choice.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field answer_chosen", values[i])
			} else if value.Valid {
				c.answer_chosen = new(uuid.UUID)
				*c.answer_chosen = *value.S.(*uuid.UUID)
			}
		case choice.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field question_choices", values[i])
			} else if value.Valid {
				c.question_choices = new(uuid.UUID)
				*c.question_choices = *value.S.(*uuid.UUID)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Choice.
// This includes values selected through modifiers, order, etc.
func (c *Choice) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryQuesion queries the "quesion" edge of the Choice entity.
func (c *Choice) QueryQuesion() *QuestionQuery {
	return NewChoiceClient(c.config).QueryQuesion(c)
}

// QueryAnswer queries the "answer" edge of the Choice entity.
func (c *Choice) QueryAnswer() *AnswerQuery {
	return NewChoiceClient(c.config).QueryAnswer(c)
}

// Update returns a builder for updating this Choice.
// Note that you need to call Choice.Unwrap() before calling this method if this Choice
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Choice) Update() *ChoiceUpdateOne {
	return NewChoiceClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Choice entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Choice) Unwrap() *Choice {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Choice is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Choice) String() string {
	var builder strings.Builder
	builder.WriteString("Choice(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("body=")
	builder.WriteString(c.Body)
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", c.Order))
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (c *Choice) MarshalJSON() ([]byte, error) {
	type Alias Choice
	return json.Marshal(&struct {
		*Alias
		ChoiceEdges
	}{
		Alias:       (*Alias)(c),
		ChoiceEdges: c.Edges,
	})
}

// Choices is a parsable slice of Choice.
type Choices []*Choice
