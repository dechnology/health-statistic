// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eesoymilk/health-statistic-api/ent/answer"
	"github.com/eesoymilk/health-statistic-api/ent/predicate"
	"github.com/eesoymilk/health-statistic-api/ent/questionnaire"
	"github.com/eesoymilk/health-statistic-api/ent/user"
	"github.com/eesoymilk/health-statistic-api/ent/userquestionnaire"
	"github.com/google/uuid"
)

// UserQuestionnaireUpdate is the builder for updating UserQuestionnaire entities.
type UserQuestionnaireUpdate struct {
	config
	hooks    []Hook
	mutation *UserQuestionnaireMutation
}

// Where appends a list predicates to the UserQuestionnaireUpdate builder.
func (uqu *UserQuestionnaireUpdate) Where(ps ...predicate.UserQuestionnaire) *UserQuestionnaireUpdate {
	uqu.mutation.Where(ps...)
	return uqu
}

// SetCreatedAt sets the "created_at" field.
func (uqu *UserQuestionnaireUpdate) SetCreatedAt(t time.Time) *UserQuestionnaireUpdate {
	uqu.mutation.SetCreatedAt(t)
	return uqu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uqu *UserQuestionnaireUpdate) SetNillableCreatedAt(t *time.Time) *UserQuestionnaireUpdate {
	if t != nil {
		uqu.SetCreatedAt(*t)
	}
	return uqu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (uqu *UserQuestionnaireUpdate) SetUserID(id uuid.UUID) *UserQuestionnaireUpdate {
	uqu.mutation.SetUserID(id)
	return uqu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (uqu *UserQuestionnaireUpdate) SetNillableUserID(id *uuid.UUID) *UserQuestionnaireUpdate {
	if id != nil {
		uqu = uqu.SetUserID(*id)
	}
	return uqu
}

// SetUser sets the "user" edge to the User entity.
func (uqu *UserQuestionnaireUpdate) SetUser(u *User) *UserQuestionnaireUpdate {
	return uqu.SetUserID(u.ID)
}

// SetQuestionnaireID sets the "questionnaire" edge to the Questionnaire entity by ID.
func (uqu *UserQuestionnaireUpdate) SetQuestionnaireID(id int) *UserQuestionnaireUpdate {
	uqu.mutation.SetQuestionnaireID(id)
	return uqu
}

// SetNillableQuestionnaireID sets the "questionnaire" edge to the Questionnaire entity by ID if the given value is not nil.
func (uqu *UserQuestionnaireUpdate) SetNillableQuestionnaireID(id *int) *UserQuestionnaireUpdate {
	if id != nil {
		uqu = uqu.SetQuestionnaireID(*id)
	}
	return uqu
}

// SetQuestionnaire sets the "questionnaire" edge to the Questionnaire entity.
func (uqu *UserQuestionnaireUpdate) SetQuestionnaire(q *Questionnaire) *UserQuestionnaireUpdate {
	return uqu.SetQuestionnaireID(q.ID)
}

// AddAnswerIDs adds the "answers" edge to the Answer entity by IDs.
func (uqu *UserQuestionnaireUpdate) AddAnswerIDs(ids ...int) *UserQuestionnaireUpdate {
	uqu.mutation.AddAnswerIDs(ids...)
	return uqu
}

// AddAnswers adds the "answers" edges to the Answer entity.
func (uqu *UserQuestionnaireUpdate) AddAnswers(a ...*Answer) *UserQuestionnaireUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uqu.AddAnswerIDs(ids...)
}

// Mutation returns the UserQuestionnaireMutation object of the builder.
func (uqu *UserQuestionnaireUpdate) Mutation() *UserQuestionnaireMutation {
	return uqu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uqu *UserQuestionnaireUpdate) ClearUser() *UserQuestionnaireUpdate {
	uqu.mutation.ClearUser()
	return uqu
}

// ClearQuestionnaire clears the "questionnaire" edge to the Questionnaire entity.
func (uqu *UserQuestionnaireUpdate) ClearQuestionnaire() *UserQuestionnaireUpdate {
	uqu.mutation.ClearQuestionnaire()
	return uqu
}

// ClearAnswers clears all "answers" edges to the Answer entity.
func (uqu *UserQuestionnaireUpdate) ClearAnswers() *UserQuestionnaireUpdate {
	uqu.mutation.ClearAnswers()
	return uqu
}

// RemoveAnswerIDs removes the "answers" edge to Answer entities by IDs.
func (uqu *UserQuestionnaireUpdate) RemoveAnswerIDs(ids ...int) *UserQuestionnaireUpdate {
	uqu.mutation.RemoveAnswerIDs(ids...)
	return uqu
}

// RemoveAnswers removes "answers" edges to Answer entities.
func (uqu *UserQuestionnaireUpdate) RemoveAnswers(a ...*Answer) *UserQuestionnaireUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uqu.RemoveAnswerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uqu *UserQuestionnaireUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uqu.sqlSave, uqu.mutation, uqu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uqu *UserQuestionnaireUpdate) SaveX(ctx context.Context) int {
	affected, err := uqu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uqu *UserQuestionnaireUpdate) Exec(ctx context.Context) error {
	_, err := uqu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uqu *UserQuestionnaireUpdate) ExecX(ctx context.Context) {
	if err := uqu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uqu *UserQuestionnaireUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userquestionnaire.Table, userquestionnaire.Columns, sqlgraph.NewFieldSpec(userquestionnaire.FieldID, field.TypeInt))
	if ps := uqu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uqu.mutation.CreatedAt(); ok {
		_spec.SetField(userquestionnaire.FieldCreatedAt, field.TypeTime, value)
	}
	if uqu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userquestionnaire.UserTable,
			Columns: []string{userquestionnaire.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uqu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userquestionnaire.UserTable,
			Columns: []string{userquestionnaire.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uqu.mutation.QuestionnaireCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userquestionnaire.QuestionnaireTable,
			Columns: []string{userquestionnaire.QuestionnaireColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionnaire.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uqu.mutation.QuestionnaireIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userquestionnaire.QuestionnaireTable,
			Columns: []string{userquestionnaire.QuestionnaireColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionnaire.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uqu.mutation.AnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userquestionnaire.AnswersTable,
			Columns: []string{userquestionnaire.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uqu.mutation.RemovedAnswersIDs(); len(nodes) > 0 && !uqu.mutation.AnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userquestionnaire.AnswersTable,
			Columns: []string{userquestionnaire.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uqu.mutation.AnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userquestionnaire.AnswersTable,
			Columns: []string{userquestionnaire.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uqu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userquestionnaire.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uqu.mutation.done = true
	return n, nil
}

// UserQuestionnaireUpdateOne is the builder for updating a single UserQuestionnaire entity.
type UserQuestionnaireUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserQuestionnaireMutation
}

// SetCreatedAt sets the "created_at" field.
func (uquo *UserQuestionnaireUpdateOne) SetCreatedAt(t time.Time) *UserQuestionnaireUpdateOne {
	uquo.mutation.SetCreatedAt(t)
	return uquo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uquo *UserQuestionnaireUpdateOne) SetNillableCreatedAt(t *time.Time) *UserQuestionnaireUpdateOne {
	if t != nil {
		uquo.SetCreatedAt(*t)
	}
	return uquo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (uquo *UserQuestionnaireUpdateOne) SetUserID(id uuid.UUID) *UserQuestionnaireUpdateOne {
	uquo.mutation.SetUserID(id)
	return uquo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (uquo *UserQuestionnaireUpdateOne) SetNillableUserID(id *uuid.UUID) *UserQuestionnaireUpdateOne {
	if id != nil {
		uquo = uquo.SetUserID(*id)
	}
	return uquo
}

// SetUser sets the "user" edge to the User entity.
func (uquo *UserQuestionnaireUpdateOne) SetUser(u *User) *UserQuestionnaireUpdateOne {
	return uquo.SetUserID(u.ID)
}

// SetQuestionnaireID sets the "questionnaire" edge to the Questionnaire entity by ID.
func (uquo *UserQuestionnaireUpdateOne) SetQuestionnaireID(id int) *UserQuestionnaireUpdateOne {
	uquo.mutation.SetQuestionnaireID(id)
	return uquo
}

// SetNillableQuestionnaireID sets the "questionnaire" edge to the Questionnaire entity by ID if the given value is not nil.
func (uquo *UserQuestionnaireUpdateOne) SetNillableQuestionnaireID(id *int) *UserQuestionnaireUpdateOne {
	if id != nil {
		uquo = uquo.SetQuestionnaireID(*id)
	}
	return uquo
}

// SetQuestionnaire sets the "questionnaire" edge to the Questionnaire entity.
func (uquo *UserQuestionnaireUpdateOne) SetQuestionnaire(q *Questionnaire) *UserQuestionnaireUpdateOne {
	return uquo.SetQuestionnaireID(q.ID)
}

// AddAnswerIDs adds the "answers" edge to the Answer entity by IDs.
func (uquo *UserQuestionnaireUpdateOne) AddAnswerIDs(ids ...int) *UserQuestionnaireUpdateOne {
	uquo.mutation.AddAnswerIDs(ids...)
	return uquo
}

// AddAnswers adds the "answers" edges to the Answer entity.
func (uquo *UserQuestionnaireUpdateOne) AddAnswers(a ...*Answer) *UserQuestionnaireUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uquo.AddAnswerIDs(ids...)
}

// Mutation returns the UserQuestionnaireMutation object of the builder.
func (uquo *UserQuestionnaireUpdateOne) Mutation() *UserQuestionnaireMutation {
	return uquo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (uquo *UserQuestionnaireUpdateOne) ClearUser() *UserQuestionnaireUpdateOne {
	uquo.mutation.ClearUser()
	return uquo
}

// ClearQuestionnaire clears the "questionnaire" edge to the Questionnaire entity.
func (uquo *UserQuestionnaireUpdateOne) ClearQuestionnaire() *UserQuestionnaireUpdateOne {
	uquo.mutation.ClearQuestionnaire()
	return uquo
}

// ClearAnswers clears all "answers" edges to the Answer entity.
func (uquo *UserQuestionnaireUpdateOne) ClearAnswers() *UserQuestionnaireUpdateOne {
	uquo.mutation.ClearAnswers()
	return uquo
}

// RemoveAnswerIDs removes the "answers" edge to Answer entities by IDs.
func (uquo *UserQuestionnaireUpdateOne) RemoveAnswerIDs(ids ...int) *UserQuestionnaireUpdateOne {
	uquo.mutation.RemoveAnswerIDs(ids...)
	return uquo
}

// RemoveAnswers removes "answers" edges to Answer entities.
func (uquo *UserQuestionnaireUpdateOne) RemoveAnswers(a ...*Answer) *UserQuestionnaireUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uquo.RemoveAnswerIDs(ids...)
}

// Where appends a list predicates to the UserQuestionnaireUpdate builder.
func (uquo *UserQuestionnaireUpdateOne) Where(ps ...predicate.UserQuestionnaire) *UserQuestionnaireUpdateOne {
	uquo.mutation.Where(ps...)
	return uquo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uquo *UserQuestionnaireUpdateOne) Select(field string, fields ...string) *UserQuestionnaireUpdateOne {
	uquo.fields = append([]string{field}, fields...)
	return uquo
}

// Save executes the query and returns the updated UserQuestionnaire entity.
func (uquo *UserQuestionnaireUpdateOne) Save(ctx context.Context) (*UserQuestionnaire, error) {
	return withHooks(ctx, uquo.sqlSave, uquo.mutation, uquo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uquo *UserQuestionnaireUpdateOne) SaveX(ctx context.Context) *UserQuestionnaire {
	node, err := uquo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uquo *UserQuestionnaireUpdateOne) Exec(ctx context.Context) error {
	_, err := uquo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uquo *UserQuestionnaireUpdateOne) ExecX(ctx context.Context) {
	if err := uquo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uquo *UserQuestionnaireUpdateOne) sqlSave(ctx context.Context) (_node *UserQuestionnaire, err error) {
	_spec := sqlgraph.NewUpdateSpec(userquestionnaire.Table, userquestionnaire.Columns, sqlgraph.NewFieldSpec(userquestionnaire.FieldID, field.TypeInt))
	id, ok := uquo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserQuestionnaire.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uquo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userquestionnaire.FieldID)
		for _, f := range fields {
			if !userquestionnaire.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userquestionnaire.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uquo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uquo.mutation.CreatedAt(); ok {
		_spec.SetField(userquestionnaire.FieldCreatedAt, field.TypeTime, value)
	}
	if uquo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userquestionnaire.UserTable,
			Columns: []string{userquestionnaire.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uquo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userquestionnaire.UserTable,
			Columns: []string{userquestionnaire.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uquo.mutation.QuestionnaireCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userquestionnaire.QuestionnaireTable,
			Columns: []string{userquestionnaire.QuestionnaireColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionnaire.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uquo.mutation.QuestionnaireIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userquestionnaire.QuestionnaireTable,
			Columns: []string{userquestionnaire.QuestionnaireColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionnaire.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uquo.mutation.AnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userquestionnaire.AnswersTable,
			Columns: []string{userquestionnaire.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uquo.mutation.RemovedAnswersIDs(); len(nodes) > 0 && !uquo.mutation.AnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userquestionnaire.AnswersTable,
			Columns: []string{userquestionnaire.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uquo.mutation.AnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userquestionnaire.AnswersTable,
			Columns: []string{userquestionnaire.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserQuestionnaire{config: uquo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uquo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userquestionnaire.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uquo.mutation.done = true
	return _node, nil
}
