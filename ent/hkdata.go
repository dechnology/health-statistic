// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/eesoymilk/health-statistic-api/ent/healthkit"
	"github.com/eesoymilk/health-statistic-api/ent/hkdata"
	"github.com/google/uuid"
)

// HKData is the model entity for the HKData schema.
type HKData struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DataID holds the value of the "data_id" field.
	DataID string `json:"data_id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// StartTimestamp holds the value of the "start_timestamp" field.
	StartTimestamp string `json:"start_timestamp,omitempty"`
	// EndTimestamp holds the value of the "end_timestamp" field.
	EndTimestamp string `json:"end_timestamp,omitempty"`
	// TimezoneID holds the value of the "timezone_id" field.
	TimezoneID string `json:"timezone_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HKDataQuery when eager-loading is set.
	Edges           HKDataEdges `json:"-"`
	health_kit_data *uuid.UUID
	selectValues    sql.SelectValues
}

// HKDataEdges holds the relations/edges for other nodes in the graph.
type HKDataEdges struct {
	// Healthkit holds the value of the healthkit edge.
	Healthkit *HealthKit `json:"healthkit,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// HealthkitOrErr returns the Healthkit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HKDataEdges) HealthkitOrErr() (*HealthKit, error) {
	if e.loadedTypes[0] {
		if e.Healthkit == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: healthkit.Label}
		}
		return e.Healthkit, nil
	}
	return nil, &NotLoadedError{edge: "healthkit"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HKData) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hkdata.FieldDataID, hkdata.FieldType, hkdata.FieldValue, hkdata.FieldStartTimestamp, hkdata.FieldEndTimestamp, hkdata.FieldTimezoneID:
			values[i] = new(sql.NullString)
		case hkdata.FieldID:
			values[i] = new(uuid.UUID)
		case hkdata.ForeignKeys[0]: // health_kit_data
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HKData fields.
func (hd *HKData) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hkdata.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				hd.ID = *value
			}
		case hkdata.FieldDataID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field data_id", values[i])
			} else if value.Valid {
				hd.DataID = value.String
			}
		case hkdata.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				hd.Type = value.String
			}
		case hkdata.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				hd.Value = value.String
			}
		case hkdata.FieldStartTimestamp:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field start_timestamp", values[i])
			} else if value.Valid {
				hd.StartTimestamp = value.String
			}
		case hkdata.FieldEndTimestamp:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field end_timestamp", values[i])
			} else if value.Valid {
				hd.EndTimestamp = value.String
			}
		case hkdata.FieldTimezoneID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field timezone_id", values[i])
			} else if value.Valid {
				hd.TimezoneID = value.String
			}
		case hkdata.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field health_kit_data", values[i])
			} else if value.Valid {
				hd.health_kit_data = new(uuid.UUID)
				*hd.health_kit_data = *value.S.(*uuid.UUID)
			}
		default:
			hd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the HKData.
// This includes values selected through modifiers, order, etc.
func (hd *HKData) GetValue(name string) (ent.Value, error) {
	return hd.selectValues.Get(name)
}

// QueryHealthkit queries the "healthkit" edge of the HKData entity.
func (hd *HKData) QueryHealthkit() *HealthKitQuery {
	return NewHKDataClient(hd.config).QueryHealthkit(hd)
}

// Update returns a builder for updating this HKData.
// Note that you need to call HKData.Unwrap() before calling this method if this HKData
// was returned from a transaction, and the transaction was committed or rolled back.
func (hd *HKData) Update() *HKDataUpdateOne {
	return NewHKDataClient(hd.config).UpdateOne(hd)
}

// Unwrap unwraps the HKData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (hd *HKData) Unwrap() *HKData {
	_tx, ok := hd.config.driver.(*txDriver)
	if !ok {
		panic("ent: HKData is not a transactional entity")
	}
	hd.config.driver = _tx.drv
	return hd
}

// String implements the fmt.Stringer.
func (hd *HKData) String() string {
	var builder strings.Builder
	builder.WriteString("HKData(")
	builder.WriteString(fmt.Sprintf("id=%v, ", hd.ID))
	builder.WriteString("data_id=")
	builder.WriteString(hd.DataID)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(hd.Type)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(hd.Value)
	builder.WriteString(", ")
	builder.WriteString("start_timestamp=")
	builder.WriteString(hd.StartTimestamp)
	builder.WriteString(", ")
	builder.WriteString("end_timestamp=")
	builder.WriteString(hd.EndTimestamp)
	builder.WriteString(", ")
	builder.WriteString("timezone_id=")
	builder.WriteString(hd.TimezoneID)
	builder.WriteByte(')')
	return builder.String()
}

// MarshalJSON implements the json.Marshaler interface.
func (hd *HKData) MarshalJSON() ([]byte, error) {
	type Alias HKData
	return json.Marshal(&struct {
		*Alias
		HKDataEdges
	}{
		Alias:       (*Alias)(hd),
		HKDataEdges: hd.Edges,
	})
}

// HKDataSlice is a parsable slice of HKData.
type HKDataSlice []*HKData
