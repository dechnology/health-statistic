// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eesoymilk/health-statistic-api/ent/healthkit"
	"github.com/eesoymilk/health-statistic-api/ent/predicate"
)

// HealthKitUpdate is the builder for updating HealthKit entities.
type HealthKitUpdate struct {
	config
	hooks    []Hook
	mutation *HealthKitMutation
}

// Where appends a list predicates to the HealthKitUpdate builder.
func (hku *HealthKitUpdate) Where(ps ...predicate.HealthKit) *HealthKitUpdate {
	hku.mutation.Where(ps...)
	return hku
}

// SetData sets the "data" field.
func (hku *HealthKitUpdate) SetData(m map[string]interface{}) *HealthKitUpdate {
	hku.mutation.SetData(m)
	return hku
}

// Mutation returns the HealthKitMutation object of the builder.
func (hku *HealthKitUpdate) Mutation() *HealthKitMutation {
	return hku.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hku *HealthKitUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, hku.sqlSave, hku.mutation, hku.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hku *HealthKitUpdate) SaveX(ctx context.Context) int {
	affected, err := hku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hku *HealthKitUpdate) Exec(ctx context.Context) error {
	_, err := hku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hku *HealthKitUpdate) ExecX(ctx context.Context) {
	if err := hku.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hku *HealthKitUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(healthkit.Table, healthkit.Columns, sqlgraph.NewFieldSpec(healthkit.FieldID, field.TypeInt))
	if ps := hku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hku.mutation.Data(); ok {
		_spec.SetField(healthkit.FieldData, field.TypeJSON, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{healthkit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hku.mutation.done = true
	return n, nil
}

// HealthKitUpdateOne is the builder for updating a single HealthKit entity.
type HealthKitUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HealthKitMutation
}

// SetData sets the "data" field.
func (hkuo *HealthKitUpdateOne) SetData(m map[string]interface{}) *HealthKitUpdateOne {
	hkuo.mutation.SetData(m)
	return hkuo
}

// Mutation returns the HealthKitMutation object of the builder.
func (hkuo *HealthKitUpdateOne) Mutation() *HealthKitMutation {
	return hkuo.mutation
}

// Where appends a list predicates to the HealthKitUpdate builder.
func (hkuo *HealthKitUpdateOne) Where(ps ...predicate.HealthKit) *HealthKitUpdateOne {
	hkuo.mutation.Where(ps...)
	return hkuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (hkuo *HealthKitUpdateOne) Select(field string, fields ...string) *HealthKitUpdateOne {
	hkuo.fields = append([]string{field}, fields...)
	return hkuo
}

// Save executes the query and returns the updated HealthKit entity.
func (hkuo *HealthKitUpdateOne) Save(ctx context.Context) (*HealthKit, error) {
	return withHooks(ctx, hkuo.sqlSave, hkuo.mutation, hkuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hkuo *HealthKitUpdateOne) SaveX(ctx context.Context) *HealthKit {
	node, err := hkuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (hkuo *HealthKitUpdateOne) Exec(ctx context.Context) error {
	_, err := hkuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hkuo *HealthKitUpdateOne) ExecX(ctx context.Context) {
	if err := hkuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hkuo *HealthKitUpdateOne) sqlSave(ctx context.Context) (_node *HealthKit, err error) {
	_spec := sqlgraph.NewUpdateSpec(healthkit.Table, healthkit.Columns, sqlgraph.NewFieldSpec(healthkit.FieldID, field.TypeInt))
	id, ok := hkuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HealthKit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := hkuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, healthkit.FieldID)
		for _, f := range fields {
			if !healthkit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != healthkit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := hkuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hkuo.mutation.Data(); ok {
		_spec.SetField(healthkit.FieldData, field.TypeJSON, value)
	}
	_node = &HealthKit{config: hkuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, hkuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{healthkit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	hkuo.mutation.done = true
	return _node, nil
}
