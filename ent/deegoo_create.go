// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eesoymilk/health-statistic-api/ent/deegoo"
	"github.com/eesoymilk/health-statistic-api/ent/user"
	"github.com/google/uuid"
)

// DeegooCreate is the builder for creating a Deegoo entity.
type DeegooCreate struct {
	config
	mutation *DeegooMutation
	hooks    []Hook
}

// SetPerception sets the "perception" field.
func (dc *DeegooCreate) SetPerception(i int8) *DeegooCreate {
	dc.mutation.SetPerception(i)
	return dc
}

// SetFocus sets the "focus" field.
func (dc *DeegooCreate) SetFocus(i int8) *DeegooCreate {
	dc.mutation.SetFocus(i)
	return dc
}

// SetExecution sets the "execution" field.
func (dc *DeegooCreate) SetExecution(i int8) *DeegooCreate {
	dc.mutation.SetExecution(i)
	return dc
}

// SetMemory sets the "memory" field.
func (dc *DeegooCreate) SetMemory(i int8) *DeegooCreate {
	dc.mutation.SetMemory(i)
	return dc
}

// SetLanguage sets the "language" field.
func (dc *DeegooCreate) SetLanguage(i int8) *DeegooCreate {
	dc.mutation.SetLanguage(i)
	return dc
}

// SetCreatedAt sets the "created_at" field.
func (dc *DeegooCreate) SetCreatedAt(t time.Time) *DeegooCreate {
	dc.mutation.SetCreatedAt(t)
	return dc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dc *DeegooCreate) SetNillableCreatedAt(t *time.Time) *DeegooCreate {
	if t != nil {
		dc.SetCreatedAt(*t)
	}
	return dc
}

// SetID sets the "id" field.
func (dc *DeegooCreate) SetID(u uuid.UUID) *DeegooCreate {
	dc.mutation.SetID(u)
	return dc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dc *DeegooCreate) SetNillableID(u *uuid.UUID) *DeegooCreate {
	if u != nil {
		dc.SetID(*u)
	}
	return dc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (dc *DeegooCreate) SetUserID(id string) *DeegooCreate {
	dc.mutation.SetUserID(id)
	return dc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (dc *DeegooCreate) SetNillableUserID(id *string) *DeegooCreate {
	if id != nil {
		dc = dc.SetUserID(*id)
	}
	return dc
}

// SetUser sets the "user" edge to the User entity.
func (dc *DeegooCreate) SetUser(u *User) *DeegooCreate {
	return dc.SetUserID(u.ID)
}

// Mutation returns the DeegooMutation object of the builder.
func (dc *DeegooCreate) Mutation() *DeegooMutation {
	return dc.mutation
}

// Save creates the Deegoo in the database.
func (dc *DeegooCreate) Save(ctx context.Context) (*Deegoo, error) {
	dc.defaults()
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DeegooCreate) SaveX(ctx context.Context) *Deegoo {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DeegooCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DeegooCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DeegooCreate) defaults() {
	if _, ok := dc.mutation.CreatedAt(); !ok {
		v := deegoo.DefaultCreatedAt()
		dc.mutation.SetCreatedAt(v)
	}
	if _, ok := dc.mutation.ID(); !ok {
		v := deegoo.DefaultID()
		dc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DeegooCreate) check() error {
	if _, ok := dc.mutation.Perception(); !ok {
		return &ValidationError{Name: "perception", err: errors.New(`ent: missing required field "Deegoo.perception"`)}
	}
	if v, ok := dc.mutation.Perception(); ok {
		if err := deegoo.PerceptionValidator(v); err != nil {
			return &ValidationError{Name: "perception", err: fmt.Errorf(`ent: validator failed for field "Deegoo.perception": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Focus(); !ok {
		return &ValidationError{Name: "focus", err: errors.New(`ent: missing required field "Deegoo.focus"`)}
	}
	if v, ok := dc.mutation.Focus(); ok {
		if err := deegoo.FocusValidator(v); err != nil {
			return &ValidationError{Name: "focus", err: fmt.Errorf(`ent: validator failed for field "Deegoo.focus": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Execution(); !ok {
		return &ValidationError{Name: "execution", err: errors.New(`ent: missing required field "Deegoo.execution"`)}
	}
	if v, ok := dc.mutation.Execution(); ok {
		if err := deegoo.ExecutionValidator(v); err != nil {
			return &ValidationError{Name: "execution", err: fmt.Errorf(`ent: validator failed for field "Deegoo.execution": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Memory(); !ok {
		return &ValidationError{Name: "memory", err: errors.New(`ent: missing required field "Deegoo.memory"`)}
	}
	if v, ok := dc.mutation.Memory(); ok {
		if err := deegoo.MemoryValidator(v); err != nil {
			return &ValidationError{Name: "memory", err: fmt.Errorf(`ent: validator failed for field "Deegoo.memory": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "Deegoo.language"`)}
	}
	if v, ok := dc.mutation.Language(); ok {
		if err := deegoo.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf(`ent: validator failed for field "Deegoo.language": %w`, err)}
		}
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Deegoo.created_at"`)}
	}
	return nil
}

func (dc *DeegooCreate) sqlSave(ctx context.Context) (*Deegoo, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DeegooCreate) createSpec() (*Deegoo, *sqlgraph.CreateSpec) {
	var (
		_node = &Deegoo{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(deegoo.Table, sqlgraph.NewFieldSpec(deegoo.FieldID, field.TypeUUID))
	)
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dc.mutation.Perception(); ok {
		_spec.SetField(deegoo.FieldPerception, field.TypeInt8, value)
		_node.Perception = value
	}
	if value, ok := dc.mutation.Focus(); ok {
		_spec.SetField(deegoo.FieldFocus, field.TypeInt8, value)
		_node.Focus = value
	}
	if value, ok := dc.mutation.Execution(); ok {
		_spec.SetField(deegoo.FieldExecution, field.TypeInt8, value)
		_node.Execution = value
	}
	if value, ok := dc.mutation.Memory(); ok {
		_spec.SetField(deegoo.FieldMemory, field.TypeInt8, value)
		_node.Memory = value
	}
	if value, ok := dc.mutation.Language(); ok {
		_spec.SetField(deegoo.FieldLanguage, field.TypeInt8, value)
		_node.Language = value
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.SetField(deegoo.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := dc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deegoo.UserTable,
			Columns: []string{deegoo.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_deegoo = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DeegooCreateBulk is the builder for creating many Deegoo entities in bulk.
type DeegooCreateBulk struct {
	config
	builders []*DeegooCreate
}

// Save creates the Deegoo entities in the database.
func (dcb *DeegooCreateBulk) Save(ctx context.Context) ([]*Deegoo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Deegoo, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeegooMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DeegooCreateBulk) SaveX(ctx context.Context) []*Deegoo {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DeegooCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DeegooCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
