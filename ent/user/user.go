// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBirthYear holds the string denoting the birth_year field in the database.
	FieldBirthYear = "birth_year"
	// FieldHeight holds the string denoting the height field in the database.
	FieldHeight = "height"
	// FieldWeight holds the string denoting the weight field in the database.
	FieldWeight = "weight"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldEducationLevel holds the string denoting the education_level field in the database.
	FieldEducationLevel = "education_level"
	// FieldOccupation holds the string denoting the occupation field in the database.
	FieldOccupation = "occupation"
	// FieldMarriage holds the string denoting the marriage field in the database.
	FieldMarriage = "marriage"
	// FieldMedicalHistory holds the string denoting the medical_history field in the database.
	FieldMedicalHistory = "medical_history"
	// FieldMedicationStatus holds the string denoting the medication_status field in the database.
	FieldMedicationStatus = "medication_status"
	// FieldDementedAmongDirectRelatives holds the string denoting the demented_among_direct_relatives field in the database.
	FieldDementedAmongDirectRelatives = "demented_among_direct_relatives"
	// FieldHeadInjuryExperience holds the string denoting the head_injury_experience field in the database.
	FieldHeadInjuryExperience = "head_injury_experience"
	// FieldEarCondition holds the string denoting the ear_condition field in the database.
	FieldEarCondition = "ear_condition"
	// FieldEyesightCondition holds the string denoting the eyesight_condition field in the database.
	FieldEyesightCondition = "eyesight_condition"
	// FieldSmokingHabit holds the string denoting the smoking_habit field in the database.
	FieldSmokingHabit = "smoking_habit"
	// Table holds the table name of the user in the database.
	Table = "users"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldBirthYear,
	FieldHeight,
	FieldWeight,
	FieldGender,
	FieldEducationLevel,
	FieldOccupation,
	FieldMarriage,
	FieldMedicalHistory,
	FieldMedicationStatus,
	FieldDementedAmongDirectRelatives,
	FieldHeadInjuryExperience,
	FieldEarCondition,
	FieldEyesightCondition,
	FieldSmokingHabit,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// BirthYearValidator is a validator for the "birth_year" field. It is called by the builders before save.
	BirthYearValidator func(int) error
	// HeightValidator is a validator for the "height" field. It is called by the builders before save.
	HeightValidator func(float64) error
	// WeightValidator is a validator for the "weight" field. It is called by the builders before save.
	WeightValidator func(float64) error
	// MedicalHistoryValidator is a validator for the "medical_history" field. It is called by the builders before save.
	MedicalHistoryValidator func(string) error
	// MedicationStatusValidator is a validator for the "medication_status" field. It is called by the builders before save.
	MedicationStatusValidator func(string) error
)

// Gender defines the type for the "gender" enum field.
type Gender string

// Gender values.
const (
	GenderMale      Gender = "male"
	GenderFemale    Gender = "female"
	GenderNonbinary Gender = "nonbinary"
)

func (ge Gender) String() string {
	return string(ge)
}

// GenderValidator is a validator for the "gender" field enum values. It is called by the builders before save.
func GenderValidator(ge Gender) error {
	switch ge {
	case GenderMale, GenderFemale, GenderNonbinary:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for gender field: %q", ge)
	}
}

// EducationLevel defines the type for the "education_level" enum field.
type EducationLevel string

// EducationLevel values.
const (
	EducationLevelElementrySchoolOrBelow EducationLevel = "elementry_school_or_below"
	EducationLevelMiddleSchool           EducationLevel = "middle_school"
	EducationLevelHighSchool             EducationLevel = "high_school"
	EducationLevelBachelor               EducationLevel = "bachelor"
	EducationLevelMaster                 EducationLevel = "master"
	EducationLevelDoctorate              EducationLevel = "doctorate"
)

func (el EducationLevel) String() string {
	return string(el)
}

// EducationLevelValidator is a validator for the "education_level" field enum values. It is called by the builders before save.
func EducationLevelValidator(el EducationLevel) error {
	switch el {
	case EducationLevelElementrySchoolOrBelow, EducationLevelMiddleSchool, EducationLevelHighSchool, EducationLevelBachelor, EducationLevelMaster, EducationLevelDoctorate:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for education_level field: %q", el)
	}
}

// Occupation defines the type for the "occupation" enum field.
type Occupation string

// Occupation values.
const (
	OccupationStudent             Occupation = "student"
	OccupationGovernmentEmployee  Occupation = "government_employee"
	OccupationServiceIndustry     Occupation = "service_industry"
	OccupationIndustryAndCommerce Occupation = "industry_and_commerce"
	OccupationFreelancer          Occupation = "freelancer"
	OccupationDomestic            Occupation = "domestic"
)

func (o Occupation) String() string {
	return string(o)
}

// OccupationValidator is a validator for the "occupation" field enum values. It is called by the builders before save.
func OccupationValidator(o Occupation) error {
	switch o {
	case OccupationStudent, OccupationGovernmentEmployee, OccupationServiceIndustry, OccupationIndustryAndCommerce, OccupationFreelancer, OccupationDomestic:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for occupation field: %q", o)
	}
}

// Marriage defines the type for the "marriage" enum field.
type Marriage string

// Marriage values.
const (
	MarriageSingle   Marriage = "single"
	MarriageMarried  Marriage = "married"
	MarriageDivorced Marriage = "divorced"
	MarriageWidowed  Marriage = "widowed"
)

func (m Marriage) String() string {
	return string(m)
}

// MarriageValidator is a validator for the "marriage" field enum values. It is called by the builders before save.
func MarriageValidator(m Marriage) error {
	switch m {
	case MarriageSingle, MarriageMarried, MarriageDivorced, MarriageWidowed:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for marriage field: %q", m)
	}
}

// EarCondition defines the type for the "ear_condition" enum field.
type EarCondition string

// EarCondition values.
const (
	EarConditionNormal                        EarCondition = "normal"
	EarConditionSlightlyAffectingConversation EarCondition = "slightly_affecting_conversation"
	EarConditionNeedHearingAid                EarCondition = "need_hearing_aid"
)

func (ec EarCondition) String() string {
	return string(ec)
}

// EarConditionValidator is a validator for the "ear_condition" field enum values. It is called by the builders before save.
func EarConditionValidator(ec EarCondition) error {
	switch ec {
	case EarConditionNormal, EarConditionSlightlyAffectingConversation, EarConditionNeedHearingAid:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for ear_condition field: %q", ec)
	}
}

// EyesightCondition defines the type for the "eyesight_condition" enum field.
type EyesightCondition string

// EyesightCondition values.
const (
	EyesightConditionNormal                   EyesightCondition = "normal"
	EyesightConditionSlightlyAffectingReading EyesightCondition = "slightly_affecting_reading"
	EyesightConditionNeedGlasses              EyesightCondition = "need_glasses"
)

func (ec EyesightCondition) String() string {
	return string(ec)
}

// EyesightConditionValidator is a validator for the "eyesight_condition" field enum values. It is called by the builders before save.
func EyesightConditionValidator(ec EyesightCondition) error {
	switch ec {
	case EyesightConditionNormal, EyesightConditionSlightlyAffectingReading, EyesightConditionNeedGlasses:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for eyesight_condition field: %q", ec)
	}
}

// SmokingHabit defines the type for the "smoking_habit" enum field.
type SmokingHabit string

// SmokingHabit values.
const (
	SmokingHabitNone      SmokingHabit = "none"
	SmokingHabitSometimes SmokingHabit = "sometimes"
	SmokingHabitEveryday  SmokingHabit = "everyday"
)

func (sh SmokingHabit) String() string {
	return string(sh)
}

// SmokingHabitValidator is a validator for the "smoking_habit" field enum values. It is called by the builders before save.
func SmokingHabitValidator(sh SmokingHabit) error {
	switch sh {
	case SmokingHabitNone, SmokingHabitSometimes, SmokingHabitEveryday:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for smoking_habit field: %q", sh)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBirthYear orders the results by the birth_year field.
func ByBirthYear(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBirthYear, opts...).ToFunc()
}

// ByHeight orders the results by the height field.
func ByHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHeight, opts...).ToFunc()
}

// ByWeight orders the results by the weight field.
func ByWeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeight, opts...).ToFunc()
}

// ByGender orders the results by the gender field.
func ByGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// ByEducationLevel orders the results by the education_level field.
func ByEducationLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEducationLevel, opts...).ToFunc()
}

// ByOccupation orders the results by the occupation field.
func ByOccupation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOccupation, opts...).ToFunc()
}

// ByMarriage orders the results by the marriage field.
func ByMarriage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMarriage, opts...).ToFunc()
}

// ByMedicalHistory orders the results by the medical_history field.
func ByMedicalHistory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMedicalHistory, opts...).ToFunc()
}

// ByMedicationStatus orders the results by the medication_status field.
func ByMedicationStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMedicationStatus, opts...).ToFunc()
}

// ByDementedAmongDirectRelatives orders the results by the demented_among_direct_relatives field.
func ByDementedAmongDirectRelatives(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDementedAmongDirectRelatives, opts...).ToFunc()
}

// ByHeadInjuryExperience orders the results by the head_injury_experience field.
func ByHeadInjuryExperience(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHeadInjuryExperience, opts...).ToFunc()
}

// ByEarCondition orders the results by the ear_condition field.
func ByEarCondition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEarCondition, opts...).ToFunc()
}

// ByEyesightCondition orders the results by the eyesight_condition field.
func ByEyesightCondition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEyesightCondition, opts...).ToFunc()
}

// BySmokingHabit orders the results by the smoking_habit field.
func BySmokingHabit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSmokingHabit, opts...).ToFunc()
}
