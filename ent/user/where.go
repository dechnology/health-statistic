// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/eesoymilk/health-statistic-api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// BirthYear applies equality check predicate on the "birth_year" field. It's identical to BirthYearEQ.
func BirthYear(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBirthYear, v))
}

// Height applies equality check predicate on the "height" field. It's identical to HeightEQ.
func Height(v float64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHeight, v))
}

// Weight applies equality check predicate on the "weight" field. It's identical to WeightEQ.
func Weight(v float64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldWeight, v))
}

// DementedAmongDirectRelatives applies equality check predicate on the "demented_among_direct_relatives" field. It's identical to DementedAmongDirectRelativesEQ.
func DementedAmongDirectRelatives(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDementedAmongDirectRelatives, v))
}

// HeadInjuryExperience applies equality check predicate on the "head_injury_experience" field. It's identical to HeadInjuryExperienceEQ.
func HeadInjuryExperience(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHeadInjuryExperience, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// BirthYearEQ applies the EQ predicate on the "birth_year" field.
func BirthYearEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBirthYear, v))
}

// BirthYearNEQ applies the NEQ predicate on the "birth_year" field.
func BirthYearNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBirthYear, v))
}

// BirthYearIn applies the In predicate on the "birth_year" field.
func BirthYearIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldBirthYear, vs...))
}

// BirthYearNotIn applies the NotIn predicate on the "birth_year" field.
func BirthYearNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBirthYear, vs...))
}

// BirthYearGT applies the GT predicate on the "birth_year" field.
func BirthYearGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldBirthYear, v))
}

// BirthYearGTE applies the GTE predicate on the "birth_year" field.
func BirthYearGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldBirthYear, v))
}

// BirthYearLT applies the LT predicate on the "birth_year" field.
func BirthYearLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldBirthYear, v))
}

// BirthYearLTE applies the LTE predicate on the "birth_year" field.
func BirthYearLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldBirthYear, v))
}

// HeightEQ applies the EQ predicate on the "height" field.
func HeightEQ(v float64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHeight, v))
}

// HeightNEQ applies the NEQ predicate on the "height" field.
func HeightNEQ(v float64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldHeight, v))
}

// HeightIn applies the In predicate on the "height" field.
func HeightIn(vs ...float64) predicate.User {
	return predicate.User(sql.FieldIn(FieldHeight, vs...))
}

// HeightNotIn applies the NotIn predicate on the "height" field.
func HeightNotIn(vs ...float64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldHeight, vs...))
}

// HeightGT applies the GT predicate on the "height" field.
func HeightGT(v float64) predicate.User {
	return predicate.User(sql.FieldGT(FieldHeight, v))
}

// HeightGTE applies the GTE predicate on the "height" field.
func HeightGTE(v float64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldHeight, v))
}

// HeightLT applies the LT predicate on the "height" field.
func HeightLT(v float64) predicate.User {
	return predicate.User(sql.FieldLT(FieldHeight, v))
}

// HeightLTE applies the LTE predicate on the "height" field.
func HeightLTE(v float64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldHeight, v))
}

// WeightEQ applies the EQ predicate on the "weight" field.
func WeightEQ(v float64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldWeight, v))
}

// WeightNEQ applies the NEQ predicate on the "weight" field.
func WeightNEQ(v float64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldWeight, v))
}

// WeightIn applies the In predicate on the "weight" field.
func WeightIn(vs ...float64) predicate.User {
	return predicate.User(sql.FieldIn(FieldWeight, vs...))
}

// WeightNotIn applies the NotIn predicate on the "weight" field.
func WeightNotIn(vs ...float64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldWeight, vs...))
}

// WeightGT applies the GT predicate on the "weight" field.
func WeightGT(v float64) predicate.User {
	return predicate.User(sql.FieldGT(FieldWeight, v))
}

// WeightGTE applies the GTE predicate on the "weight" field.
func WeightGTE(v float64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldWeight, v))
}

// WeightLT applies the LT predicate on the "weight" field.
func WeightLT(v float64) predicate.User {
	return predicate.User(sql.FieldLT(FieldWeight, v))
}

// WeightLTE applies the LTE predicate on the "weight" field.
func WeightLTE(v float64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldWeight, v))
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v Gender) predicate.User {
	return predicate.User(sql.FieldEQ(FieldGender, v))
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v Gender) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldGender, v))
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...Gender) predicate.User {
	return predicate.User(sql.FieldIn(FieldGender, vs...))
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...Gender) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldGender, vs...))
}

// EducationLevelEQ applies the EQ predicate on the "education_level" field.
func EducationLevelEQ(v EducationLevel) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEducationLevel, v))
}

// EducationLevelNEQ applies the NEQ predicate on the "education_level" field.
func EducationLevelNEQ(v EducationLevel) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEducationLevel, v))
}

// EducationLevelIn applies the In predicate on the "education_level" field.
func EducationLevelIn(vs ...EducationLevel) predicate.User {
	return predicate.User(sql.FieldIn(FieldEducationLevel, vs...))
}

// EducationLevelNotIn applies the NotIn predicate on the "education_level" field.
func EducationLevelNotIn(vs ...EducationLevel) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEducationLevel, vs...))
}

// OccupationEQ applies the EQ predicate on the "occupation" field.
func OccupationEQ(v Occupation) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOccupation, v))
}

// OccupationNEQ applies the NEQ predicate on the "occupation" field.
func OccupationNEQ(v Occupation) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldOccupation, v))
}

// OccupationIn applies the In predicate on the "occupation" field.
func OccupationIn(vs ...Occupation) predicate.User {
	return predicate.User(sql.FieldIn(FieldOccupation, vs...))
}

// OccupationNotIn applies the NotIn predicate on the "occupation" field.
func OccupationNotIn(vs ...Occupation) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldOccupation, vs...))
}

// MarriageEQ applies the EQ predicate on the "marriage" field.
func MarriageEQ(v Marriage) predicate.User {
	return predicate.User(sql.FieldEQ(FieldMarriage, v))
}

// MarriageNEQ applies the NEQ predicate on the "marriage" field.
func MarriageNEQ(v Marriage) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldMarriage, v))
}

// MarriageIn applies the In predicate on the "marriage" field.
func MarriageIn(vs ...Marriage) predicate.User {
	return predicate.User(sql.FieldIn(FieldMarriage, vs...))
}

// MarriageNotIn applies the NotIn predicate on the "marriage" field.
func MarriageNotIn(vs ...Marriage) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldMarriage, vs...))
}

// MedicalHistoryEQ applies the EQ predicate on the "medical_history" field.
func MedicalHistoryEQ(v MedicalHistory) predicate.User {
	return predicate.User(sql.FieldEQ(FieldMedicalHistory, v))
}

// MedicalHistoryNEQ applies the NEQ predicate on the "medical_history" field.
func MedicalHistoryNEQ(v MedicalHistory) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldMedicalHistory, v))
}

// MedicalHistoryIn applies the In predicate on the "medical_history" field.
func MedicalHistoryIn(vs ...MedicalHistory) predicate.User {
	return predicate.User(sql.FieldIn(FieldMedicalHistory, vs...))
}

// MedicalHistoryNotIn applies the NotIn predicate on the "medical_history" field.
func MedicalHistoryNotIn(vs ...MedicalHistory) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldMedicalHistory, vs...))
}

// MedicationStatusEQ applies the EQ predicate on the "medication_status" field.
func MedicationStatusEQ(v MedicationStatus) predicate.User {
	return predicate.User(sql.FieldEQ(FieldMedicationStatus, v))
}

// MedicationStatusNEQ applies the NEQ predicate on the "medication_status" field.
func MedicationStatusNEQ(v MedicationStatus) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldMedicationStatus, v))
}

// MedicationStatusIn applies the In predicate on the "medication_status" field.
func MedicationStatusIn(vs ...MedicationStatus) predicate.User {
	return predicate.User(sql.FieldIn(FieldMedicationStatus, vs...))
}

// MedicationStatusNotIn applies the NotIn predicate on the "medication_status" field.
func MedicationStatusNotIn(vs ...MedicationStatus) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldMedicationStatus, vs...))
}

// DementedAmongDirectRelativesEQ applies the EQ predicate on the "demented_among_direct_relatives" field.
func DementedAmongDirectRelativesEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDementedAmongDirectRelatives, v))
}

// DementedAmongDirectRelativesNEQ applies the NEQ predicate on the "demented_among_direct_relatives" field.
func DementedAmongDirectRelativesNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDementedAmongDirectRelatives, v))
}

// HeadInjuryExperienceEQ applies the EQ predicate on the "head_injury_experience" field.
func HeadInjuryExperienceEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHeadInjuryExperience, v))
}

// HeadInjuryExperienceNEQ applies the NEQ predicate on the "head_injury_experience" field.
func HeadInjuryExperienceNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldHeadInjuryExperience, v))
}

// EarConditionEQ applies the EQ predicate on the "ear_condition" field.
func EarConditionEQ(v EarCondition) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEarCondition, v))
}

// EarConditionNEQ applies the NEQ predicate on the "ear_condition" field.
func EarConditionNEQ(v EarCondition) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEarCondition, v))
}

// EarConditionIn applies the In predicate on the "ear_condition" field.
func EarConditionIn(vs ...EarCondition) predicate.User {
	return predicate.User(sql.FieldIn(FieldEarCondition, vs...))
}

// EarConditionNotIn applies the NotIn predicate on the "ear_condition" field.
func EarConditionNotIn(vs ...EarCondition) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEarCondition, vs...))
}

// EyesightConditionEQ applies the EQ predicate on the "eyesight_condition" field.
func EyesightConditionEQ(v EyesightCondition) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEyesightCondition, v))
}

// EyesightConditionNEQ applies the NEQ predicate on the "eyesight_condition" field.
func EyesightConditionNEQ(v EyesightCondition) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEyesightCondition, v))
}

// EyesightConditionIn applies the In predicate on the "eyesight_condition" field.
func EyesightConditionIn(vs ...EyesightCondition) predicate.User {
	return predicate.User(sql.FieldIn(FieldEyesightCondition, vs...))
}

// EyesightConditionNotIn applies the NotIn predicate on the "eyesight_condition" field.
func EyesightConditionNotIn(vs ...EyesightCondition) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEyesightCondition, vs...))
}

// SmokingHabitEQ applies the EQ predicate on the "smoking_habit" field.
func SmokingHabitEQ(v SmokingHabit) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSmokingHabit, v))
}

// SmokingHabitNEQ applies the NEQ predicate on the "smoking_habit" field.
func SmokingHabitNEQ(v SmokingHabit) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldSmokingHabit, v))
}

// SmokingHabitIn applies the In predicate on the "smoking_habit" field.
func SmokingHabitIn(vs ...SmokingHabit) predicate.User {
	return predicate.User(sql.FieldIn(FieldSmokingHabit, vs...))
}

// SmokingHabitNotIn applies the NotIn predicate on the "smoking_habit" field.
func SmokingHabitNotIn(vs ...SmokingHabit) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldSmokingHabit, vs...))
}

// HasQuestionnaireResponses applies the HasEdge predicate on the "questionnaire_responses" edge.
func HasQuestionnaireResponses() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, QuestionnaireResponsesTable, QuestionnaireResponsesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionnaireResponsesWith applies the HasEdge predicate on the "questionnaire_responses" edge with a given conditions (other predicates).
func HasQuestionnaireResponsesWith(preds ...predicate.QuestionnaireResponse) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newQuestionnaireResponsesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNotifications applies the HasEdge predicate on the "notifications" edge.
func HasNotifications() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NotificationsTable, NotificationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNotificationsWith applies the HasEdge predicate on the "notifications" edge with a given conditions (other predicates).
func HasNotificationsWith(preds ...predicate.Notification) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newNotificationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPrices applies the HasEdge predicate on the "prices" edge.
func HasPrices() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PricesTable, PricesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPricesWith applies the HasEdge predicate on the "prices" edge with a given conditions (other predicates).
func HasPricesWith(preds ...predicate.Price) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newPricesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMycards applies the HasEdge predicate on the "mycards" edge.
func HasMycards() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MycardsTable, MycardsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMycardsWith applies the HasEdge predicate on the "mycards" edge with a given conditions (other predicates).
func HasMycardsWith(preds ...predicate.MyCard) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newMycardsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHealthkit applies the HasEdge predicate on the "healthkit" edge.
func HasHealthkit() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HealthkitTable, HealthkitColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHealthkitWith applies the HasEdge predicate on the "healthkit" edge with a given conditions (other predicates).
func HasHealthkitWith(preds ...predicate.HealthKit) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newHealthkitStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeegoo applies the HasEdge predicate on the "deegoo" edge.
func HasDeegoo() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DeegooTable, DeegooColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeegooWith applies the HasEdge predicate on the "deegoo" edge with a given conditions (other predicates).
func HasDeegooWith(preds ...predicate.Deegoo) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newDeegooStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		p(s.Not())
	})
}
