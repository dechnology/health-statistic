{
    "schemes": [
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "This is the API documentation for 「健康資料公鏈」.",
        "title": "Web3 - 健康資料公鏈API開發文件",
        "contact": {},
        "version": "1.0"
    },
    "host": "health-statistic.dechnology.com.tw",
    "basePath": "/api/v1",
    "paths": {
        "/health_check": {
            "get": {
                "description": "A health checking endpoint to make sure the server is not dead.",
                "tags": [
                    "Health"
                ],
                "summary": "Health Check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.HealthStatus"
                        }
                    }
                }
            }
        },
        "/mycards": {
            "get": {
                "description": "Get all MyCards from the database.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MyCard"
                ],
                "summary": "Get MyCards",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ent.MyCard"
                            }
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MyCard"
                ],
                "summary": "Create MyCard",
                "parameters": [
                    {
                        "description": "The mycard to be created",
                        "name": "mycard",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.BaseMyCard"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.MyCard"
                        }
                    }
                }
            }
        },
        "/mycards/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MyCard"
                ],
                "summary": "Get MyCard",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The mycard's ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.MyCard"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MyCard"
                ],
                "summary": "Delete MyCard",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The mycard's ID.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/notifications": {
            "get": {
                "description": "Get all notifications from the database. For each notification, the user who received this notification is also included.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notification"
                ],
                "summary": "Get Notifications",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.NotificationWithRecipient"
                            }
                        }
                    }
                }
            }
        },
        "/notifications/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notification"
                ],
                "summary": "Get Notification",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The notification's ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.NotificationWithRecipient"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notification"
                ],
                "summary": "Delete Notification",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The notification's ID.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/prices": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Price"
                ],
                "summary": "Get Prices",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ent.Price"
                            }
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Price"
                ],
                "summary": "Create Price",
                "parameters": [
                    {
                        "description": "The price to be created",
                        "name": "price",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.BasePrice"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Price"
                        }
                    }
                }
            }
        },
        "/prices/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Price"
                ],
                "summary": "Get Price",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The price's ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Price"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Price"
                ],
                "summary": "Delete Price",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The price's ID.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/questionnaires": {
            "get": {
                "description": "Get all questionnaires from the database. For each questionnaire, all questions and responses of this questionnaire are also included.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Questionnaire"
                ],
                "summary": "Get Questionnaires",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.QuestionnaireDetails"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new questionnaire and optionally its questions.\n\n## Request Body\n\n- `name` *`string`* **Required**\n    The name of the questionnaire to be created.\n\n- `questions` *`array`* Optional\n    The initial questions in this questionnaire. This field may be empty and you can add questions later using post request to `quesionnaires/:id/new/question`.\n    \n    - `body` *`string`* **Required**\n        The body of one of the question in the questionnaire.\n    \n    - `type` *`string`* **Required**\n        The type of the question. For now, we accept all strings but in the future this field might be an enum.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Questionnaire"
                ],
                "summary": "Create Questionnaire",
                "parameters": [
                    {
                        "description": "The questionnaire to be created.",
                        "name": "questionnaire",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.BaseQuestionnaire"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Questionnaire"
                        }
                    }
                }
            }
        },
        "/questionnaires/registration": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Questionnaire"
                ],
                "summary": "Get Registration Questionnaire",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.QuestionnaireWithQuestions"
                        }
                    }
                }
            }
        },
        "/questionnaires/{id}": {
            "get": {
                "description": "Get the questionnaire specified by the `id` path param. All questions and responses of the questionnaire are also included.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Questionnaire"
                ],
                "summary": "Get Questionnaire",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The questionnaire's ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.QuestionnaireDetails"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete the questionnaire specified by the `id` path param.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Questionnaire"
                ],
                "summary": "Delete Questionnaire",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The questionnaire's ID.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/questionnaires/{id}/new/question": {
            "post": {
                "description": "Create a new question for the questionnaire  by the `id` path param.\n\n## Request Body\n\n- `body` *`string`* **Required**\n    The body of one of the question in the questionnaire.\n\n- `type` *`string`* **Required**\n    The type of the question. For now, we accept all strings but in the future this field might be an enum.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Questionnaire"
                ],
                "summary": "Create Question",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The questionnaire's ID.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The question to be created.",
                        "name": "question",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.BaseQuestion"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.Question"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ent.Question"
                        }
                    }
                }
            }
        },
        "/questionnaires/{id}/new/response": {
            "post": {
                "description": "Create a new response for the questionnaire specified by `id` path param.\n\n## Request Body\n\n- `user_id` *`string`* **Required**\n    The user auth0 ID. This is the user who submits this response.\n\n- `answers` *`array`* **Required**\n    The answers to the questions in the questionnaire submitted by the user above.Note that the length of the answers array must equal to the number of questions in the given questionnaire. Also, all the `question_id`s must match the questions in the questionnaire.\n \n    - `question_id` *`string`* **Required**\n    The question id of a question in the questionnaire which this answer correspond to.\n\n    - `body` *`string`* **Required**\n    The body of the answer.\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Questionnaire"
                ],
                "summary": "Create Response",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The questionnaire's ID.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The response to be created.",
                        "name": "response",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.BaseResponse"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.QuestionnaireResponse"
                        }
                    }
                }
            }
        },
        "/questions": {
            "get": {
                "description": "Get all questions from the database. **This will NOT include questionnaires and responses.**\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Question"
                ],
                "summary": "Get Questions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.QuestionWithQuestionnaire"
                            }
                        }
                    }
                }
            }
        },
        "/questions/{id}": {
            "get": {
                "description": "Get the question specified by the `id` path param.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Question"
                ],
                "summary": "Get Question",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The question's ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.QuestionWithQuestionnaire"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete the question specified by the `id` path param.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Question"
                ],
                "summary": "Delete Question",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The question's ID.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/register": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Registration"
                ],
                "summary": "Register an User",
                "parameters": [
                    {
                        "description": "The registration data.",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.RegisterData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.RegisterResponse"
                        }
                    }
                }
            }
        },
        "/responses": {
            "get": {
                "description": "Get all responses from the database. **This will NOT include questionnaires and questions.**\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Response"
                ],
                "summary": "Get Responses",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.ResponseWithQuestionnaire"
                            }
                        }
                    }
                }
            }
        },
        "/responses/{id}": {
            "get": {
                "description": "Get the response specified by the `id` path param. **This will also includes the corresponding questionnaire.**\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Response"
                ],
                "summary": "Get Response",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The response's ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.ResponseWithQuestionnaire"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete the response specified by the `id` path param.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Response"
                ],
                "summary": "Delete Response",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The response's ID.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Get all users from the database.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get Users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ent.User"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new user.\n\n## Request Body\n\n- `first_name` *`string`* **Required**\n    The body of one of the question in the questionnaire.\n\n- `last_name` *`string`* **Required**\n    The type of the question. For now, we accept all strings but in the future this field might be an enum.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Create User",
                "parameters": [
                    {
                        "description": "The user to be created",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.BaseUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.User"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Get the user specified by the `id` path param.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The user's Auth0 ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.User"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The user's Auth0 ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "user to be updated",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.BaseUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ent.User"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Delete User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The user's Auth0 ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/users/{id}/mycards": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get All MyCards From an User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The user's Auth0 ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ent.MyCard"
                            }
                        }
                    }
                }
            }
        },
        "/users/{id}/notifications": {
            "get": {
                "description": "Get all notifications of an user.\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get All Notifications From an User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The user's Auth0 ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/ent.Notification"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{id}/prices": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get All Prices From an User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The user's Auth0 ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ent.Price"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "ent.MyCard": {
            "type": "object",
            "properties": {
                "card_password": {
                    "description": "CardPassword holds the value of the \"card_password\" field.",
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "taken_at": {
                    "description": "TakenAt holds the value of the \"taken_at\" field.",
                    "type": "string"
                }
            }
        },
        "ent.Notification": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "message": {
                    "description": "Message holds the value of the \"message\" field.",
                    "type": "string"
                },
                "read_at": {
                    "description": "ReadAt holds the value of the \"read_at\" field.",
                    "type": "string"
                },
                "sent_at": {
                    "description": "SentAt holds the value of the \"sent_at\" field.",
                    "type": "string"
                },
                "type": {
                    "description": "Type holds the value of the \"type\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/notification.Type"
                        }
                    ]
                }
            }
        },
        "ent.Price": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "description": {
                    "description": "Description holds the value of the \"description\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                },
                "taken_at": {
                    "description": "TakenAt holds the value of the \"taken_at\" field.",
                    "type": "string"
                }
            }
        },
        "ent.Question": {
            "type": "object",
            "properties": {
                "body": {
                    "description": "Body holds the value of the \"body\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "order": {
                    "description": "Order holds the value of the \"order\" field.",
                    "type": "integer"
                }
            }
        },
        "ent.Questionnaire": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                }
            }
        },
        "ent.QuestionnaireResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                }
            }
        },
        "ent.User": {
            "type": "object",
            "properties": {
                "birth_year": {
                    "description": "BirthYear holds the value of the \"birth_year\" field.",
                    "type": "integer"
                },
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "demented_among_direct_relatives": {
                    "description": "DementedAmongDirectRelatives holds the value of the \"demented_among_direct_relatives\" field.",
                    "type": "boolean"
                },
                "ear_condition": {
                    "description": "EarCondition holds the value of the \"ear_condition\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/user.EarCondition"
                        }
                    ]
                },
                "education_level": {
                    "description": "EducationLevel holds the value of the \"education_level\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/user.EducationLevel"
                        }
                    ]
                },
                "eyesight_condition": {
                    "description": "EyesightCondition holds the value of the \"eyesight_condition\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/user.EyesightCondition"
                        }
                    ]
                },
                "first_name": {
                    "description": "FirstName holds the value of the \"first_name\" field.",
                    "type": "string"
                },
                "gender": {
                    "description": "Gender holds the value of the \"gender\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/user.Gender"
                        }
                    ]
                },
                "head_injury_experience": {
                    "description": "HeadInjuryExperience holds the value of the \"head_injury_experience\" field.",
                    "type": "boolean"
                },
                "height": {
                    "description": "Height holds the value of the \"height\" field.",
                    "type": "number"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "last_name": {
                    "description": "LastName holds the value of the \"last_name\" field.",
                    "type": "string"
                },
                "marriage": {
                    "description": "Marriage holds the value of the \"marriage\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/user.Marriage"
                        }
                    ]
                },
                "medical_history": {
                    "description": "MedicalHistory holds the value of the \"medical_history\" field.",
                    "type": "string"
                },
                "medication_status": {
                    "description": "MedicationStatus holds the value of the \"medication_status\" field.",
                    "type": "string"
                },
                "occupation": {
                    "description": "Occupation holds the value of the \"occupation\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/user.Occupation"
                        }
                    ]
                },
                "smoking_habit": {
                    "description": "SmokingHabit holds the value of the \"smoking_habit\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/user.SmokingHabit"
                        }
                    ]
                },
                "updated_at": {
                    "description": "UpdatedAt holds the value of the \"updated_at\" field.",
                    "type": "string"
                },
                "weight": {
                    "description": "Weight holds the value of the \"weight\" field.",
                    "type": "number"
                }
            }
        },
        "handlers.HealthStatus": {
            "description": "Datatype of health status",
            "type": "object",
            "properties": {
                "message": {
                    "description": "Health message",
                    "type": "string",
                    "example": "Hello, this is an example message!"
                }
            }
        },
        "notification.Type": {
            "type": "string",
            "enum": [
                "normal",
                "mycard",
                "price"
            ],
            "x-enum-varnames": [
                "TypeNormal",
                "TypeMycard",
                "TypePrice"
            ]
        },
        "types.BaseAnswer": {
            "type": "object",
            "properties": {
                "body": {
                    "description": "The answer body.",
                    "type": "string",
                    "example": "我這週心情還不錯！"
                },
                "question_id": {
                    "description": "The question this answer relates to, the question also needs to be in\nthe same questionnaire as the response.",
                    "type": "string"
                }
            }
        },
        "types.BaseMyCard": {
            "type": "object",
            "properties": {
                "card_number": {
                    "type": "string"
                },
                "card_password": {
                    "type": "string"
                }
            }
        },
        "types.BasePrice": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "types.BaseQuestion": {
            "type": "object",
            "properties": {
                "body": {
                    "description": "The question body",
                    "type": "string",
                    "example": "你這週的心情如何？"
                }
            }
        },
        "types.BaseQuestionnaire": {
            "description": "BaseQuestionnaire",
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the questionnaire",
                    "type": "string",
                    "example": "問卷標題"
                },
                "questions": {
                    "description": "The initial questions in this questionnaire. This field may be empty\nand you can add questions later using post request to\n`quesionnaires/:id/new/question`.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.BaseQuestion"
                    }
                }
            }
        },
        "types.BaseResponse": {
            "type": "object",
            "properties": {
                "answers": {
                    "description": "The answers to all questions in a questionnaire.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.BaseAnswer"
                    }
                }
            }
        },
        "types.BaseUser": {
            "type": "object",
            "properties": {
                "birth_year": {
                    "type": "integer",
                    "example": 2000
                },
                "demented_among_direct_relatives": {
                    "type": "boolean",
                    "example": false
                },
                "ear_condition": {
                    "type": "string",
                    "enum": [
                        "normal",
                        "slightly_affecting_conversation",
                        "need_hearing_aid"
                    ],
                    "example": "normal"
                },
                "education_level": {
                    "type": "string",
                    "enum": [
                        "elementry_school_or_below",
                        "middle_school",
                        "high_school",
                        "bachelor",
                        "master",
                        "doctorate"
                    ],
                    "example": "doctorate"
                },
                "eyesight_condition": {
                    "type": "string",
                    "enum": [
                        "normal",
                        "slightly_affecting_reading",
                        "need_glasses"
                    ],
                    "example": "normal"
                },
                "first_name": {
                    "type": "string",
                    "example": "中天"
                },
                "gender": {
                    "type": "string",
                    "example": "male"
                },
                "head_injury_experience": {
                    "type": "boolean",
                    "example": false
                },
                "height": {
                    "type": "number",
                    "example": 185.2
                },
                "id": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string",
                    "example": "大"
                },
                "marriage": {
                    "type": "string",
                    "enum": [
                        "single",
                        "married",
                        "divorced",
                        "widowed"
                    ],
                    "example": "single"
                },
                "medical_history": {
                    "type": "string",
                    "example": "none"
                },
                "medication_status": {
                    "type": "string",
                    "example": "none"
                },
                "occupation": {
                    "type": "string",
                    "enum": [
                        "student",
                        "government_employee",
                        "service_industry",
                        "industry_and_commerce",
                        "freelancer",
                        "domestic"
                    ],
                    "example": "student"
                },
                "smoking_habit": {
                    "type": "string",
                    "enum": [
                        "none",
                        "sometimes",
                        "everyday"
                    ],
                    "example": "none"
                },
                "weight": {
                    "type": "number",
                    "example": 80.3
                }
            }
        },
        "types.NotificationWithRecipient": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "message": {
                    "description": "Message holds the value of the \"message\" field.",
                    "type": "string"
                },
                "read_at": {
                    "description": "ReadAt holds the value of the \"read_at\" field.",
                    "type": "string"
                },
                "recipient": {
                    "$ref": "#/definitions/ent.User"
                },
                "sent_at": {
                    "description": "SentAt holds the value of the \"sent_at\" field.",
                    "type": "string"
                },
                "type": {
                    "description": "Type holds the value of the \"type\" field.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/notification.Type"
                        }
                    ]
                }
            }
        },
        "types.QuestionWithQuestionnaire": {
            "type": "object",
            "properties": {
                "body": {
                    "description": "Body holds the value of the \"body\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "order": {
                    "description": "Order holds the value of the \"order\" field.",
                    "type": "integer"
                },
                "questionnaire": {
                    "$ref": "#/definitions/ent.Questionnaire"
                }
            }
        },
        "types.QuestionnaireDetails": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                },
                "questions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Question"
                    }
                },
                "responses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Response"
                    }
                }
            }
        },
        "types.QuestionnaireWithQuestions": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                },
                "questions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Question"
                    }
                }
            }
        },
        "types.RegisterData": {
            "type": "object",
            "properties": {
                "response": {
                    "$ref": "#/definitions/types.ResponseWithQuestionnaireId"
                },
                "user": {
                    "$ref": "#/definitions/types.BaseUser"
                }
            }
        },
        "types.RegisterResponse": {
            "type": "object",
            "properties": {
                "response": {
                    "$ref": "#/definitions/ent.QuestionnaireResponse"
                },
                "user": {
                    "$ref": "#/definitions/ent.User"
                }
            }
        },
        "types.Response": {
            "type": "object",
            "properties": {
                "answers": {
                    "description": "The answers to all questions in a questionnaire.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.BaseAnswer"
                    }
                },
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "user_id": {
                    "description": "The user ID of the user who submit the response.",
                    "type": "string"
                }
            }
        },
        "types.ResponseWithQuestionnaire": {
            "type": "object",
            "properties": {
                "answers": {
                    "description": "The answers to all questions in a questionnaire.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.BaseAnswer"
                    }
                },
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "questionnaire": {
                    "$ref": "#/definitions/ent.Questionnaire"
                },
                "user_id": {
                    "description": "The user ID of the user who submit the response.",
                    "type": "string"
                }
            }
        },
        "types.ResponseWithQuestionnaireId": {
            "type": "object",
            "properties": {
                "answers": {
                    "description": "The answers to all questions in a questionnaire.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.BaseAnswer"
                    }
                },
                "quesionnaire_id": {
                    "type": "string"
                }
            }
        },
        "user.EarCondition": {
            "type": "string",
            "enum": [
                "normal",
                "slightly_affecting_conversation",
                "need_hearing_aid"
            ],
            "x-enum-varnames": [
                "EarConditionNormal",
                "EarConditionSlightlyAffectingConversation",
                "EarConditionNeedHearingAid"
            ]
        },
        "user.EducationLevel": {
            "type": "string",
            "enum": [
                "elementry_school_or_below",
                "middle_school",
                "high_school",
                "bachelor",
                "master",
                "doctorate"
            ],
            "x-enum-varnames": [
                "EducationLevelElementrySchoolOrBelow",
                "EducationLevelMiddleSchool",
                "EducationLevelHighSchool",
                "EducationLevelBachelor",
                "EducationLevelMaster",
                "EducationLevelDoctorate"
            ]
        },
        "user.EyesightCondition": {
            "type": "string",
            "enum": [
                "normal",
                "slightly_affecting_reading",
                "need_glasses"
            ],
            "x-enum-varnames": [
                "EyesightConditionNormal",
                "EyesightConditionSlightlyAffectingReading",
                "EyesightConditionNeedGlasses"
            ]
        },
        "user.Gender": {
            "type": "string",
            "enum": [
                "male",
                "female",
                "nonbinary"
            ],
            "x-enum-varnames": [
                "GenderMale",
                "GenderFemale",
                "GenderNonbinary"
            ]
        },
        "user.Marriage": {
            "type": "string",
            "enum": [
                "single",
                "married",
                "divorced",
                "widowed"
            ],
            "x-enum-varnames": [
                "MarriageSingle",
                "MarriageMarried",
                "MarriageDivorced",
                "MarriageWidowed"
            ]
        },
        "user.Occupation": {
            "type": "string",
            "enum": [
                "student",
                "government_employee",
                "service_industry",
                "industry_and_commerce",
                "freelancer",
                "domestic"
            ],
            "x-enum-varnames": [
                "OccupationStudent",
                "OccupationGovernmentEmployee",
                "OccupationServiceIndustry",
                "OccupationIndustryAndCommerce",
                "OccupationFreelancer",
                "OccupationDomestic"
            ]
        },
        "user.SmokingHabit": {
            "type": "string",
            "enum": [
                "none",
                "sometimes",
                "everyday"
            ],
            "x-enum-varnames": [
                "SmokingHabitNone",
                "SmokingHabitSometimes",
                "SmokingHabitEveryday"
            ]
        }
    }
}